; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\usbh_diskio.o --asm_dir=./ --list_dir=--list --depend=mcu_application\usbh_diskio.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\usbh_diskio.crf ../FATFS/Target/usbh_diskio.c]
                          THUMB

                          AREA ||i.USBH_initialize||, CODE, READONLY, ALIGN=1

                  USBH_initialize PROC
;;;70       */
;;;71     DSTATUS USBH_initialize(BYTE lun)
000000  4601              MOV      r1,r0
;;;72     {
;;;73       /* CAUTION : USB Host library has to be initialized in the application */
;;;74     
;;;75       return RES_OK;
000002  2000              MOVS     r0,#0
;;;76     }
000004  4770              BX       lr
;;;77     
                          ENDP


                          AREA ||i.USBH_ioctl||, CODE, READONLY, ALIGN=2

                  USBH_ioctl PROC
;;;203    #if _USE_IOCTL == 1
;;;204    DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
000000  b5f0              PUSH     {r4-r7,lr}
;;;205    {
000002  b08d              SUB      sp,sp,#0x34
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;206      DRESULT res = RES_ERROR;
00000a  2701              MOVS     r7,#1
;;;207      MSC_LUNTypeDef info;
;;;208    
;;;209      switch (cmd)
00000c  b136              CBZ      r6,|L2.28|
00000e  2e01              CMP      r6,#1
000010  d006              BEQ      |L2.32|
000012  2e02              CMP      r6,#2
000014  d010              BEQ      |L2.56|
000016  2e03              CMP      r6,#3
000018  d12c              BNE      |L2.116|
00001a  e01a              B        |L2.82|
                  |L2.28|
;;;210      {
;;;211      /* Make sure that no pending write process */
;;;212      case CTRL_SYNC:
;;;213        res = RES_OK;
00001c  2700              MOVS     r7,#0
;;;214        break;
00001e  e02b              B        |L2.120|
                  |L2.32|
;;;215    
;;;216      /* Get number of sectors on the disk (DWORD) */
;;;217      case GET_SECTOR_COUNT :
;;;218        if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
000020  466a              MOV      r2,sp
000022  4629              MOV      r1,r5
000024  4816              LDR      r0,|L2.128|
000026  f7fffffe          BL       USBH_MSC_GetLUNInfo
00002a  b918              CBNZ     r0,|L2.52|
;;;219        {
;;;220          *(DWORD*)buff = info.capacity.block_nbr;
00002c  9801              LDR      r0,[sp,#4]
00002e  6020              STR      r0,[r4,#0]
;;;221          res = RES_OK;
000030  2700              MOVS     r7,#0
000032  e000              B        |L2.54|
                  |L2.52|
;;;222        }
;;;223        else
;;;224        {
;;;225          res = RES_ERROR;
000034  2701              MOVS     r7,#1
                  |L2.54|
;;;226        }
;;;227        break;
000036  e01f              B        |L2.120|
                  |L2.56|
;;;228    
;;;229      /* Get R/W sector size (WORD) */
;;;230      case GET_SECTOR_SIZE :
;;;231        if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
000038  466a              MOV      r2,sp
00003a  4629              MOV      r1,r5
00003c  4810              LDR      r0,|L2.128|
00003e  f7fffffe          BL       USBH_MSC_GetLUNInfo
000042  b920              CBNZ     r0,|L2.78|
;;;232        {
;;;233          *(DWORD*)buff = info.capacity.block_size;
000044  f8bd0008          LDRH     r0,[sp,#8]
000048  6020              STR      r0,[r4,#0]
;;;234          res = RES_OK;
00004a  2700              MOVS     r7,#0
00004c  e000              B        |L2.80|
                  |L2.78|
;;;235        }
;;;236        else
;;;237        {
;;;238          res = RES_ERROR;
00004e  2701              MOVS     r7,#1
                  |L2.80|
;;;239        }
;;;240        break;
000050  e012              B        |L2.120|
                  |L2.82|
;;;241    
;;;242        /* Get erase block size in unit of sector (DWORD) */
;;;243      case GET_BLOCK_SIZE :
;;;244    
;;;245        if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
000052  466a              MOV      r2,sp
000054  4629              MOV      r1,r5
000056  480a              LDR      r0,|L2.128|
000058  f7fffffe          BL       USBH_MSC_GetLUNInfo
00005c  b940              CBNZ     r0,|L2.112|
;;;246        {
;;;247          *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
00005e  f8bd0008          LDRH     r0,[sp,#8]
000062  17c1              ASRS     r1,r0,#31
000064  eb0051d1          ADD      r1,r0,r1,LSR #23
000068  1249              ASRS     r1,r1,#9
00006a  6021              STR      r1,[r4,#0]
;;;248          res = RES_OK;
00006c  2700              MOVS     r7,#0
00006e  e000              B        |L2.114|
                  |L2.112|
;;;249        }
;;;250        else
;;;251        {
;;;252          res = RES_ERROR;
000070  2701              MOVS     r7,#1
                  |L2.114|
;;;253        }
;;;254        break;
000072  e001              B        |L2.120|
                  |L2.116|
;;;255    
;;;256      default:
;;;257        res = RES_PARERR;
000074  2704              MOVS     r7,#4
000076  bf00              NOP                            ;209
                  |L2.120|
000078  bf00              NOP                            ;214
;;;258      }
;;;259    
;;;260      return res;
00007a  4638              MOV      r0,r7
;;;261    }
00007c  b00d              ADD      sp,sp,#0x34
00007e  bdf0              POP      {r4-r7,pc}
;;;262    #endif /* _USE_IOCTL == 1 */
                          ENDP

                  |L2.128|
                          DCD      hUsbHostFS

                          AREA ||i.USBH_read||, CODE, READONLY, ALIGN=2

                  USBH_read PROC
;;;110      */
;;;111    DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;112    {
000004  b08e              SUB      sp,sp,#0x38
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  461e              MOV      r6,r3
;;;113      DRESULT res = RES_ERROR;
00000e  f04f0801          MOV      r8,#1
;;;114      MSC_LUNTypeDef info;
;;;115    
;;;116      if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
000012  462b              MOV      r3,r5
000014  463a              MOV      r2,r7
000016  4621              MOV      r1,r4
000018  4816              LDR      r0,|L3.116|
00001a  9600              STR      r6,[sp,#0]
00001c  f7fffffe          BL       USBH_MSC_Read
000020  b910              CBNZ     r0,|L3.40|
;;;117      {
;;;118        res = RES_OK;
000022  f04f0800          MOV      r8,#0
000026  e021              B        |L3.108|
                  |L3.40|
;;;119      }
;;;120      else
;;;121      {
;;;122        USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
000028  aa01              ADD      r2,sp,#4
00002a  4621              MOV      r1,r4
00002c  4811              LDR      r0,|L3.116|
00002e  f7fffffe          BL       USBH_MSC_GetLUNInfo
;;;123    
;;;124        switch (info.sense.asc)
000032  f89d0011          LDRB     r0,[sp,#0x11]
000036  2804              CMP      r0,#4
000038  d004              BEQ      |L3.68|
00003a  2828              CMP      r0,#0x28
00003c  d004              BEQ      |L3.72|
00003e  283a              CMP      r0,#0x3a
000040  d110              BNE      |L3.100|
000042  e000              B        |L3.70|
                  |L3.68|
;;;125        {
;;;126        case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
;;;127        case SCSI_ASC_MEDIUM_NOT_PRESENT:
000044  bf00              NOP      
                  |L3.70|
;;;128        case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
000046  bf00              NOP      
                  |L3.72|
;;;129          USBH_ErrLog ("USB Disk is not ready!");
000048  bf00              NOP      
00004a  a00b              ADR      r0,|L3.120|
00004c  f7fffffe          BL       __2printf
000050  a00b              ADR      r0,|L3.128|
000052  f7fffffe          BL       __2printf
000056  a010              ADR      r0,|L3.152|
000058  f7fffffe          BL       __2printf
00005c  bf00              NOP      
;;;130          res = RES_NOTRDY;
00005e  f04f0803          MOV      r8,#3
;;;131          break;
000062  e002              B        |L3.106|
                  |L3.100|
;;;132    
;;;133        default:
;;;134          res = RES_ERROR;
000064  f04f0801          MOV      r8,#1
;;;135          break;
000068  bf00              NOP      
                  |L3.106|
00006a  bf00              NOP                            ;131
                  |L3.108|
;;;136        }
;;;137      }
;;;138    
;;;139      return res;
00006c  4640              MOV      r0,r8
;;;140    }
00006e  b00e              ADD      sp,sp,#0x38
000070  e8bd81f0          POP      {r4-r8,pc}
;;;141    
                          ENDP

                  |L3.116|
                          DCD      hUsbHostFS
                  |L3.120|
000078  4552524f          DCB      "ERROR: ",0
00007c  523a2000
                  |L3.128|
000080  55534220          DCB      "USB Disk is not ready!",0
000084  4469736b
000088  20697320
00008c  6e6f7420
000090  72656164
000094  792100  
000097  00                DCB      0
                  |L3.152|
000098  0a00              DCB      "\n",0
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.USBH_status||, CODE, READONLY, ALIGN=2

                  USBH_status PROC
;;;82       */
;;;83     DSTATUS USBH_status(BYTE lun)
000000  b570              PUSH     {r4-r6,lr}
;;;84     {
000002  4604              MOV      r4,r0
;;;85       DRESULT res = RES_ERROR;
000004  2501              MOVS     r5,#1
;;;86     
;;;87       if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
000006  4621              MOV      r1,r4
000008  4804              LDR      r0,|L4.28|
00000a  f7fffffe          BL       USBH_MSC_UnitIsReady
00000e  b108              CBZ      r0,|L4.20|
;;;88       {
;;;89         res = RES_OK;
000010  2500              MOVS     r5,#0
000012  e000              B        |L4.22|
                  |L4.20|
;;;90       }
;;;91       else
;;;92       {
;;;93         res = RES_ERROR;
000014  2501              MOVS     r5,#1
                  |L4.22|
;;;94       }
;;;95     
;;;96       return res;
000016  4628              MOV      r0,r5
;;;97     }
000018  bd70              POP      {r4-r6,pc}
;;;98     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      hUsbHostFS

                          AREA ||i.USBH_write||, CODE, READONLY, ALIGN=2

                  USBH_write PROC
;;;154    #if _USE_WRITE == 1
;;;155    DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156    {
000004  b08e              SUB      sp,sp,#0x38
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  461e              MOV      r6,r3
;;;157      DRESULT res = RES_ERROR;
00000e  f04f0801          MOV      r8,#1
;;;158      MSC_LUNTypeDef info;
;;;159    
;;;160      if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
000012  462b              MOV      r3,r5
000014  463a              MOV      r2,r7
000016  4621              MOV      r1,r4
000018  481e              LDR      r0,|L5.148|
00001a  9600              STR      r6,[sp,#0]
00001c  f7fffffe          BL       USBH_MSC_Write
000020  b910              CBNZ     r0,|L5.40|
;;;161      {
;;;162        res = RES_OK;
000022  f04f0800          MOV      r8,#0
000026  e031              B        |L5.140|
                  |L5.40|
;;;163      }
;;;164      else
;;;165      {
;;;166        USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
000028  aa01              ADD      r2,sp,#4
00002a  4621              MOV      r1,r4
00002c  4819              LDR      r0,|L5.148|
00002e  f7fffffe          BL       USBH_MSC_GetLUNInfo
;;;167    
;;;168        switch (info.sense.asc)
000032  f89d0011          LDRB     r0,[sp,#0x11]
000036  2804              CMP      r0,#4
000038  d014              BEQ      |L5.100|
00003a  2827              CMP      r0,#0x27
00003c  d004              BEQ      |L5.72|
00003e  2828              CMP      r0,#0x28
000040  d012              BEQ      |L5.104|
000042  283a              CMP      r0,#0x3a
000044  d11e              BNE      |L5.132|
000046  e00e              B        |L5.102|
                  |L5.72|
;;;169        {
;;;170        case SCSI_ASC_WRITE_PROTECTED:
;;;171          USBH_ErrLog("USB Disk is Write protected!");
000048  bf00              NOP      
00004a  a013              ADR      r0,|L5.152|
00004c  f7fffffe          BL       __2printf
000050  a013              ADR      r0,|L5.160|
000052  f7fffffe          BL       __2printf
000056  a01a              ADR      r0,|L5.192|
000058  f7fffffe          BL       __2printf
00005c  bf00              NOP      
;;;172          res = RES_WRPRT;
00005e  f04f0802          MOV      r8,#2
;;;173          break;
000062  e012              B        |L5.138|
                  |L5.100|
;;;174    
;;;175        case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
;;;176        case SCSI_ASC_MEDIUM_NOT_PRESENT:
000064  bf00              NOP      
                  |L5.102|
;;;177        case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
000066  bf00              NOP      
                  |L5.104|
;;;178          USBH_ErrLog("USB Disk is not ready!");
000068  bf00              NOP      
00006a  a00b              ADR      r0,|L5.152|
00006c  f7fffffe          BL       __2printf
000070  a014              ADR      r0,|L5.196|
000072  f7fffffe          BL       __2printf
000076  a012              ADR      r0,|L5.192|
000078  f7fffffe          BL       __2printf
00007c  bf00              NOP      
;;;179          res = RES_NOTRDY;
00007e  f04f0803          MOV      r8,#3
;;;180          break;
000082  e002              B        |L5.138|
                  |L5.132|
;;;181    
;;;182        default:
;;;183          res = RES_ERROR;
000084  f04f0801          MOV      r8,#1
;;;184          break;
000088  bf00              NOP      
                  |L5.138|
00008a  bf00              NOP                            ;173
                  |L5.140|
;;;185        }
;;;186      }
;;;187    
;;;188      return res;
00008c  4640              MOV      r0,r8
;;;189    }
00008e  b00e              ADD      sp,sp,#0x38
000090  e8bd81f0          POP      {r4-r8,pc}
;;;190    #endif /* _USE_WRITE == 1 */
                          ENDP

                  |L5.148|
                          DCD      hUsbHostFS
                  |L5.152|
000098  4552524f          DCB      "ERROR: ",0
00009c  523a2000
                  |L5.160|
0000a0  55534220          DCB      "USB Disk is Write protected!",0
0000a4  4469736b
0000a8  20697320
0000ac  57726974
0000b0  65207072
0000b4  6f746563
0000b8  74656421
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L5.192|
0000c0  0a00              DCB      "\n",0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L5.196|
0000c4  55534220          DCB      "USB Disk is not ready!",0
0000c8  4469736b
0000cc  20697320
0000d0  6e6f7420
0000d4  72656164
0000d8  792100  
0000db  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  USBH_Driver
                          DCD      USBH_initialize
                          DCD      USBH_status
                          DCD      USBH_read
                          DCD      USBH_write
                          DCD      USBH_ioctl

;*** Start embedded assembler ***

#line 1 "../FATFS/Target/usbh_diskio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_usbh_diskio_c_48c44e0a____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___13_usbh_diskio_c_48c44e0a____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_usbh_diskio_c_48c44e0a____REVSH|
#line 478
|__asm___13_usbh_diskio_c_48c44e0a____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_usbh_diskio_c_48c44e0a____RRX|
#line 665
|__asm___13_usbh_diskio_c_48c44e0a____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
