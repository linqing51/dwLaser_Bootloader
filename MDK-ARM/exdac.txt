; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\exdac.o --asm_dir=./ --list_dir=--list --depend=mcu_application\exdac.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\exdac.crf ..\Bootloader\exdac.c]
                          THUMB

                          AREA ||i.dac8568_Init||, CODE, READONLY, ALIGN=2

                  dac8568_Init PROC
;;;70     
;;;71     static void dac8568_Init(void){//DAC8568初始化
000000  b510              PUSH     {r4,lr}
;;;72     	uint32_t tmp;
;;;73     	tmp = 0x07000000;//Software Reset
000002  f04f64e0          MOV      r4,#0x7000000
;;;74     	spiWrite(tmp);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       spiWrite
;;;75     	tmp = 0x08000001;//Write Sequence for Enabling Internal Reference (Static Mode)
00000c  4c06              LDR      r4,|L1.40|
;;;76     	spiWrite(tmp);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       spiWrite
;;;77     	//覆盖LDAC引脚
;;;78     	tmp = 0x0600000F;
000014  4c05              LDR      r4,|L1.44|
;;;79     	spiWrite(tmp);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       spiWrite
;;;80     	//覆盖CLR引脚
;;;81     	tmp = 0x05000003;
00001c  4c04              LDR      r4,|L1.48|
;;;82     	spiWrite(tmp);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       spiWrite
;;;83     }
000024  bd10              POP      {r4,pc}
;;;84     static void dac8568_WriteDacRegister(uint8_t ch, uint16_t dat){//写入输入寄存器并更新输出
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0x08000001
                  |L1.44|
                          DCD      0x0600000f
                  |L1.48|
                          DCD      0x05000003

                          AREA ||i.dac8568_WriteDacRegister||, CODE, READONLY, ALIGN=1

                  dac8568_WriteDacRegister PROC
;;;83     }
;;;84     static void dac8568_WriteDacRegister(uint8_t ch, uint16_t dat){//写入输入寄存器并更新输出
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;85     	uint32_t tmp;
;;;86     	ch &= 0x0F;
000006  f004040f          AND      r4,r4,#0xf
;;;87     	tmp = 0x03000000;
00000a  f04f7540          MOV      r5,#0x3000000
;;;88     	tmp |= (uint32_t)((uint32_t)ch << 20);
00000e  ea455504          ORR      r5,r5,r4,LSL #20
;;;89     	tmp |= (uint32_t)((uint32_t)dat << 4);
000012  ea451506          ORR      r5,r5,r6,LSL #4
;;;90     	spiWrite(tmp);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       spiWrite
;;;91     }
00001c  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP


                          AREA ||i.initChipDac||, CODE, READONLY, ALIGN=1

                  initChipDac PROC
;;;92     
;;;93     void initChipDac(void){//DAC初始化
000000  b510              PUSH     {r4,lr}
;;;94     	dac8568_Init();
000002  f7fffffe          BL       dac8568_Init
;;;95     }
000006  bd10              POP      {r4,pc}
;;;96     
                          ENDP


                          AREA ||i.setCLK||, CODE, READONLY, ALIGN=2

                  setCLK PROC
;;;10     }
;;;11     static void setCLK(uint8_t dat){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;12     	if(dat){
000004  b12c              CBZ      r4,|L4.18|
;;;13     		HAL_GPIO_WritePin(DA_SCLK_GPIO_Port, DA_SCLK_Pin, GPIO_PIN_SET);
000006  2201              MOVS     r2,#1
000008  03d1              LSLS     r1,r2,#15
00000a  4805              LDR      r0,|L4.32|
00000c  f7fffffe          BL       HAL_GPIO_WritePin
000010  e005              B        |L4.30|
                  |L4.18|
;;;14     	}
;;;15     	else{
;;;16     		HAL_GPIO_WritePin(DA_SCLK_GPIO_Port, DA_SCLK_Pin, GPIO_PIN_RESET);
000012  2200              MOVS     r2,#0
000014  f44f4100          MOV      r1,#0x8000
000018  4801              LDR      r0,|L4.32|
00001a  f7fffffe          BL       HAL_GPIO_WritePin
                  |L4.30|
;;;17     	}
;;;18     }
00001e  bd10              POP      {r4,pc}
;;;19     static void setDIN(uint8_t dat){
                          ENDP

                  |L4.32|
                          DCD      0x40020800

                          AREA ||i.setDIN||, CODE, READONLY, ALIGN=2

                  setDIN PROC
;;;18     }
;;;19     static void setDIN(uint8_t dat){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;20     	if(dat){
000004  b12c              CBZ      r4,|L5.18|
;;;21     		HAL_GPIO_WritePin(DA_DIN_GPIO_Port, DA_DIN_Pin, GPIO_PIN_SET);
000006  2201              MOVS     r2,#1
000008  0391              LSLS     r1,r2,#14
00000a  4805              LDR      r0,|L5.32|
00000c  f7fffffe          BL       HAL_GPIO_WritePin
000010  e005              B        |L5.30|
                  |L5.18|
;;;22     	}
;;;23     	else{
;;;24     		HAL_GPIO_WritePin(DA_DIN_GPIO_Port, DA_DIN_Pin, GPIO_PIN_RESET);
000012  2200              MOVS     r2,#0
000014  f44f4180          MOV      r1,#0x4000
000018  4801              LDR      r0,|L5.32|
00001a  f7fffffe          BL       HAL_GPIO_WritePin
                  |L5.30|
;;;25     	}
;;;26     }
00001e  bd10              POP      {r4,pc}
;;;27     static void spiWrite(uint32_t dat){//DAC8568 SPI写入
                          ENDP

                  |L5.32|
                          DCD      0x40020800

                          AREA ||i.setSYNC||, CODE, READONLY, ALIGN=2

                  setSYNC PROC
;;;2      /*****************************************************************************/
;;;3      static void setSYNC(uint8_t dat){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;4      	if(dat){
000004  b12c              CBZ      r4,|L6.18|
;;;5      		HAL_GPIO_WritePin(DA_SYNC_GPIO_Port, DA_SYNC_Pin, GPIO_PIN_SET);
000006  2201              MOVS     r2,#1
000008  0351              LSLS     r1,r2,#13
00000a  4805              LDR      r0,|L6.32|
00000c  f7fffffe          BL       HAL_GPIO_WritePin
000010  e005              B        |L6.30|
                  |L6.18|
;;;6      	}
;;;7      	else{
;;;8      		HAL_GPIO_WritePin(DA_SYNC_GPIO_Port, DA_SYNC_Pin, GPIO_PIN_RESET);
000012  2200              MOVS     r2,#0
000014  f44f5100          MOV      r1,#0x2000
000018  4801              LDR      r0,|L6.32|
00001a  f7fffffe          BL       HAL_GPIO_WritePin
                  |L6.30|
;;;9      	}
;;;10     }
00001e  bd10              POP      {r4,pc}
;;;11     static void setCLK(uint8_t dat){
                          ENDP

                  |L6.32|
                          DCD      0x40020800

                          AREA ||i.spiWrite||, CODE, READONLY, ALIGN=1

                  spiWrite PROC
;;;26     }
;;;27     static void spiWrite(uint32_t dat){//DAC8568 SPI写入
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;28     	uint8_t tmp, i;
;;;29     	setSYNC(TRUE);
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       setSYNC
;;;30     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  bf00              NOP      
000010  bf00              NOP      
000012  bf00              NOP      
000014  bf00              NOP      
000016  bf00              NOP      
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;31     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00001e  bf00              NOP      
000020  bf00              NOP      
000022  bf00              NOP      
000024  bf00              NOP      
000026  bf00              NOP      
000028  bf00              NOP      
00002a  bf00              NOP      
00002c  bf00              NOP      
00002e  bf00              NOP      
000030  bf00              NOP      
;;;32     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000032  bf00              NOP      
000034  bf00              NOP      
000036  bf00              NOP      
000038  bf00              NOP      
00003a  bf00              NOP      
00003c  bf00              NOP      
00003e  bf00              NOP      
000040  bf00              NOP      
000042  bf00              NOP      
000044  bf00              NOP      
;;;33     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000046  bf00              NOP      
000048  bf00              NOP      
00004a  bf00              NOP      
00004c  bf00              NOP      
00004e  bf00              NOP      
000050  bf00              NOP      
000052  bf00              NOP      
000054  bf00              NOP      
000056  bf00              NOP      
000058  bf00              NOP      
;;;34     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00005a  bf00              NOP      
00005c  bf00              NOP      
00005e  bf00              NOP      
000060  bf00              NOP      
000062  bf00              NOP      
000064  bf00              NOP      
000066  bf00              NOP      
000068  bf00              NOP      
00006a  bf00              NOP      
00006c  bf00              NOP      
;;;35     	setCLK(TRUE);
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       setCLK
;;;36     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000074  bf00              NOP      
000076  bf00              NOP      
000078  bf00              NOP      
00007a  bf00              NOP      
00007c  bf00              NOP      
00007e  bf00              NOP      
000080  bf00              NOP      
000082  bf00              NOP      
000084  bf00              NOP      
000086  bf00              NOP      
;;;37     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000088  bf00              NOP      
00008a  bf00              NOP      
00008c  bf00              NOP      
00008e  bf00              NOP      
000090  bf00              NOP      
000092  bf00              NOP      
000094  bf00              NOP      
000096  bf00              NOP      
000098  bf00              NOP      
00009a  bf00              NOP      
;;;38     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00009c  bf00              NOP      
00009e  bf00              NOP      
0000a0  bf00              NOP      
0000a2  bf00              NOP      
0000a4  bf00              NOP      
0000a6  bf00              NOP      
0000a8  bf00              NOP      
0000aa  bf00              NOP      
0000ac  bf00              NOP      
0000ae  bf00              NOP      
;;;39     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
0000b0  bf00              NOP      
0000b2  bf00              NOP      
0000b4  bf00              NOP      
0000b6  bf00              NOP      
0000b8  bf00              NOP      
0000ba  bf00              NOP      
0000bc  bf00              NOP      
0000be  bf00              NOP      
0000c0  bf00              NOP      
0000c2  bf00              NOP      
;;;40     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
0000c4  bf00              NOP      
0000c6  bf00              NOP      
0000c8  bf00              NOP      
0000ca  bf00              NOP      
0000cc  bf00              NOP      
0000ce  bf00              NOP      
0000d0  bf00              NOP      
0000d2  bf00              NOP      
0000d4  bf00              NOP      
0000d6  bf00              NOP      
;;;41     	setSYNC(FALSE);
0000d8  2000              MOVS     r0,#0
0000da  f7fffffe          BL       setSYNC
;;;42     	for(i = 0;i < 32;i ++){
0000de  2400              MOVS     r4,#0
0000e0  e0a6              B        |L7.560|
                  |L7.226|
;;;43     		tmp = (uint8_t)(dat >> (31 - i)) & 0x01;
0000e2  f1c4001f          RSB      r0,r4,#0x1f
0000e6  fa26f000          LSR      r0,r6,r0
0000ea  f0000501          AND      r5,r0,#1
;;;44     		setDIN(tmp);
0000ee  4628              MOV      r0,r5
0000f0  f7fffffe          BL       setDIN
;;;45     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
0000f4  bf00              NOP      
0000f6  bf00              NOP      
0000f8  bf00              NOP      
0000fa  bf00              NOP      
0000fc  bf00              NOP      
0000fe  bf00              NOP      
000100  bf00              NOP      
000102  bf00              NOP      
000104  bf00              NOP      
000106  bf00              NOP      
;;;46     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000108  bf00              NOP      
00010a  bf00              NOP      
00010c  bf00              NOP      
00010e  bf00              NOP      
000110  bf00              NOP      
000112  bf00              NOP      
000114  bf00              NOP      
000116  bf00              NOP      
000118  bf00              NOP      
00011a  bf00              NOP      
;;;47     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00011c  bf00              NOP      
00011e  bf00              NOP      
000120  bf00              NOP      
000122  bf00              NOP      
000124  bf00              NOP      
000126  bf00              NOP      
000128  bf00              NOP      
00012a  bf00              NOP      
00012c  bf00              NOP      
00012e  bf00              NOP      
;;;48     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000130  bf00              NOP      
000132  bf00              NOP      
000134  bf00              NOP      
000136  bf00              NOP      
000138  bf00              NOP      
00013a  bf00              NOP      
00013c  bf00              NOP      
00013e  bf00              NOP      
000140  bf00              NOP      
000142  bf00              NOP      
;;;49     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000144  bf00              NOP      
000146  bf00              NOP      
000148  bf00              NOP      
00014a  bf00              NOP      
00014c  bf00              NOP      
00014e  bf00              NOP      
000150  bf00              NOP      
000152  bf00              NOP      
000154  bf00              NOP      
000156  bf00              NOP      
;;;50     		setCLK(FALSE);
000158  2000              MOVS     r0,#0
00015a  f7fffffe          BL       setCLK
;;;51     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00015e  bf00              NOP      
000160  bf00              NOP      
000162  bf00              NOP      
000164  bf00              NOP      
000166  bf00              NOP      
000168  bf00              NOP      
00016a  bf00              NOP      
00016c  bf00              NOP      
00016e  bf00              NOP      
000170  bf00              NOP      
;;;52     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000172  bf00              NOP      
000174  bf00              NOP      
000176  bf00              NOP      
000178  bf00              NOP      
00017a  bf00              NOP      
00017c  bf00              NOP      
00017e  bf00              NOP      
000180  bf00              NOP      
000182  bf00              NOP      
000184  bf00              NOP      
;;;53     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000186  bf00              NOP      
000188  bf00              NOP      
00018a  bf00              NOP      
00018c  bf00              NOP      
00018e  bf00              NOP      
000190  bf00              NOP      
000192  bf00              NOP      
000194  bf00              NOP      
000196  bf00              NOP      
000198  bf00              NOP      
;;;54     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00019a  bf00              NOP      
00019c  bf00              NOP      
00019e  bf00              NOP      
0001a0  bf00              NOP      
0001a2  bf00              NOP      
0001a4  bf00              NOP      
0001a6  bf00              NOP      
0001a8  bf00              NOP      
0001aa  bf00              NOP      
0001ac  bf00              NOP      
;;;55     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
0001ae  bf00              NOP      
0001b0  bf00              NOP      
0001b2  bf00              NOP      
0001b4  bf00              NOP      
0001b6  bf00              NOP      
0001b8  bf00              NOP      
0001ba  bf00              NOP      
0001bc  bf00              NOP      
0001be  bf00              NOP      
0001c0  bf00              NOP      
;;;56     		setCLK(TRUE);
0001c2  2001              MOVS     r0,#1
0001c4  f7fffffe          BL       setCLK
;;;57     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
0001c8  bf00              NOP      
0001ca  bf00              NOP      
0001cc  bf00              NOP      
0001ce  bf00              NOP      
0001d0  bf00              NOP      
0001d2  bf00              NOP      
0001d4  bf00              NOP      
0001d6  bf00              NOP      
0001d8  bf00              NOP      
0001da  bf00              NOP      
;;;58     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
0001dc  bf00              NOP      
0001de  bf00              NOP      
0001e0  bf00              NOP      
0001e2  bf00              NOP      
0001e4  bf00              NOP      
0001e6  bf00              NOP      
0001e8  bf00              NOP      
0001ea  bf00              NOP      
0001ec  bf00              NOP      
0001ee  bf00              NOP      
;;;59     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
0001f0  bf00              NOP      
0001f2  bf00              NOP      
0001f4  bf00              NOP      
0001f6  bf00              NOP      
0001f8  bf00              NOP      
0001fa  bf00              NOP      
0001fc  bf00              NOP      
0001fe  bf00              NOP      
000200  bf00              NOP      
000202  bf00              NOP      
;;;60     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000204  bf00              NOP      
000206  bf00              NOP      
000208  bf00              NOP      
00020a  bf00              NOP      
00020c  bf00              NOP      
00020e  bf00              NOP      
000210  bf00              NOP      
000212  bf00              NOP      
000214  bf00              NOP      
000216  bf00              NOP      
;;;61     		__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000218  bf00              NOP      
00021a  bf00              NOP      
00021c  bf00              NOP      
00021e  bf00              NOP      
000220  bf00              NOP      
000222  bf00              NOP      
000224  bf00              NOP      
000226  bf00              NOP      
000228  bf00              NOP      
00022a  bf00              NOP      
00022c  1c60              ADDS     r0,r4,#1              ;42
00022e  b2c4              UXTB     r4,r0                 ;42
                  |L7.560|
000230  2c20              CMP      r4,#0x20              ;42
000232  f6ffaf56          BLT      |L7.226|
;;;62     	}
;;;63     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000236  bf00              NOP      
000238  bf00              NOP      
00023a  bf00              NOP      
00023c  bf00              NOP      
00023e  bf00              NOP      
000240  bf00              NOP      
000242  bf00              NOP      
000244  bf00              NOP      
000246  bf00              NOP      
000248  bf00              NOP      
;;;64     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00024a  bf00              NOP      
00024c  bf00              NOP      
00024e  bf00              NOP      
000250  bf00              NOP      
000252  bf00              NOP      
000254  bf00              NOP      
000256  bf00              NOP      
000258  bf00              NOP      
00025a  bf00              NOP      
00025c  bf00              NOP      
;;;65     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
00025e  bf00              NOP      
000260  bf00              NOP      
000262  bf00              NOP      
000264  bf00              NOP      
000266  bf00              NOP      
000268  bf00              NOP      
00026a  bf00              NOP      
00026c  bf00              NOP      
00026e  bf00              NOP      
000270  bf00              NOP      
;;;66     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000272  bf00              NOP      
000274  bf00              NOP      
000276  bf00              NOP      
000278  bf00              NOP      
00027a  bf00              NOP      
00027c  bf00              NOP      
00027e  bf00              NOP      
000280  bf00              NOP      
000282  bf00              NOP      
000284  bf00              NOP      
;;;67     	__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();
000286  bf00              NOP      
000288  bf00              NOP      
00028a  bf00              NOP      
00028c  bf00              NOP      
00028e  bf00              NOP      
000290  bf00              NOP      
000292  bf00              NOP      
000294  bf00              NOP      
000296  bf00              NOP      
000298  bf00              NOP      
;;;68     	setSYNC(TRUE);
00029a  2001              MOVS     r0,#1
00029c  f7fffffe          BL       setSYNC
;;;69     }
0002a0  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Bootloader\\exdac.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_exdac_c_e67d9d6c____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___7_exdac_c_e67d9d6c____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_exdac_c_e67d9d6c____REVSH|
#line 478
|__asm___7_exdac_c_e67d9d6c____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_exdac_c_e67d9d6c____RRX|
#line 665
|__asm___7_exdac_c_e67d9d6c____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
