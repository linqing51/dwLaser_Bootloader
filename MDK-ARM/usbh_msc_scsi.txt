; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\usbh_msc_scsi.o --asm_dir=./ --list_dir=--list --depend=mcu_application\usbh_msc_scsi.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\usbh_msc_scsi.crf ../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc_scsi.c]
                          THUMB

                          AREA ||i.USBH_MSC_SCSI_Inquiry||, CODE, READONLY, ALIGN=1

                  USBH_MSC_SCSI_Inquiry PROC
;;;200      */
;;;201    USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;202                                             SCSI_StdInquiryDataTypeDef *inquiry)
;;;203    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;204      USBH_StatusTypeDef error = USBH_FAIL;
00000a  f04f0802          MOV      r8,#2
;;;205      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000e  f8d6037c          LDR      r0,[r6,#0x37c]
000012  69c4              LDR      r4,[r0,#0x1c]
;;;206    
;;;207      switch (MSC_Handle->hbot.cmd_state)
000014  f8940052          LDRB     r0,[r4,#0x52]
000018  2801              CMP      r0,#1
00001a  d002              BEQ      |L1.34|
00001c  2802              CMP      r0,#2
00001e  d16a              BNE      |L1.246|
000020  e02f              B        |L1.130|
                  |L1.34|
;;;208      {
;;;209        case BOT_CMD_SEND:
;;;210    
;;;211          /*Prepare the CBW and relevent field*/
;;;212          MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
000022  2124              MOVS     r1,#0x24
000024  65e1              STR      r1,[r4,#0x5c]
;;;213          MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
000026  2180              MOVS     r1,#0x80
000028  f8841060          STRB     r1,[r4,#0x60]
;;;214          MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
00002c  210a              MOVS     r1,#0xa
00002e  f8841062          STRB     r1,[r4,#0x62]
;;;215    
;;;216          USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
000032  2100              MOVS     r1,#0
000034  f104000f          ADD      r0,r4,#0xf
000038  f8c41063          STR      r1,[r4,#0x63]
00003c  f8c41067          STR      r1,[r4,#0x67]
000040  f8a4106b          STRH     r1,[r4,#0x6b]
;;;217          MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
000044  2112              MOVS     r1,#0x12
000046  f8841063          STRB     r1,[r4,#0x63]
;;;218          MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
00004a  0778              LSLS     r0,r7,#29
00004c  0e01              LSRS     r1,r0,#24
00004e  f8841064          STRB     r1,[r4,#0x64]
;;;219          MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
000052  2100              MOVS     r1,#0
000054  f8841065          STRB     r1,[r4,#0x65]
;;;220          MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
000058  f8841066          STRB     r1,[r4,#0x66]
;;;221          MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
00005c  2124              MOVS     r1,#0x24
00005e  f8841067          STRB     r1,[r4,#0x67]
;;;222          MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
000062  2100              MOVS     r1,#0
000064  f8841068          STRB     r1,[r4,#0x68]
;;;223    
;;;224          MSC_Handle->hbot.state = BOT_SEND_CBW;
000068  2101              MOVS     r1,#1
00006a  f8841050          STRB     r1,[r4,#0x50]
;;;225    
;;;226          MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
00006e  2102              MOVS     r1,#2
000070  f8841052          STRB     r1,[r4,#0x52]
;;;227          MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
000074  f1040010          ADD      r0,r4,#0x10
000078  218c              MOVS     r1,#0x8c
00007a  5108              STR      r0,[r1,r4]
;;;228          error = USBH_BUSY;
00007c  f04f0801          MOV      r8,#1
;;;229          break;
000080  e03a              B        |L1.248|
                  |L1.130|
;;;230    
;;;231        case BOT_CMD_WAIT:
;;;232    
;;;233          error = USBH_MSC_BOT_Process(phost, lun);
000082  4639              MOV      r1,r7
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       USBH_MSC_BOT_Process
00008a  4680              MOV      r8,r0
;;;234    
;;;235          if (error == USBH_OK)
00008c  f1b80f00          CMP      r8,#0
000090  d130              BNE      |L1.244|
;;;236          {
;;;237            USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
000092  2122              MOVS     r1,#0x22
000094  4628              MOV      r0,r5
000096  f7fffffe          BL       __aeabi_memclr
;;;238            /*assign Inquiry Data */
;;;239            inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
00009a  208c              MOVS     r0,#0x8c
00009c  5900              LDR      r0,[r0,r4]
00009e  7800              LDRB     r0,[r0,#0]
0000a0  f000001f          AND      r0,r0,#0x1f
0000a4  7068              STRB     r0,[r5,#1]
;;;240            inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
0000a6  208c              MOVS     r0,#0x8c
0000a8  5900              LDR      r0,[r0,r4]
0000aa  7800              LDRB     r0,[r0,#0]
0000ac  1140              ASRS     r0,r0,#5
0000ae  7028              STRB     r0,[r5,#0]
;;;241    
;;;242            if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
0000b0  208c              MOVS     r0,#0x8c
0000b2  5900              LDR      r0,[r0,r4]
0000b4  7840              LDRB     r0,[r0,#1]
0000b6  f0000080          AND      r0,r0,#0x80
0000ba  2880              CMP      r0,#0x80
0000bc  d102              BNE      |L1.196|
;;;243            {
;;;244              inquiry->RemovableMedia = 1U;
0000be  2001              MOVS     r0,#1
0000c0  70a8              STRB     r0,[r5,#2]
0000c2  e001              B        |L1.200|
                  |L1.196|
;;;245            }
;;;246            else
;;;247            {
;;;248              inquiry->RemovableMedia = 0U;
0000c4  2000              MOVS     r0,#0
0000c6  70a8              STRB     r0,[r5,#2]
                  |L1.200|
;;;249            }
;;;250    
;;;251            USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
0000c8  208c              MOVS     r0,#0x8c
0000ca  5900              LDR      r0,[r0,r4]
0000cc  6881              LDR      r1,[r0,#8]
0000ce  f8c51003          STR      r1,[r5,#3]
0000d2  68c0              LDR      r0,[r0,#0xc]
0000d4  f8c50007          STR      r0,[r5,#7]
;;;252            USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
0000d8  208c              MOVS     r0,#0x8c
0000da  5900              LDR      r0,[r0,r4]
0000dc  f1000110          ADD      r1,r0,#0x10
0000e0  2210              MOVS     r2,#0x10
0000e2  f105000c          ADD      r0,r5,#0xc
0000e6  f7fffffe          BL       __aeabi_memcpy
;;;253            USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
0000ea  208c              MOVS     r0,#0x8c
0000ec  5900              LDR      r0,[r0,r4]
0000ee  6a00              LDR      r0,[r0,#0x20]
0000f0  f8c5001d          STR      r0,[r5,#0x1d]
                  |L1.244|
;;;254          }
;;;255          break;
0000f4  e000              B        |L1.248|
                  |L1.246|
;;;256    
;;;257        default:
;;;258          break;
0000f6  bf00              NOP      
                  |L1.248|
0000f8  bf00              NOP                            ;229
;;;259      }
;;;260    
;;;261      return error;
0000fa  4640              MOV      r0,r8
;;;262    }
0000fc  e8bd81f0          POP      {r4-r8,pc}
;;;263    
                          ENDP


                          AREA ||i.USBH_MSC_SCSI_Read||, CODE, READONLY, ALIGN=1

                  USBH_MSC_SCSI_Read PROC
;;;391      */
;;;392    USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;393                                          uint8_t lun,
;;;394                                          uint32_t address,
;;;395                                          uint8_t *pbuf,
;;;396                                          uint32_t length)
;;;397    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  461e              MOV      r6,r3
;;;398      USBH_StatusTypeDef    error = USBH_FAIL ;
00000a  f04f0802          MOV      r8,#2
;;;399      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000e  f8d5037c          LDR      r0,[r5,#0x37c]
000012  69c4              LDR      r4,[r0,#0x1c]
;;;400    
;;;401      switch (MSC_Handle->hbot.cmd_state)
000014  f8940052          LDRB     r0,[r4,#0x52]
000018  2801              CMP      r0,#1
00001a  d002              BEQ      |L2.34|
00001c  2802              CMP      r0,#2
00001e  d13c              BNE      |L2.154|
000020  e035              B        |L2.142|
                  |L2.34|
;;;402      {
;;;403        case BOT_CMD_SEND:
;;;404    
;;;405          /*Prepare the CBW and relevent field*/
;;;406          MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
000022  f8b41098          LDRH     r1,[r4,#0x98]
000026  980a              LDR      r0,[sp,#0x28]
000028  4341              MULS     r1,r0,r1
00002a  65e1              STR      r1,[r4,#0x5c]
;;;407          MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
00002c  2180              MOVS     r1,#0x80
00002e  f8841060          STRB     r1,[r4,#0x60]
;;;408          MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
000032  210a              MOVS     r1,#0xa
000034  f8841062          STRB     r1,[r4,#0x62]
;;;409    
;;;410          USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
000038  2110              MOVS     r1,#0x10
00003a  f1040063          ADD      r0,r4,#0x63
00003e  f7fffffe          BL       __aeabi_memclr
;;;411          MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
000042  2128              MOVS     r1,#0x28
000044  f8841063          STRB     r1,[r4,#0x63]
;;;412    
;;;413          /*logical block address*/
;;;414          MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
000048  f89d100b          LDRB     r1,[sp,#0xb]
00004c  f8841065          STRB     r1,[r4,#0x65]
;;;415          MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
000050  f89d100a          LDRB     r1,[sp,#0xa]
000054  f8841066          STRB     r1,[r4,#0x66]
;;;416          MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
000058  f89d1009          LDRB     r1,[sp,#9]
00005c  f8841067          STRB     r1,[r4,#0x67]
;;;417          MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
000060  f89d1008          LDRB     r1,[sp,#8]
000064  f8841068          STRB     r1,[r4,#0x68]
;;;418    
;;;419    
;;;420          /*Transfer length */
;;;421          MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
000068  f89d1029          LDRB     r1,[sp,#0x29]
00006c  f884106a          STRB     r1,[r4,#0x6a]
;;;422          MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
000070  f89d1028          LDRB     r1,[sp,#0x28]
000074  f884106b          STRB     r1,[r4,#0x6b]
;;;423    
;;;424    
;;;425          MSC_Handle->hbot.state = BOT_SEND_CBW;
000078  2101              MOVS     r1,#1
00007a  f8841050          STRB     r1,[r4,#0x50]
;;;426          MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
00007e  2102              MOVS     r1,#2
000080  f8841052          STRB     r1,[r4,#0x52]
;;;427          MSC_Handle->hbot.pbuf = pbuf;
000084  208c              MOVS     r0,#0x8c
000086  5106              STR      r6,[r0,r4]
;;;428          error = USBH_BUSY;
000088  f04f0801          MOV      r8,#1
;;;429          break;
00008c  e006              B        |L2.156|
                  |L2.142|
;;;430    
;;;431        case BOT_CMD_WAIT:
;;;432          error = USBH_MSC_BOT_Process(phost, lun);
00008e  4639              MOV      r1,r7
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       USBH_MSC_BOT_Process
000096  4680              MOV      r8,r0
;;;433          break;
000098  e000              B        |L2.156|
                  |L2.154|
;;;434    
;;;435        default:
;;;436          break;
00009a  bf00              NOP      
                  |L2.156|
00009c  bf00              NOP                            ;429
;;;437      }
;;;438    
;;;439      return error;
00009e  4640              MOV      r0,r8
;;;440    }
0000a0  b004              ADD      sp,sp,#0x10
0000a2  e8bd81f0          POP      {r4-r8,pc}
;;;441    
                          ENDP


                          AREA ||i.USBH_MSC_SCSI_ReadCapacity||, CODE, READONLY, ALIGN=1

                  USBH_MSC_SCSI_ReadCapacity PROC
;;;144      */
;;;145    USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;146                                                  uint8_t lun,
;;;147                                                  SCSI_CapacityTypeDef *capacity)
;;;148    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;149      USBH_StatusTypeDef    error = USBH_BUSY ;
00000a  2701              MOVS     r7,#1
;;;150      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000c  f8d6037c          LDR      r0,[r6,#0x37c]
000010  69c4              LDR      r4,[r0,#0x1c]
;;;151    
;;;152      switch (MSC_Handle->hbot.cmd_state)
000012  f8940052          LDRB     r0,[r4,#0x52]
000016  2801              CMP      r0,#1
000018  d002              BEQ      |L3.32|
00001a  2802              CMP      r0,#2
00001c  d13f              BNE      |L3.158|
00001e  e01b              B        |L3.88|
                  |L3.32|
;;;153      {
;;;154        case BOT_CMD_SEND:
;;;155    
;;;156          /*Prepare the CBW and relevent field*/
;;;157          MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
000020  2108              MOVS     r1,#8
000022  65e1              STR      r1,[r4,#0x5c]
;;;158          MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
000024  2180              MOVS     r1,#0x80
000026  f8841060          STRB     r1,[r4,#0x60]
;;;159          MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
00002a  210a              MOVS     r1,#0xa
00002c  f8841062          STRB     r1,[r4,#0x62]
;;;160    
;;;161          USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
000030  2110              MOVS     r1,#0x10
000032  f1040063          ADD      r0,r4,#0x63
000036  f7fffffe          BL       __aeabi_memclr
;;;162          MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
00003a  2125              MOVS     r1,#0x25
00003c  f8841063          STRB     r1,[r4,#0x63]
;;;163    
;;;164          MSC_Handle->hbot.state = BOT_SEND_CBW;
000040  2101              MOVS     r1,#1
000042  f8841050          STRB     r1,[r4,#0x50]
;;;165    
;;;166          MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
000046  2102              MOVS     r1,#2
000048  f8841052          STRB     r1,[r4,#0x52]
;;;167          MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
00004c  f1040010          ADD      r0,r4,#0x10
000050  218c              MOVS     r1,#0x8c
000052  5108              STR      r0,[r1,r4]
;;;168          error = USBH_BUSY;
000054  2701              MOVS     r7,#1
;;;169          break;
000056  e023              B        |L3.160|
                  |L3.88|
;;;170    
;;;171        case BOT_CMD_WAIT:
;;;172    
;;;173          error = USBH_MSC_BOT_Process(phost, lun);
000058  4641              MOV      r1,r8
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       USBH_MSC_BOT_Process
000060  4607              MOV      r7,r0
;;;174    
;;;175          if (error == USBH_OK)
000062  b9df              CBNZ     r7,|L3.156|
;;;176          {
;;;177            /*assign the capacity*/
;;;178            capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
000064  208c              MOVS     r0,#0x8c
000066  5900              LDR      r0,[r0,r4]
000068  78c1              LDRB     r1,[r0,#3]
00006a  208c              MOVS     r0,#0x8c
00006c  5900              LDR      r0,[r0,r4]
00006e  7880              LDRB     r0,[r0,#2]
000070  ea412100          ORR      r1,r1,r0,LSL #8
000074  208c              MOVS     r0,#0x8c
000076  5900              LDR      r0,[r0,r4]
000078  7840              LDRB     r0,[r0,#1]
00007a  ea414100          ORR      r1,r1,r0,LSL #16
00007e  208c              MOVS     r0,#0x8c
000080  5900              LDR      r0,[r0,r4]
000082  7800              LDRB     r0,[r0,#0]
000084  ea416000          ORR      r0,r1,r0,LSL #24
000088  6028              STR      r0,[r5,#0]
;;;179                                  ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
;;;180    
;;;181            /*assign the page length*/
;;;182            capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
00008a  208c              MOVS     r0,#0x8c
00008c  5900              LDR      r0,[r0,r4]
00008e  79c1              LDRB     r1,[r0,#7]
000090  208c              MOVS     r0,#0x8c
000092  5900              LDR      r0,[r0,r4]
000094  7980              LDRB     r0,[r0,#6]
000096  ea412000          ORR      r0,r1,r0,LSL #8
00009a  80a8              STRH     r0,[r5,#4]
                  |L3.156|
;;;183          }
;;;184          break;
00009c  e000              B        |L3.160|
                  |L3.158|
;;;185    
;;;186        default:
;;;187          break;
00009e  bf00              NOP      
                  |L3.160|
0000a0  bf00              NOP                            ;169
;;;188      }
;;;189    
;;;190      return error;
0000a2  4638              MOV      r0,r7
;;;191    }
0000a4  e8bd81f0          POP      {r4-r8,pc}
;;;192    
                          ENDP


                          AREA ||i.USBH_MSC_SCSI_RequestSense||, CODE, READONLY, ALIGN=1

                  USBH_MSC_SCSI_RequestSense PROC
;;;271      */
;;;272    USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;273                                                  uint8_t lun,
;;;274                                                  SCSI_SenseTypeDef *sense_data)
;;;275    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;276      USBH_StatusTypeDef    error = USBH_FAIL ;
00000a  f04f0802          MOV      r8,#2
;;;277      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000e  f8d6037c          LDR      r0,[r6,#0x37c]
000012  69c4              LDR      r4,[r0,#0x1c]
;;;278    
;;;279      switch (MSC_Handle->hbot.cmd_state)
000014  f8940052          LDRB     r0,[r4,#0x52]
000018  2801              CMP      r0,#1
00001a  d002              BEQ      |L4.34|
00001c  2802              CMP      r0,#2
00001e  d143              BNE      |L4.168|
000020  e02b              B        |L4.122|
                  |L4.34|
;;;280      {
;;;281        case BOT_CMD_SEND:
;;;282    
;;;283          /*Prepare the CBW and relevent field*/
;;;284          MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
000022  210e              MOVS     r1,#0xe
000024  65e1              STR      r1,[r4,#0x5c]
;;;285          MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
000026  2180              MOVS     r1,#0x80
000028  f8841060          STRB     r1,[r4,#0x60]
;;;286          MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
00002c  210a              MOVS     r1,#0xa
00002e  f8841062          STRB     r1,[r4,#0x62]
;;;287    
;;;288          USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
000032  2110              MOVS     r1,#0x10
000034  f1040063          ADD      r0,r4,#0x63
000038  f7fffffe          BL       __aeabi_memclr
;;;289          MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
00003c  2103              MOVS     r1,#3
00003e  f8841063          STRB     r1,[r4,#0x63]
;;;290          MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
000042  0778              LSLS     r0,r7,#29
000044  0e01              LSRS     r1,r0,#24
000046  f8841064          STRB     r1,[r4,#0x64]
;;;291          MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
00004a  2100              MOVS     r1,#0
00004c  f8841065          STRB     r1,[r4,#0x65]
;;;292          MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
000050  f8841066          STRB     r1,[r4,#0x66]
;;;293          MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
000054  210e              MOVS     r1,#0xe
000056  f8841067          STRB     r1,[r4,#0x67]
;;;294          MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
00005a  2100              MOVS     r1,#0
00005c  f8841068          STRB     r1,[r4,#0x68]
;;;295    
;;;296          MSC_Handle->hbot.state = BOT_SEND_CBW;
000060  2101              MOVS     r1,#1
000062  f8841050          STRB     r1,[r4,#0x50]
;;;297          MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
000066  2102              MOVS     r1,#2
000068  f8841052          STRB     r1,[r4,#0x52]
;;;298          MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
00006c  f1040010          ADD      r0,r4,#0x10
000070  218c              MOVS     r1,#0x8c
000072  5108              STR      r0,[r1,r4]
;;;299          error = USBH_BUSY;
000074  f04f0801          MOV      r8,#1
;;;300          break;
000078  e017              B        |L4.170|
                  |L4.122|
;;;301    
;;;302        case BOT_CMD_WAIT:
;;;303    
;;;304          error = USBH_MSC_BOT_Process(phost, lun);
00007a  4639              MOV      r1,r7
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       USBH_MSC_BOT_Process
000082  4680              MOV      r8,r0
;;;305    
;;;306          if (error == USBH_OK)
000084  f1b80f00          CMP      r8,#0
000088  d10d              BNE      |L4.166|
;;;307          {
;;;308            sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
00008a  208c              MOVS     r0,#0x8c
00008c  5900              LDR      r0,[r0,r4]
00008e  7880              LDRB     r0,[r0,#2]
000090  f000000f          AND      r0,r0,#0xf
000094  7028              STRB     r0,[r5,#0]
;;;309            sense_data->asc  = MSC_Handle->hbot.pbuf[12];
000096  208c              MOVS     r0,#0x8c
000098  5900              LDR      r0,[r0,r4]
00009a  7b00              LDRB     r0,[r0,#0xc]
00009c  7068              STRB     r0,[r5,#1]
;;;310            sense_data->ascq = MSC_Handle->hbot.pbuf[13];
00009e  208c              MOVS     r0,#0x8c
0000a0  5900              LDR      r0,[r0,r4]
0000a2  7b40              LDRB     r0,[r0,#0xd]
0000a4  70a8              STRB     r0,[r5,#2]
                  |L4.166|
;;;311          }
;;;312          break;
0000a6  e000              B        |L4.170|
                  |L4.168|
;;;313    
;;;314        default:
;;;315          break;
0000a8  bf00              NOP      
                  |L4.170|
0000aa  bf00              NOP                            ;300
;;;316      }
;;;317    
;;;318      return error;
0000ac  4640              MOV      r0,r8
;;;319    }
0000ae  e8bd81f0          POP      {r4-r8,pc}
;;;320    
                          ENDP


                          AREA ||i.USBH_MSC_SCSI_TestUnitReady||, CODE, READONLY, ALIGN=1

                  USBH_MSC_SCSI_TestUnitReady PROC
;;;102      */
;;;103    USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;104                                                   uint8_t lun)
;;;105    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;106      USBH_StatusTypeDef    error = USBH_FAIL ;
000008  2702              MOVS     r7,#2
;;;107      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000a  f8d5037c          LDR      r0,[r5,#0x37c]
00000e  69c4              LDR      r4,[r0,#0x1c]
;;;108    
;;;109      switch (MSC_Handle->hbot.cmd_state)
000010  f8940052          LDRB     r0,[r4,#0x52]
000014  2801              CMP      r0,#1
000016  d002              BEQ      |L5.30|
000018  2802              CMP      r0,#2
00001a  d11d              BNE      |L5.88|
00001c  e016              B        |L5.76|
                  |L5.30|
;;;110      {
;;;111        case BOT_CMD_SEND:
;;;112    
;;;113          /*Prepare the CBW and relevent field*/
;;;114          MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
00001e  2100              MOVS     r1,#0
000020  65e1              STR      r1,[r4,#0x5c]
;;;115          MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
000022  f8841060          STRB     r1,[r4,#0x60]
;;;116          MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
000026  210a              MOVS     r1,#0xa
000028  f8841062          STRB     r1,[r4,#0x62]
;;;117    
;;;118          USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
00002c  2110              MOVS     r1,#0x10
00002e  f1040063          ADD      r0,r4,#0x63
000032  f7fffffe          BL       __aeabi_memclr
;;;119          MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
000036  2100              MOVS     r1,#0
000038  f8841063          STRB     r1,[r4,#0x63]
;;;120    
;;;121          MSC_Handle->hbot.state = BOT_SEND_CBW;
00003c  2101              MOVS     r1,#1
00003e  f8841050          STRB     r1,[r4,#0x50]
;;;122          MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
000042  2102              MOVS     r1,#2
000044  f8841052          STRB     r1,[r4,#0x52]
;;;123          error = USBH_BUSY;
000048  2701              MOVS     r7,#1
;;;124          break;
00004a  e006              B        |L5.90|
                  |L5.76|
;;;125    
;;;126        case BOT_CMD_WAIT:
;;;127          error = USBH_MSC_BOT_Process(phost, lun);
00004c  4631              MOV      r1,r6
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       USBH_MSC_BOT_Process
000054  4607              MOV      r7,r0
;;;128          break;
000056  e000              B        |L5.90|
                  |L5.88|
;;;129    
;;;130        default:
;;;131          break;
000058  bf00              NOP      
                  |L5.90|
00005a  bf00              NOP                            ;124
;;;132      }
;;;133    
;;;134      return error;
00005c  4638              MOV      r0,r7
;;;135    }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;136    
                          ENDP


                          AREA ||i.USBH_MSC_SCSI_Write||, CODE, READONLY, ALIGN=1

                  USBH_MSC_SCSI_Write PROC
;;;330      */
;;;331    USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;332                                           uint8_t lun,
;;;333                                           uint32_t address,
;;;334                                           uint8_t *pbuf,
;;;335                                           uint32_t length)
;;;336    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  461e              MOV      r6,r3
;;;337      USBH_StatusTypeDef    error = USBH_FAIL ;
00000a  f04f0802          MOV      r8,#2
;;;338    
;;;339      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000e  f8d5037c          LDR      r0,[r5,#0x37c]
000012  69c4              LDR      r4,[r0,#0x1c]
;;;340    
;;;341      switch (MSC_Handle->hbot.cmd_state)
000014  f8940052          LDRB     r0,[r4,#0x52]
000018  2801              CMP      r0,#1
00001a  d002              BEQ      |L6.34|
00001c  2802              CMP      r0,#2
00001e  d13c              BNE      |L6.154|
000020  e035              B        |L6.142|
                  |L6.34|
;;;342      {
;;;343        case BOT_CMD_SEND:
;;;344    
;;;345          /*Prepare the CBW and relevent field*/
;;;346          MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
000022  f8b41098          LDRH     r1,[r4,#0x98]
000026  980a              LDR      r0,[sp,#0x28]
000028  4341              MULS     r1,r0,r1
00002a  65e1              STR      r1,[r4,#0x5c]
;;;347          MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
00002c  2100              MOVS     r1,#0
00002e  f8841060          STRB     r1,[r4,#0x60]
;;;348          MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
000032  210a              MOVS     r1,#0xa
000034  f8841062          STRB     r1,[r4,#0x62]
;;;349    
;;;350          USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
000038  2110              MOVS     r1,#0x10
00003a  f1040063          ADD      r0,r4,#0x63
00003e  f7fffffe          BL       __aeabi_memclr
;;;351          MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
000042  212a              MOVS     r1,#0x2a
000044  f8841063          STRB     r1,[r4,#0x63]
;;;352    
;;;353          /*logical block address*/
;;;354          MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
000048  f89d100b          LDRB     r1,[sp,#0xb]
00004c  f8841065          STRB     r1,[r4,#0x65]
;;;355          MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
000050  f89d100a          LDRB     r1,[sp,#0xa]
000054  f8841066          STRB     r1,[r4,#0x66]
;;;356          MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
000058  f89d1009          LDRB     r1,[sp,#9]
00005c  f8841067          STRB     r1,[r4,#0x67]
;;;357          MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
000060  f89d1008          LDRB     r1,[sp,#8]
000064  f8841068          STRB     r1,[r4,#0x68]
;;;358    
;;;359    
;;;360          /*Transfer length */
;;;361          MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
000068  f89d1029          LDRB     r1,[sp,#0x29]
00006c  f884106a          STRB     r1,[r4,#0x6a]
;;;362          MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
000070  f89d1028          LDRB     r1,[sp,#0x28]
000074  f884106b          STRB     r1,[r4,#0x6b]
;;;363    
;;;364    
;;;365          MSC_Handle->hbot.state = BOT_SEND_CBW;
000078  2101              MOVS     r1,#1
00007a  f8841050          STRB     r1,[r4,#0x50]
;;;366          MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
00007e  2102              MOVS     r1,#2
000080  f8841052          STRB     r1,[r4,#0x52]
;;;367          MSC_Handle->hbot.pbuf = pbuf;
000084  208c              MOVS     r0,#0x8c
000086  5106              STR      r6,[r0,r4]
;;;368          error = USBH_BUSY;
000088  f04f0801          MOV      r8,#1
;;;369          break;
00008c  e006              B        |L6.156|
                  |L6.142|
;;;370    
;;;371        case BOT_CMD_WAIT:
;;;372          error = USBH_MSC_BOT_Process(phost, lun);
00008e  4639              MOV      r1,r7
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       USBH_MSC_BOT_Process
000096  4680              MOV      r8,r0
;;;373          break;
000098  e000              B        |L6.156|
                  |L6.154|
;;;374    
;;;375        default:
;;;376          break;
00009a  bf00              NOP      
                  |L6.156|
00009c  bf00              NOP                            ;369
;;;377      }
;;;378    
;;;379      return error;
00009e  4640              MOV      r0,r8
;;;380    }
0000a0  b004              ADD      sp,sp,#0x10
0000a2  e8bd81f0          POP      {r4-r8,pc}
;;;381    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc_scsi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_usbh_msc_scsi_c_429a154b____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___15_usbh_msc_scsi_c_429a154b____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_usbh_msc_scsi_c_429a154b____REVSH|
#line 478
|__asm___15_usbh_msc_scsi_c_429a154b____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_usbh_msc_scsi_c_429a154b____RRX|
#line 665
|__asm___15_usbh_msc_scsi_c_429a154b____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
