; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\usbh_msc.o --asm_dir=./ --list_dir=--list --depend=mcu_application\usbh_msc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\usbh_msc.crf ../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc.c]
                          THUMB

                          AREA ||i.USBH_MSC_ClassRequest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USBH_MSC_ClassRequest PROC
;;;264      */
;;;265    static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;266    {
000004  4607              MOV      r7,r0
;;;267      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000006  f8d7037c          LDR      r0,[r7,#0x37c]
00000a  69c4              LDR      r4,[r0,#0x1c]
;;;268      USBH_StatusTypeDef status = USBH_BUSY;
00000c  2601              MOVS     r6,#1
;;;269      uint8_t i;
;;;270    
;;;271      /* Switch MSC REQ state machine */
;;;272      switch (MSC_Handle->req_state)
00000e  7ba0              LDRB     r0,[r4,#0xe]
000010  b120              CBZ      r0,|L1.28|
000012  2802              CMP      r0,#2
000014  d003              BEQ      |L1.30|
000016  2803              CMP      r0,#3
000018  d142              BNE      |L1.160|
00001a  e039              B        |L1.144|
                  |L1.28|
;;;273      {
;;;274        case MSC_REQ_IDLE:
;;;275        case MSC_REQ_GET_MAX_LUN:
00001c  bf00              NOP      
                  |L1.30|
;;;276          /* Issue GetMaxLUN request */
;;;277          status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
00001e  4621              MOV      r1,r4
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       USBH_MSC_BOT_REQ_GetMaxLUN
000026  4606              MOV      r6,r0
;;;278    
;;;279          /* When devices do not support the GetMaxLun request, this should
;;;280             be considred as only one logical unit is supported */
;;;281          if (status == USBH_NOT_SUPPORTED)
000028  2e03              CMP      r6,#3
00002a  d102              BNE      |L1.50|
;;;282          {
;;;283            MSC_Handle->max_lun = 0U;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;284            status = USBH_OK;
000030  2600              MOVS     r6,#0
                  |L1.50|
;;;285          }
;;;286    
;;;287          if (status == USBH_OK)
000032  bb66              CBNZ     r6,|L1.142|
;;;288          {
;;;289            MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
000034  7820              LDRB     r0,[r4,#0]
000036  2802              CMP      r0,#2
000038  d901              BLS      |L1.62|
00003a  2002              MOVS     r0,#2
00003c  e001              B        |L1.66|
                  |L1.62|
00003e  7820              LDRB     r0,[r4,#0]
000040  1c40              ADDS     r0,r0,#1
                  |L1.66|
000042  7020              STRB     r0,[r4,#0]
;;;290            USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
000044  bf00              NOP      
000046  7821              LDRB     r1,[r4,#0]
000048  a018              ADR      r0,|L1.172|
00004a  f7fffffe          BL       __2printf
00004e  a01e              ADR      r0,|L1.200|
000050  f7fffffe          BL       __2printf
000054  bf00              NOP      
;;;291    
;;;292            for (i = 0U; i < MSC_Handle->max_lun; i++)
000056  2500              MOVS     r5,#0
000058  e016              B        |L1.136|
                  |L1.90|
;;;293            {
;;;294              MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
00005a  2102              MOVS     r1,#2
00005c  eb050085          ADD      r0,r5,r5,LSL #2
000060  eb0002c5          ADD      r2,r0,r5,LSL #3
000064  f1040090          ADD      r0,r4,#0x90
000068  eb000082          ADD      r0,r0,r2,LSL #2
00006c  7081              STRB     r1,[r0,#2]
;;;295              MSC_Handle->unit[i].state_changed = 0U;
00006e  2100              MOVS     r1,#0
000070  eb050085          ADD      r0,r5,r5,LSL #2
000074  eb0002c5          ADD      r2,r0,r5,LSL #3
000078  f1040090          ADD      r0,r4,#0x90
00007c  eb000082          ADD      r0,r0,r2,LSL #2
000080  f8801031          STRB     r1,[r0,#0x31]
000084  1c68              ADDS     r0,r5,#1              ;292
000086  b2c5              UXTB     r5,r0                 ;292
                  |L1.136|
000088  7820              LDRB     r0,[r4,#0]            ;292
00008a  42a8              CMP      r0,r5                 ;292
00008c  dce5              BGT      |L1.90|
                  |L1.142|
;;;296            }
;;;297          }
;;;298          break;
00008e  e008              B        |L1.162|
                  |L1.144|
;;;299    
;;;300        case MSC_REQ_ERROR:
;;;301          /* a Clear Feature should be issued here */
;;;302          if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
000090  2100              MOVS     r1,#0
000092  4638              MOV      r0,r7
000094  f7fffffe          BL       USBH_ClrFeature
000098  b908              CBNZ     r0,|L1.158|
;;;303          {
;;;304            MSC_Handle->req_state = MSC_Handle->prev_req_state;
00009a  7be0              LDRB     r0,[r4,#0xf]
00009c  73a0              STRB     r0,[r4,#0xe]
                  |L1.158|
;;;305          }
;;;306          break;
00009e  e000              B        |L1.162|
                  |L1.160|
;;;307    
;;;308        default:
;;;309          break;
0000a0  bf00              NOP      
                  |L1.162|
0000a2  bf00              NOP                            ;298
;;;310      }
;;;311    
;;;312      return status;
0000a4  4630              MOV      r0,r6
;;;313    }
0000a6  e8bd81f0          POP      {r4-r8,pc}
;;;314    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
0000ac  4e756d62          DCB      "Number of supported LUN: %d",0
0000b0  6572206f
0000b4  66207375
0000b8  70706f72
0000bc  74656420
0000c0  4c554e3a
0000c4  20256400
                  |L1.200|
0000c8  0a00              DCB      "\n",0
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.USBH_MSC_GetLUNInfo||, CODE, READONLY, ALIGN=1

                  USBH_MSC_GetLUNInfo PROC
;;;731      */
;;;732    USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;733    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;734      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000a  f8d4037c          LDR      r0,[r4,#0x37c]
00000e  69c7              LDR      r7,[r0,#0x1c]
;;;735      if (phost->gState == HOST_CLASS)
000010  7820              LDRB     r0,[r4,#0]
000012  280b              CMP      r0,#0xb
000014  d10e              BNE      |L2.52|
;;;736      {
;;;737        USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
000016  eb050085          ADD      r0,r5,r5,LSL #2
00001a  eb0002c5          ADD      r2,r0,r5,LSL #3
00001e  f1070090          ADD      r0,r7,#0x90
000022  eb000182          ADD      r1,r0,r2,LSL #2
000026  2234              MOVS     r2,#0x34
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       __aeabi_memcpy4
;;;738        return USBH_OK;
00002e  2000              MOVS     r0,#0
                  |L2.48|
;;;739      }
;;;740      else
;;;741      {
;;;742        return USBH_FAIL;
;;;743      }
;;;744    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L2.52|
000034  2002              MOVS     r0,#2                 ;742
000036  e7fb              B        |L2.48|
;;;745    
                          ENDP


                          AREA ||i.USBH_MSC_GetMaxLUN||, CODE, READONLY, ALIGN=1

                  USBH_MSC_GetMaxLUN PROC
;;;688      */
;;;689    uint8_t  USBH_MSC_GetMaxLUN(USBH_HandleTypeDef *phost)
000000  4601              MOV      r1,r0
;;;690    {
;;;691      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000002  f8d1037c          LDR      r0,[r1,#0x37c]
000006  69c2              LDR      r2,[r0,#0x1c]
;;;692    
;;;693      if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
000008  7808              LDRB     r0,[r1,#0]
00000a  280b              CMP      r0,#0xb
00000c  d104              BNE      |L3.24|
00000e  7b10              LDRB     r0,[r2,#0xc]
000010  2801              CMP      r0,#1
000012  d101              BNE      |L3.24|
;;;694      {
;;;695        return (uint8_t)MSC_Handle->max_lun;
000014  7810              LDRB     r0,[r2,#0]
                  |L3.22|
;;;696      }
;;;697    
;;;698      return 0xFFU;
;;;699    }
000016  4770              BX       lr
                  |L3.24|
000018  20ff              MOVS     r0,#0xff              ;698
00001a  e7fc              B        |L3.22|
;;;700    
                          ENDP


                          AREA ||i.USBH_MSC_InterfaceDeInit||, CODE, READONLY, ALIGN=1

                  USBH_MSC_InterfaceDeInit PROC
;;;230      */
;;;231    static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
000000  b570              PUSH     {r4-r6,lr}
;;;232    {
000002  4605              MOV      r5,r0
;;;233      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000004  f8d5037c          LDR      r0,[r5,#0x37c]
000008  69c4              LDR      r4,[r0,#0x1c]
;;;234    
;;;235      if (MSC_Handle->OutPipe)
00000a  7960              LDRB     r0,[r4,#5]
00000c  b148              CBZ      r0,|L4.34|
;;;236      {
;;;237        USBH_ClosePipe(phost, MSC_Handle->OutPipe);
00000e  7961              LDRB     r1,[r4,#5]
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       USBH_ClosePipe
;;;238        USBH_FreePipe(phost, MSC_Handle->OutPipe);
000016  7961              LDRB     r1,[r4,#5]
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       USBH_FreePipe
;;;239        MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
00001e  2000              MOVS     r0,#0
000020  7160              STRB     r0,[r4,#5]
                  |L4.34|
;;;240      }
;;;241    
;;;242      if (MSC_Handle->InPipe)
000022  7920              LDRB     r0,[r4,#4]
000024  b148              CBZ      r0,|L4.58|
;;;243      {
;;;244        USBH_ClosePipe(phost, MSC_Handle->InPipe);
000026  7921              LDRB     r1,[r4,#4]
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       USBH_ClosePipe
;;;245        USBH_FreePipe(phost, MSC_Handle->InPipe);
00002e  7921              LDRB     r1,[r4,#4]
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       USBH_FreePipe
;;;246        MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
000036  2000              MOVS     r0,#0
000038  7120              STRB     r0,[r4,#4]
                  |L4.58|
;;;247      }
;;;248    
;;;249      if (phost->pActiveClass->pData)
00003a  f8d5037c          LDR      r0,[r5,#0x37c]
00003e  69c0              LDR      r0,[r0,#0x1c]
000040  b140              CBZ      r0,|L4.84|
;;;250      {
;;;251        USBH_free(phost->pActiveClass->pData);
000042  f8d5137c          LDR      r1,[r5,#0x37c]
000046  69c8              LDR      r0,[r1,#0x1c]
000048  f7fffffe          BL       free
;;;252        phost->pActiveClass->pData = 0U;
00004c  2000              MOVS     r0,#0
00004e  f8d5137c          LDR      r1,[r5,#0x37c]
000052  61c8              STR      r0,[r1,#0x1c]
                  |L4.84|
;;;253      }
;;;254    
;;;255      return USBH_OK;
000054  2000              MOVS     r0,#0
;;;256    }
000056  bd70              POP      {r4-r6,pc}
;;;257    
                          ENDP


                          AREA ||i.USBH_MSC_InterfaceInit||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  USBH_MSC_InterfaceInit PROC
;;;146      */
;;;147    static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
000000  b5fe              PUSH     {r1-r7,lr}
;;;148    {
000002  4605              MOV      r5,r0
;;;149      USBH_StatusTypeDef status;
;;;150      uint8_t interface;
;;;151      MSC_HandleTypeDef *MSC_Handle;
;;;152    
;;;153      interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
000004  f8d5037c          LDR      r0,[r5,#0x37c]
000008  7901              LDRB     r1,[r0,#4]
00000a  2350              MOVS     r3,#0x50
00000c  2206              MOVS     r2,#6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       USBH_FindInterface
000014  4606              MOV      r6,r0
;;;154    
;;;155      if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
000016  2eff              CMP      r6,#0xff
000018  d001              BEQ      |L5.30|
00001a  2e02              CMP      r6,#2
00001c  d30f              BCC      |L5.62|
                  |L5.30|
;;;156      {
;;;157        USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
00001e  bf00              NOP      
000020  a06b              ADR      r0,|L5.464|
000022  f7fffffe          BL       __2printf
000026  f8d5037c          LDR      r0,[r5,#0x37c]
00002a  6801              LDR      r1,[r0,#0]
00002c  a06b              ADR      r0,|L5.476|
00002e  f7fffffe          BL       __2printf
000032  a074              ADR      r0,|L5.516|
000034  f7fffffe          BL       __2printf
000038  bf00              NOP      
;;;158        return USBH_FAIL;
00003a  2002              MOVS     r0,#2
                  |L5.60|
;;;159      }
;;;160    
;;;161      status = USBH_SelectInterface(phost, interface);
;;;162    
;;;163      if (status != USBH_OK)
;;;164      {
;;;165        return USBH_FAIL;
;;;166      }
;;;167    
;;;168      phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
;;;169      MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
;;;170    
;;;171      if (MSC_Handle == NULL)
;;;172      {
;;;173        USBH_DbgLog("Cannot allocate memory for MSC Handle");
;;;174        return USBH_FAIL;
;;;175      }
;;;176    
;;;177      /* Initialize msc handler */
;;;178      USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
;;;179    
;;;180      if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
;;;181      {
;;;182        MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
;;;183        MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
;;;184      }
;;;185      else
;;;186      {
;;;187        MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
;;;188        MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
;;;189      }
;;;190    
;;;191      if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
;;;192      {
;;;193        MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
;;;194        MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
;;;195      }
;;;196      else
;;;197      {
;;;198        MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
;;;199        MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
;;;200      }
;;;201    
;;;202      MSC_Handle->state = MSC_INIT;
;;;203      MSC_Handle->error = MSC_OK;
;;;204      MSC_Handle->req_state = MSC_REQ_IDLE;
;;;205      MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
;;;206      MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
;;;207    
;;;208      USBH_MSC_BOT_Init(phost);
;;;209    
;;;210      /* Open the new channels */
;;;211      USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
;;;212                    phost->device.address, phost->device.speed,
;;;213                    USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);
;;;214    
;;;215      USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
;;;216                    phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
;;;217                    MSC_Handle->InEpSize);
;;;218    
;;;219      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
;;;220      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
;;;221    
;;;222      return USBH_OK;
;;;223    }
00003c  bdfe              POP      {r1-r7,pc}
                  |L5.62|
00003e  4631              MOV      r1,r6                 ;161
000040  4628              MOV      r0,r5                 ;161
000042  f7fffffe          BL       USBH_SelectInterface
000046  4607              MOV      r7,r0                 ;161
000048  b10f              CBZ      r7,|L5.78|
00004a  2002              MOVS     r0,#2                 ;165
00004c  e7f6              B        |L5.60|
                  |L5.78|
00004e  f44f7080          MOV      r0,#0x100             ;168
000052  f7fffffe          BL       malloc
000056  f8d5137c          LDR      r1,[r5,#0x37c]        ;168
00005a  61c8              STR      r0,[r1,#0x1c]         ;168
00005c  f8d5037c          LDR      r0,[r5,#0x37c]        ;169
000060  69c4              LDR      r4,[r0,#0x1c]         ;169
000062  b964              CBNZ     r4,|L5.126|
000064  bf00              NOP                            ;173
000066  a05a              ADR      r0,|L5.464|
000068  f7fffffe          BL       __2printf
00006c  a066              ADR      r0,|L5.520|
00006e  f7fffffe          BL       __2printf
000072  a064              ADR      r0,|L5.516|
000074  f7fffffe          BL       __2printf
000078  bf00              NOP                            ;173
00007a  2002              MOVS     r0,#2                 ;174
00007c  e7de              B        |L5.60|
                  |L5.126|
00007e  f44f7180          MOV      r1,#0x100             ;178
000082  4620              MOV      r0,r4                 ;178
000084  f7fffffe          BL       __aeabi_memclr4
000088  eb060086          ADD      r0,r6,r6,LSL #2       ;180
00008c  eb0001c6          ADD      r1,r0,r6,LSL #3       ;180
000090  f2053042          ADD      r0,r5,#0x342          ;180
000094  eb000041          ADD      r0,r0,r1,LSL #1       ;180
000098  7b00              LDRB     r0,[r0,#0xc]          ;180
00009a  f0000080          AND      r0,r0,#0x80           ;180
00009e  b1a0              CBZ      r0,|L5.202|
0000a0  eb060086          ADD      r0,r6,r6,LSL #2       ;182
0000a4  eb0001c6          ADD      r1,r0,r6,LSL #3       ;182
0000a8  f2053042          ADD      r0,r5,#0x342          ;182
0000ac  eb000041          ADD      r0,r0,r1,LSL #1       ;182
0000b0  7b00              LDRB     r0,[r0,#0xc]          ;182
0000b2  71e0              STRB     r0,[r4,#7]            ;182
0000b4  eb060086          ADD      r0,r6,r6,LSL #2       ;183
0000b8  eb0001c6          ADD      r1,r0,r6,LSL #3       ;183
0000bc  f2053042          ADD      r0,r5,#0x342          ;183
0000c0  eb000041          ADD      r0,r0,r1,LSL #1       ;183
0000c4  89c0              LDRH     r0,[r0,#0xe]          ;183
0000c6  8160              STRH     r0,[r4,#0xa]          ;183
0000c8  e013              B        |L5.242|
                  |L5.202|
0000ca  eb060086          ADD      r0,r6,r6,LSL #2       ;187
0000ce  eb0001c6          ADD      r1,r0,r6,LSL #3       ;187
0000d2  f2053042          ADD      r0,r5,#0x342          ;187
0000d6  eb000041          ADD      r0,r0,r1,LSL #1       ;187
0000da  7b00              LDRB     r0,[r0,#0xc]          ;187
0000dc  71a0              STRB     r0,[r4,#6]            ;187
0000de  eb060086          ADD      r0,r6,r6,LSL #2       ;188
0000e2  eb0001c6          ADD      r1,r0,r6,LSL #3       ;188
0000e6  f2053042          ADD      r0,r5,#0x342          ;188
0000ea  eb000041          ADD      r0,r0,r1,LSL #1       ;188
0000ee  89c0              LDRH     r0,[r0,#0xe]          ;188
0000f0  8120              STRH     r0,[r4,#8]            ;188
                  |L5.242|
0000f2  eb060086          ADD      r0,r6,r6,LSL #2       ;191
0000f6  eb0001c6          ADD      r1,r0,r6,LSL #3       ;191
0000fa  f2053042          ADD      r0,r5,#0x342          ;191
0000fe  eb000041          ADD      r0,r0,r1,LSL #1       ;191
000102  7d00              LDRB     r0,[r0,#0x14]         ;191
000104  f0000080          AND      r0,r0,#0x80           ;191
000108  b1a0              CBZ      r0,|L5.308|
00010a  eb060086          ADD      r0,r6,r6,LSL #2       ;193
00010e  eb0001c6          ADD      r1,r0,r6,LSL #3       ;193
000112  f2053042          ADD      r0,r5,#0x342          ;193
000116  eb000041          ADD      r0,r0,r1,LSL #1       ;193
00011a  7d00              LDRB     r0,[r0,#0x14]         ;193
00011c  71e0              STRB     r0,[r4,#7]            ;193
00011e  eb060086          ADD      r0,r6,r6,LSL #2       ;194
000122  eb0001c6          ADD      r1,r0,r6,LSL #3       ;194
000126  f2053042          ADD      r0,r5,#0x342          ;194
00012a  eb000041          ADD      r0,r0,r1,LSL #1       ;194
00012e  8ac0              LDRH     r0,[r0,#0x16]         ;194
000130  8160              STRH     r0,[r4,#0xa]          ;194
000132  e013              B        |L5.348|
                  |L5.308|
000134  eb060086          ADD      r0,r6,r6,LSL #2       ;198
000138  eb0001c6          ADD      r1,r0,r6,LSL #3       ;198
00013c  f2053042          ADD      r0,r5,#0x342          ;198
000140  eb000041          ADD      r0,r0,r1,LSL #1       ;198
000144  7d00              LDRB     r0,[r0,#0x14]         ;198
000146  71a0              STRB     r0,[r4,#6]            ;198
000148  eb060086          ADD      r0,r6,r6,LSL #2       ;199
00014c  eb0001c6          ADD      r1,r0,r6,LSL #3       ;199
000150  f2053042          ADD      r0,r5,#0x342          ;199
000154  eb000041          ADD      r0,r0,r1,LSL #1       ;199
000158  8ac0              LDRH     r0,[r0,#0x16]         ;199
00015a  8120              STRH     r0,[r4,#8]            ;199
                  |L5.348|
00015c  2000              MOVS     r0,#0                 ;202
00015e  7320              STRB     r0,[r4,#0xc]          ;202
000160  7360              STRB     r0,[r4,#0xd]          ;203
000162  73a0              STRB     r0,[r4,#0xe]          ;204
000164  79a1              LDRB     r1,[r4,#6]            ;205
000166  4628              MOV      r0,r5                 ;205
000168  f7fffffe          BL       USBH_AllocPipe
00016c  7160              STRB     r0,[r4,#5]            ;205
00016e  79e1              LDRB     r1,[r4,#7]            ;206
000170  4628              MOV      r0,r5                 ;206
000172  f7fffffe          BL       USBH_AllocPipe
000176  7120              STRB     r0,[r4,#4]            ;206
000178  4628              MOV      r0,r5                 ;208
00017a  f7fffffe          BL       USBH_MSC_BOT_Init
00017e  8920              LDRH     r0,[r4,#8]            ;211
000180  2202              MOVS     r2,#2                 ;211
000182  f895131d          LDRB     r1,[r5,#0x31d]        ;211
000186  e9cd1200          STRD     r1,r2,[sp,#0]         ;211
00018a  9002              STR      r0,[sp,#8]            ;211
00018c  f895331c          LDRB     r3,[r5,#0x31c]        ;211
000190  79a2              LDRB     r2,[r4,#6]            ;211
000192  7961              LDRB     r1,[r4,#5]            ;211
000194  4628              MOV      r0,r5                 ;211
000196  f7fffffe          BL       USBH_OpenPipe
00019a  8960              LDRH     r0,[r4,#0xa]          ;215
00019c  2202              MOVS     r2,#2                 ;215
00019e  f895131d          LDRB     r1,[r5,#0x31d]        ;215
0001a2  e9cd1200          STRD     r1,r2,[sp,#0]         ;215
0001a6  9002              STR      r0,[sp,#8]            ;215
0001a8  f895331c          LDRB     r3,[r5,#0x31c]        ;215
0001ac  79e2              LDRB     r2,[r4,#7]            ;215
0001ae  7921              LDRB     r1,[r4,#4]            ;215
0001b0  4628              MOV      r0,r5                 ;215
0001b2  f7fffffe          BL       USBH_OpenPipe
0001b6  7921              LDRB     r1,[r4,#4]            ;219
0001b8  2200              MOVS     r2,#0                 ;219
0001ba  4628              MOV      r0,r5                 ;219
0001bc  f7fffffe          BL       USBH_LL_SetToggle
0001c0  7961              LDRB     r1,[r4,#5]            ;220
0001c2  2200              MOVS     r2,#0                 ;220
0001c4  4628              MOV      r0,r5                 ;220
0001c6  f7fffffe          BL       USBH_LL_SetToggle
0001ca  2000              MOVS     r0,#0                 ;222
0001cc  e736              B        |L5.60|
;;;224    
                          ENDP

0001ce  0000              DCW      0x0000
                  |L5.464|
0001d0  44454255          DCB      "DEBUG : ",0
0001d4  47203a20
0001d8  00      
0001d9  00                DCB      0
0001da  00                DCB      0
0001db  00                DCB      0
                  |L5.476|
0001dc  43616e6e          DCB      "Cannot Find the interface for %s class.",0
0001e0  6f742046
0001e4  696e6420
0001e8  74686520
0001ec  696e7465
0001f0  72666163
0001f4  6520666f
0001f8  72202573
0001fc  20636c61
000200  73732e00
                  |L5.516|
000204  0a00              DCB      "\n",0
000206  00                DCB      0
000207  00                DCB      0
                  |L5.520|
000208  43616e6e          DCB      "Cannot allocate memory for MSC Handle",0
00020c  6f742061
000210  6c6c6f63
000214  61746520
000218  6d656d6f
00021c  72792066
000220  6f72204d
000224  53432048
000228  616e646c
00022c  6500    
00022e  00                DCB      0
00022f  00                DCB      0

                          AREA ||i.USBH_MSC_IsReady||, CODE, READONLY, ALIGN=1

                  USBH_MSC_IsReady PROC
;;;665      */
;;;666    uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
000000  4601              MOV      r1,r0
;;;667    {
;;;668      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000002  f8d1337c          LDR      r3,[r1,#0x37c]
000006  69da              LDR      r2,[r3,#0x1c]
;;;669      uint8_t res;
;;;670    
;;;671      if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
000008  780b              LDRB     r3,[r1,#0]
00000a  2b0b              CMP      r3,#0xb
00000c  d104              BNE      |L6.24|
00000e  7b13              LDRB     r3,[r2,#0xc]
000010  2b01              CMP      r3,#1
000012  d101              BNE      |L6.24|
;;;672      {
;;;673        res = 1U;
000014  2001              MOVS     r0,#1
000016  e000              B        |L6.26|
                  |L6.24|
;;;674      }
;;;675      else
;;;676      {
;;;677        res = 0U;
000018  2000              MOVS     r0,#0
                  |L6.26|
;;;678      }
;;;679    
;;;680      return res;
;;;681    }
00001a  4770              BX       lr
;;;682    
                          ENDP


                          AREA ||i.USBH_MSC_Process||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_u
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  USBH_MSC_Process PROC
;;;320      */
;;;321    static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;322    {
000004  4606              MOV      r6,r0
;;;323      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000006  f8d6037c          LDR      r0,[r6,#0x37c]
00000a  69c4              LDR      r4,[r0,#0x1c]
;;;324      USBH_StatusTypeDef error = USBH_BUSY;
00000c  f04f0801          MOV      r8,#1
;;;325      USBH_StatusTypeDef scsi_status = USBH_BUSY;
000010  2501              MOVS     r5,#1
;;;326      USBH_StatusTypeDef ready_status = USBH_BUSY;
000012  2701              MOVS     r7,#1
;;;327    
;;;328      switch (MSC_Handle->state)
000014  7b20              LDRB     r0,[r4,#0xc]
000016  b110              CBZ      r0,|L7.30|
000018  2801              CMP      r0,#1
00001a  d17c              BNE      |L7.278|
00001c  e378              B        |L7.1808|
                  |L7.30|
;;;329      {
;;;330        case MSC_INIT:
;;;331    
;;;332          if (MSC_Handle->current_lun < MSC_Handle->max_lun)
00001e  f8b400f8          LDRH     r0,[r4,#0xf8]
000022  7821              LDRB     r1,[r4,#0]
000024  4288              CMP      r0,r1
000026  da77              BGE      |L7.280|
;;;333          {
;;;334    
;;;335            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
000028  2101              MOVS     r1,#1
00002a  f8b400f8          LDRH     r0,[r4,#0xf8]
00002e  eb000280          ADD      r2,r0,r0,LSL #2
000032  eb0202c0          ADD      r2,r2,r0,LSL #3
000036  f1040090          ADD      r0,r4,#0x90
00003a  eb000082          ADD      r0,r0,r2,LSL #2
00003e  7041              STRB     r1,[r0,#1]
;;;336            /* Switch MSC REQ state machine */
;;;337            switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
000040  f8b400f8          LDRH     r0,[r4,#0xf8]
000044  eb000180          ADD      r1,r0,r0,LSL #2
000048  eb0101c0          ADD      r1,r1,r0,LSL #3
00004c  f1040090          ADD      r0,r4,#0x90
000050  f8100021          LDRB     r0,[r0,r1,LSL #2]
000054  2809              CMP      r0,#9
000056  d27d              BCS      |L7.340|
000058  e8dff000          TBB      [pc,r0]
00005c  057ca7ee          DCB      0x05,0x7c,0xa7,0xee
000060  1fed7c7c          DCB      0x1f,0xed,0x7c,0x7c
000064  ec00              DCB      0xec,0x00
;;;338            {
;;;339              case MSC_INIT:
;;;340                USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
000066  bf00              NOP      
000068  f8b410f8          LDRH     r1,[r4,#0xf8]
00006c  a0f7              ADR      r0,|L7.1100|
00006e  f7fffffe          BL       __2printf
000072  a0f9              ADR      r0,|L7.1112|
000074  f7fffffe          BL       __2printf
000078  bf00              NOP      
;;;341                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
00007a  2104              MOVS     r1,#4
00007c  f8b400f8          LDRH     r0,[r4,#0xf8]
000080  eb000280          ADD      r2,r0,r0,LSL #2
000084  eb0202c0          ADD      r2,r2,r0,LSL #3
000088  f1040090          ADD      r0,r4,#0x90
00008c  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;342                MSC_Handle->timer = phost->Timer;
000090  f8d603c4          LDR      r0,[r6,#0x3c4]
000094  f8c400fc          STR      r0,[r4,#0xfc]
;;;343                break;
000098  e32e              B        |L7.1784|
;;;344    
;;;345              case MSC_READ_INQUIRY:
;;;346                scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
00009a  f8b400f8          LDRH     r0,[r4,#0xf8]
00009e  eb000380          ADD      r3,r0,r0,LSL #2
0000a2  eb0303c0          ADD      r3,r3,r0,LSL #3
0000a6  f1040090          ADD      r0,r4,#0x90
0000aa  eb000083          ADD      r0,r0,r3,LSL #2
0000ae  f100020f          ADD      r2,r0,#0xf
0000b2  f89410f8          LDRB     r1,[r4,#0xf8]
0000b6  4630              MOV      r0,r6
0000b8  f7fffffe          BL       USBH_MSC_SCSI_Inquiry
0000bc  4605              MOV      r5,r0
;;;347    
;;;348                if (scsi_status == USBH_OK)
0000be  2d00              CMP      r5,#0
0000c0  d14b              BNE      |L7.346|
;;;349                {
;;;350                  USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
0000c2  bf00              NOP      
0000c4  f8b400f8          LDRH     r0,[r4,#0xf8]
0000c8  eb000280          ADD      r2,r0,r0,LSL #2
0000cc  eb0202c0          ADD      r2,r2,r0,LSL #3
0000d0  f1040090          ADD      r0,r4,#0x90
0000d4  eb000082          ADD      r0,r0,r2,LSL #2
0000d8  f1000112          ADD      r1,r0,#0x12
0000dc  a0df              ADR      r0,|L7.1116|
0000de  f7fffffe          BL       __2printf
0000e2  a0dd              ADR      r0,|L7.1112|
0000e4  f7fffffe          BL       __2printf
0000e8  bf00              NOP      
;;;351                  USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
0000ea  bf00              NOP      
0000ec  f8b400f8          LDRH     r0,[r4,#0xf8]
0000f0  eb000280          ADD      r2,r0,r0,LSL #2
0000f4  eb0202c0          ADD      r2,r2,r0,LSL #3
0000f8  f1040090          ADD      r0,r4,#0x90
0000fc  eb000082          ADD      r0,r0,r2,LSL #2
000100  f100011b          ADD      r1,r0,#0x1b
000104  a0db              ADR      r0,|L7.1140|
000106  f7fffffe          BL       __2printf
00010a  a0d3              ADR      r0,|L7.1112|
00010c  f7fffffe          BL       __2printf
000110  bf00              NOP      
;;;352                  USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
000112  bf00              NOP      
000114  e001              B        |L7.282|
                  |L7.278|
000116  e2fe              B        |L7.1814|
                  |L7.280|
000118  e2ef              B        |L7.1786|
                  |L7.282|
00011a  f8b400f8          LDRH     r0,[r4,#0xf8]
00011e  eb000280          ADD      r2,r0,r0,LSL #2
000122  eb0202c0          ADD      r2,r2,r0,LSL #3
000126  f1040090          ADD      r0,r4,#0x90
00012a  eb000082          ADD      r0,r0,r2,LSL #2
00012e  f100012c          ADD      r1,r0,#0x2c
000132  a0d6              ADR      r0,|L7.1164|
000134  f7fffffe          BL       __2printf
000138  a0c7              ADR      r0,|L7.1112|
00013a  f7fffffe          BL       __2printf
00013e  bf00              NOP      
;;;353                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
000140  2102              MOVS     r1,#2
000142  f8b400f8          LDRH     r0,[r4,#0xf8]
000146  eb000280          ADD      r2,r0,r0,LSL #2
00014a  eb0202c0          ADD      r2,r2,r0,LSL #3
00014e  f1040090          ADD      r0,r4,#0x90
000152  e000              B        |L7.342|
                  |L7.340|
000154  e2cf              B        |L7.1782|
                  |L7.342|
000156  f8001022          STRB     r1,[r0,r2,LSL #2]
                  |L7.346|
;;;354                }
;;;355                if (scsi_status == USBH_FAIL)
00015a  2d02              CMP      r5,#2
00015c  d10b              BNE      |L7.374|
;;;356                {
;;;357                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
00015e  2105              MOVS     r1,#5
000160  f8b400f8          LDRH     r0,[r4,#0xf8]
000164  eb000280          ADD      r2,r0,r0,LSL #2
000168  eb0202c0          ADD      r2,r2,r0,LSL #3
00016c  f1040090          ADD      r0,r4,#0x90
000170  f8001022          STRB     r1,[r0,r2,LSL #2]
000174  e018              B        |L7.424|
                  |L7.374|
;;;358                }
;;;359                else
;;;360                {
;;;361                  if (scsi_status == USBH_UNRECOVERED_ERROR)
000176  2d04              CMP      r5,#4
000178  d116              BNE      |L7.424|
;;;362                  {
;;;363                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
00017a  2101              MOVS     r1,#1
00017c  f8b400f8          LDRH     r0,[r4,#0xf8]
000180  eb000280          ADD      r2,r0,r0,LSL #2
000184  eb0202c0          ADD      r2,r2,r0,LSL #3
000188  f1040090          ADD      r0,r4,#0x90
00018c  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;364                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
000190  2102              MOVS     r1,#2
000192  f8b400f8          LDRH     r0,[r4,#0xf8]
000196  eb000280          ADD      r2,r0,r0,LSL #2
00019a  eb0202c0          ADD      r2,r2,r0,LSL #3
00019e  f1040090          ADD      r0,r4,#0x90
0001a2  eb000082          ADD      r0,r0,r2,LSL #2
0001a6  7041              STRB     r1,[r0,#1]
                  |L7.424|
;;;365                  }
;;;366                }
;;;367                break;
0001a8  e2a6              B        |L7.1784|
;;;368    
;;;369              case MSC_TEST_UNIT_READY:
;;;370                ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
0001aa  f89410f8          LDRB     r1,[r4,#0xf8]
0001ae  4630              MOV      r0,r6
0001b0  f7fffffe          BL       USBH_MSC_SCSI_TestUnitReady
0001b4  4607              MOV      r7,r0
;;;371    
;;;372                if (ready_status == USBH_OK)
0001b6  bbe7              CBNZ     r7,|L7.562|
;;;373                {
;;;374                  if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
0001b8  f8b400f8          LDRH     r0,[r4,#0xf8]
0001bc  eb000180          ADD      r1,r0,r0,LSL #2
0001c0  eb0101c0          ADD      r1,r1,r0,LSL #3
0001c4  f1040090          ADD      r0,r4,#0x90
0001c8  eb000081          ADD      r0,r0,r1,LSL #2
0001cc  7880              LDRB     r0,[r0,#2]
0001ce  b1a0              CBZ      r0,|L7.506|
;;;375                  {
;;;376                    MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
0001d0  2101              MOVS     r1,#1
0001d2  f8b400f8          LDRH     r0,[r4,#0xf8]
0001d6  eb000280          ADD      r2,r0,r0,LSL #2
0001da  eb0202c0          ADD      r2,r2,r0,LSL #3
0001de  f1040090          ADD      r0,r4,#0x90
0001e2  eb000082          ADD      r0,r0,r2,LSL #2
0001e6  f8801031          STRB     r1,[r0,#0x31]
;;;377                    USBH_UsrLog("MSC Device ready");
0001ea  bf00              NOP      
0001ec  a0ad              ADR      r0,|L7.1188|
0001ee  f7fffffe          BL       __2printf
0001f2  a099              ADR      r0,|L7.1112|
0001f4  f7fffffe          BL       __2printf
0001f8  e00c              B        |L7.532|
                  |L7.506|
;;;378                  }
;;;379                  else
;;;380                  {
;;;381                    MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
0001fa  2100              MOVS     r1,#0
0001fc  f8b400f8          LDRH     r0,[r4,#0xf8]
000200  eb000280          ADD      r2,r0,r0,LSL #2
000204  eb0202c0          ADD      r2,r2,r0,LSL #3
000208  f1040090          ADD      r0,r4,#0x90
00020c  eb000082          ADD      r0,r0,r2,LSL #2
000210  f8801031          STRB     r1,[r0,#0x31]
                  |L7.532|
;;;382                  }
;;;383                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
000214  2103              MOVS     r1,#3
000216  f8b400f8          LDRH     r0,[r4,#0xf8]
00021a  eb000280          ADD      r2,r0,r0,LSL #2
00021e  eb0202c0          ADD      r2,r2,r0,LSL #3
000222  f1040090          ADD      r0,r4,#0x90
000226  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;384                  MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
00022a  2100              MOVS     r1,#0
00022c  f8b400f8          LDRH     r0,[r4,#0xf8]
000230  e003              B        |L7.570|
                  |L7.562|
000232  e016              B        |L7.610|
000234  e259              B        |L7.1770|
000236  e197              B        |L7.1384|
000238  e082              B        |L7.832|
                  |L7.570|
00023a  eb000280          ADD      r2,r0,r0,LSL #2
00023e  eb0202c0          ADD      r2,r2,r0,LSL #3
000242  f1040090          ADD      r0,r4,#0x90
000246  eb000082          ADD      r0,r0,r2,LSL #2
00024a  7041              STRB     r1,[r0,#1]
;;;385                  MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
00024c  f8b400f8          LDRH     r0,[r4,#0xf8]
000250  eb000280          ADD      r2,r0,r0,LSL #2
000254  eb0202c0          ADD      r2,r2,r0,LSL #3
000258  f1040090          ADD      r0,r4,#0x90
00025c  eb000082          ADD      r0,r0,r2,LSL #2
000260  7081              STRB     r1,[r0,#2]
                  |L7.610|
;;;386                }
;;;387                if (ready_status == USBH_FAIL)
000262  2f02              CMP      r7,#2
000264  d152              BNE      |L7.780|
;;;388                {
;;;389                  /* Media not ready, so try to check again during 10s */
;;;390                  if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
000266  f8b400f8          LDRH     r0,[r4,#0xf8]
00026a  eb000180          ADD      r1,r0,r0,LSL #2
00026e  eb0101c0          ADD      r1,r1,r0,LSL #3
000272  f1040090          ADD      r0,r4,#0x90
000276  eb000081          ADD      r0,r0,r1,LSL #2
00027a  7880              LDRB     r0,[r0,#2]
00027c  2802              CMP      r0,#2
00027e  d014              BEQ      |L7.682|
;;;391                  {
;;;392                    MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
000280  2101              MOVS     r1,#1
000282  f8b400f8          LDRH     r0,[r4,#0xf8]
000286  eb000280          ADD      r2,r0,r0,LSL #2
00028a  eb0202c0          ADD      r2,r2,r0,LSL #3
00028e  f1040090          ADD      r0,r4,#0x90
000292  eb000082          ADD      r0,r0,r2,LSL #2
000296  f8801031          STRB     r1,[r0,#0x31]
;;;393                    USBH_UsrLog("MSC Device NOT ready");
00029a  bf00              NOP      
00029c  a086              ADR      r0,|L7.1208|
00029e  f7fffffe          BL       __2printf
0002a2  a06d              ADR      r0,|L7.1112|
0002a4  f7fffffe          BL       __2printf
0002a8  e00c              B        |L7.708|
                  |L7.682|
;;;394                  }
;;;395                  else
;;;396                  {
;;;397                    MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
0002aa  2100              MOVS     r1,#0
0002ac  f8b400f8          LDRH     r0,[r4,#0xf8]
0002b0  eb000280          ADD      r2,r0,r0,LSL #2
0002b4  eb0202c0          ADD      r2,r2,r0,LSL #3
0002b8  f1040090          ADD      r0,r4,#0x90
0002bc  eb000082          ADD      r0,r0,r2,LSL #2
0002c0  f8801031          STRB     r1,[r0,#0x31]
                  |L7.708|
;;;398                  }
;;;399                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
0002c4  2105              MOVS     r1,#5
0002c6  f8b400f8          LDRH     r0,[r4,#0xf8]
0002ca  eb000280          ADD      r2,r0,r0,LSL #2
0002ce  eb0202c0          ADD      r2,r2,r0,LSL #3
0002d2  f1040090          ADD      r0,r4,#0x90
0002d6  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;400                  MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
0002da  2101              MOVS     r1,#1
0002dc  f8b400f8          LDRH     r0,[r4,#0xf8]
0002e0  eb000280          ADD      r2,r0,r0,LSL #2
0002e4  eb0202c0          ADD      r2,r2,r0,LSL #3
0002e8  f1040090          ADD      r0,r4,#0x90
0002ec  eb000082          ADD      r0,r0,r2,LSL #2
0002f0  7041              STRB     r1,[r0,#1]
;;;401                  MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
0002f2  2102              MOVS     r1,#2
0002f4  f8b400f8          LDRH     r0,[r4,#0xf8]
0002f8  eb000280          ADD      r2,r0,r0,LSL #2
0002fc  eb0202c0          ADD      r2,r2,r0,LSL #3
000300  f1040090          ADD      r0,r4,#0x90
000304  eb000082          ADD      r0,r0,r2,LSL #2
000308  7081              STRB     r1,[r0,#2]
00030a  e018              B        |L7.830|
                  |L7.780|
;;;402                }
;;;403                else
;;;404                {
;;;405                  if (ready_status == USBH_UNRECOVERED_ERROR)
00030c  2f04              CMP      r7,#4
00030e  d116              BNE      |L7.830|
;;;406                  {
;;;407                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
000310  2101              MOVS     r1,#1
000312  f8b400f8          LDRH     r0,[r4,#0xf8]
000316  eb000280          ADD      r2,r0,r0,LSL #2
00031a  eb0202c0          ADD      r2,r2,r0,LSL #3
00031e  f1040090          ADD      r0,r4,#0x90
000322  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;408                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
000326  2102              MOVS     r1,#2
000328  f8b400f8          LDRH     r0,[r4,#0xf8]
00032c  eb000280          ADD      r2,r0,r0,LSL #2
000330  eb0202c0          ADD      r2,r2,r0,LSL #3
000334  f1040090          ADD      r0,r4,#0x90
000338  eb000082          ADD      r0,r0,r2,LSL #2
00033c  7041              STRB     r1,[r0,#1]
                  |L7.830|
;;;409                  }
;;;410                }
;;;411                break;
00033e  e1db              B        |L7.1784|
                  |L7.832|
;;;412    
;;;413              case MSC_READ_CAPACITY10:
;;;414                scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
000340  f8b400f8          LDRH     r0,[r4,#0xf8]
000344  eb000380          ADD      r3,r0,r0,LSL #2
000348  eb0303c0          ADD      r3,r3,r0,LSL #3
00034c  f1040090          ADD      r0,r4,#0x90
000350  eb000083          ADD      r0,r0,r3,LSL #2
000354  1d02              ADDS     r2,r0,#4
000356  f89410f8          LDRB     r1,[r4,#0xf8]
00035a  4630              MOV      r0,r6
00035c  f7fffffe          BL       USBH_MSC_SCSI_ReadCapacity
000360  4605              MOV      r5,r0
;;;415    
;;;416                if (scsi_status == USBH_OK)
000362  2d00              CMP      r5,#0
000364  d170              BNE      |L7.1096|
;;;417                {
;;;418                  if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
000366  f8b400f8          LDRH     r0,[r4,#0xf8]
00036a  eb000180          ADD      r1,r0,r0,LSL #2
00036e  eb0101c0          ADD      r1,r1,r0,LSL #3
000372  f1040090          ADD      r0,r4,#0x90
000376  eb000081          ADD      r0,r0,r1,LSL #2
00037a  f8900031          LDRB     r0,[r0,#0x31]
00037e  2801              CMP      r0,#1
000380  d145              BNE      |L7.1038|
;;;419                  {
;;;420                    USBH_UsrLog("MSC Device capacity : %lu Bytes", \
000382  bf00              NOP      
000384  f8b400f8          LDRH     r0,[r4,#0xf8]
000388  eb000280          ADD      r2,r0,r0,LSL #2
00038c  eb0202c0          ADD      r2,r2,r0,LSL #3
000390  f1040090          ADD      r0,r4,#0x90
000394  eb000082          ADD      r0,r0,r2,LSL #2
000398  6840              LDR      r0,[r0,#4]
00039a  f8b420f8          LDRH     r2,[r4,#0xf8]
00039e  eb020382          ADD      r3,r2,r2,LSL #2
0003a2  eb0303c2          ADD      r3,r3,r2,LSL #3
0003a6  f1040290          ADD      r2,r4,#0x90
0003aa  eb020283          ADD      r2,r2,r3,LSL #2
0003ae  8912              LDRH     r2,[r2,#8]
0003b0  fb00f102          MUL      r1,r0,r2
0003b4  a046              ADR      r0,|L7.1232|
0003b6  f7fffffe          BL       __2printf
0003ba  a027              ADR      r0,|L7.1112|
0003bc  f7fffffe          BL       __2printf
0003c0  bf00              NOP      
;;;421                                (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr * MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
;;;422                    USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
0003c2  bf00              NOP      
0003c4  f8b400f8          LDRH     r0,[r4,#0xf8]
0003c8  eb000280          ADD      r2,r0,r0,LSL #2
0003cc  eb0202c0          ADD      r2,r2,r0,LSL #3
0003d0  f1040090          ADD      r0,r4,#0x90
0003d4  eb000082          ADD      r0,r0,r2,LSL #2
0003d8  6841              LDR      r1,[r0,#4]
0003da  a045              ADR      r0,|L7.1264|
0003dc  f7fffffe          BL       __2printf
0003e0  a01d              ADR      r0,|L7.1112|
0003e2  f7fffffe          BL       __2printf
0003e6  bf00              NOP      
;;;423                    USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
0003e8  bf00              NOP      
0003ea  f8b400f8          LDRH     r0,[r4,#0xf8]
0003ee  eb000280          ADD      r2,r0,r0,LSL #2
0003f2  eb0202c0          ADD      r2,r2,r0,LSL #3
0003f6  f1040090          ADD      r0,r4,#0x90
0003fa  eb000082          ADD      r0,r0,r2,LSL #2
0003fe  8901              LDRH     r1,[r0,#8]
000400  a040              ADR      r0,|L7.1284|
000402  f7fffffe          BL       __2printf
000406  a014              ADR      r0,|L7.1112|
000408  f7fffffe          BL       __2printf
00040c  bf00              NOP      
                  |L7.1038|
;;;424                  }
;;;425                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
00040e  2101              MOVS     r1,#1
000410  f8b400f8          LDRH     r0,[r4,#0xf8]
000414  eb000280          ADD      r2,r0,r0,LSL #2
000418  eb0202c0          ADD      r2,r2,r0,LSL #3
00041c  f1040090          ADD      r0,r4,#0x90
000420  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;426                  MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
000424  2100              MOVS     r1,#0
000426  f8b400f8          LDRH     r0,[r4,#0xf8]
00042a  eb000280          ADD      r2,r0,r0,LSL #2
00042e  eb0202c0          ADD      r2,r2,r0,LSL #3
000432  f1040090          ADD      r0,r4,#0x90
000436  eb000082          ADD      r0,r0,r2,LSL #2
00043a  7041              STRB     r1,[r0,#1]
;;;427                  MSC_Handle->current_lun++;
00043c  f8b400f8          LDRH     r0,[r4,#0xf8]
000440  1c40              ADDS     r0,r0,#1
000442  f8a400f8          STRH     r0,[r4,#0xf8]
000446  e08e              B        |L7.1382|
                  |L7.1096|
000448  e066              B        |L7.1304|
00044a  0000              DCW      0x0000
                  |L7.1100|
00044c  4c554e20          DCB      "LUN #%d: ",0
000450  2325643a
000454  2000    
000456  00                DCB      0
000457  00                DCB      0
                  |L7.1112|
000458  0a00              DCB      "\n",0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L7.1116|
00045c  496e7175          DCB      "Inquiry Vendor  : %s",0
000460  69727920
000464  56656e64
000468  6f722020
00046c  3a202573
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L7.1140|
000474  496e7175          DCB      "Inquiry Product : %s",0
000478  69727920
00047c  50726f64
000480  75637420
000484  3a202573
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L7.1164|
00048c  496e7175          DCB      "Inquiry Version : %s",0
000490  69727920
000494  56657273
000498  696f6e20
00049c  3a202573
0004a0  00      
0004a1  00                DCB      0
0004a2  00                DCB      0
0004a3  00                DCB      0
                  |L7.1188|
0004a4  4d534320          DCB      "MSC Device ready",0
0004a8  44657669
0004ac  63652072
0004b0  65616479
0004b4  00      
0004b5  00                DCB      0
0004b6  00                DCB      0
0004b7  00                DCB      0
                  |L7.1208|
0004b8  4d534320          DCB      "MSC Device NOT ready",0
0004bc  44657669
0004c0  6365204e
0004c4  4f542072
0004c8  65616479
0004cc  00      
0004cd  00                DCB      0
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L7.1232|
0004d0  4d534320          DCB      "MSC Device capacity : %lu Bytes",0
0004d4  44657669
0004d8  63652063
0004dc  61706163
0004e0  69747920
0004e4  3a20256c
0004e8  75204279
0004ec  74657300
                  |L7.1264|
0004f0  426c6f63          DCB      "Block number : %lu",0
0004f4  6b206e75
0004f8  6d626572
0004fc  203a2025
000500  6c7500  
000503  00                DCB      0
                  |L7.1284|
000504  426c6f63          DCB      "Block Size   : %lu",0
000508  6b205369
00050c  7a652020
000510  203a2025
000514  6c7500  
000517  00                DCB      0
                  |L7.1304|
;;;428                }
;;;429                else if (scsi_status == USBH_FAIL)
000518  2d02              CMP      r5,#2
00051a  d10b              BNE      |L7.1332|
;;;430                {
;;;431                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
00051c  2105              MOVS     r1,#5
00051e  f8b400f8          LDRH     r0,[r4,#0xf8]
000522  eb000280          ADD      r2,r0,r0,LSL #2
000526  eb0202c0          ADD      r2,r2,r0,LSL #3
00052a  f1040090          ADD      r0,r4,#0x90
00052e  f8001022          STRB     r1,[r0,r2,LSL #2]
000532  e018              B        |L7.1382|
                  |L7.1332|
;;;432                }
;;;433                else
;;;434                {
;;;435                  if (scsi_status == USBH_UNRECOVERED_ERROR)
000534  2d04              CMP      r5,#4
000536  d116              BNE      |L7.1382|
;;;436                  {
;;;437                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
000538  2101              MOVS     r1,#1
00053a  f8b400f8          LDRH     r0,[r4,#0xf8]
00053e  eb000280          ADD      r2,r0,r0,LSL #2
000542  eb0202c0          ADD      r2,r2,r0,LSL #3
000546  f1040090          ADD      r0,r4,#0x90
00054a  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;438                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
00054e  2102              MOVS     r1,#2
000550  f8b400f8          LDRH     r0,[r4,#0xf8]
000554  eb000280          ADD      r2,r0,r0,LSL #2
000558  eb0202c0          ADD      r2,r2,r0,LSL #3
00055c  f1040090          ADD      r0,r4,#0x90
000560  eb000082          ADD      r0,r0,r2,LSL #2
000564  7041              STRB     r1,[r0,#1]
                  |L7.1382|
;;;439                  }
;;;440                }
;;;441                break;
000566  e0c7              B        |L7.1784|
                  |L7.1384|
;;;442    
;;;443              case MSC_REQUEST_SENSE:
;;;444                scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
000568  f8b400f8          LDRH     r0,[r4,#0xf8]
00056c  eb000380          ADD      r3,r0,r0,LSL #2
000570  eb0303c0          ADD      r3,r3,r0,LSL #3
000574  f1040090          ADD      r0,r4,#0x90
000578  eb000083          ADD      r0,r0,r3,LSL #2
00057c  f100020c          ADD      r2,r0,#0xc
000580  f89410f8          LDRB     r1,[r4,#0xf8]
000584  4630              MOV      r0,r6
000586  f7fffffe          BL       USBH_MSC_SCSI_RequestSense
00058a  4605              MOV      r5,r0
;;;445    
;;;446                if (scsi_status == USBH_OK)
00058c  2d00              CMP      r5,#0
00058e  d17a              BNE      |L7.1670|
;;;447                {
;;;448                  if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
000590  f8b400f8          LDRH     r0,[r4,#0xf8]
000594  eb000180          ADD      r1,r0,r0,LSL #2
000598  eb0101c0          ADD      r1,r1,r0,LSL #3
00059c  f1040090          ADD      r0,r4,#0x90
0005a0  eb000081          ADD      r0,r0,r1,LSL #2
0005a4  7b00              LDRB     r0,[r0,#0xc]
0005a6  2806              CMP      r0,#6
0005a8  d00c              BEQ      |L7.1476|
;;;449                      (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
0005aa  f8b400f8          LDRH     r0,[r4,#0xf8]
0005ae  eb000180          ADD      r1,r0,r0,LSL #2
0005b2  eb0101c0          ADD      r1,r1,r0,LSL #3
0005b6  f1040090          ADD      r0,r4,#0x90
0005ba  eb000081          ADD      r0,r0,r1,LSL #2
0005be  7b00              LDRB     r0,[r0,#0xc]
0005c0  2802              CMP      r0,#2
0005c2  d114              BNE      |L7.1518|
                  |L7.1476|
;;;450                  {
;;;451    
;;;452                    if ((phost->Timer - MSC_Handle->timer) < 10000U)
0005c4  f8d603c4          LDR      r0,[r6,#0x3c4]
0005c8  f8d410fc          LDR      r1,[r4,#0xfc]
0005cc  1a40              SUBS     r0,r0,r1
0005ce  f2427110          MOV      r1,#0x2710
0005d2  4288              CMP      r0,r1
0005d4  d20b              BCS      |L7.1518|
;;;453                    {
;;;454                      MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
0005d6  2102              MOVS     r1,#2
0005d8  f8b400f8          LDRH     r0,[r4,#0xf8]
0005dc  eb000280          ADD      r2,r0,r0,LSL #2
0005e0  eb0202c0          ADD      r2,r2,r0,LSL #3
0005e4  f1040090          ADD      r0,r4,#0x90
0005e8  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;455                      break;
0005ec  e084              B        |L7.1784|
                  |L7.1518|
;;;456                    }
;;;457                  }
;;;458    
;;;459                  USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
0005ee  bf00              NOP      
0005f0  f8b400f8          LDRH     r0,[r4,#0xf8]
0005f4  eb000280          ADD      r2,r0,r0,LSL #2
0005f8  eb0202c0          ADD      r2,r2,r0,LSL #3
0005fc  f1040090          ADD      r0,r4,#0x90
000600  eb000082          ADD      r0,r0,r2,LSL #2
000604  7b01              LDRB     r1,[r0,#0xc]
000606  a046              ADR      r0,|L7.1824|
000608  f7fffffe          BL       __2printf
00060c  f2af10b8          ADR      r0,|L7.1112|
000610  f7fffffe          BL       __2printf
000614  bf00              NOP      
;;;460                  USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
000616  bf00              NOP      
000618  f8b400f8          LDRH     r0,[r4,#0xf8]
00061c  eb000280          ADD      r2,r0,r0,LSL #2
000620  eb0202c0          ADD      r2,r2,r0,LSL #3
000624  f1040090          ADD      r0,r4,#0x90
000628  eb000082          ADD      r0,r0,r2,LSL #2
00062c  7b41              LDRB     r1,[r0,#0xd]
00062e  a040              ADR      r0,|L7.1840|
000630  f7fffffe          BL       __2printf
000634  f2af10e0          ADR      r0,|L7.1112|
000638  f7fffffe          BL       __2printf
00063c  bf00              NOP      
;;;461                  USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
00063e  bf00              NOP      
000640  f8b400f8          LDRH     r0,[r4,#0xf8]
000644  eb000280          ADD      r2,r0,r0,LSL #2
000648  eb0202c0          ADD      r2,r2,r0,LSL #3
00064c  f1040090          ADD      r0,r4,#0x90
000650  eb000082          ADD      r0,r0,r2,LSL #2
000654  7b81              LDRB     r1,[r0,#0xe]
000656  a03d              ADR      r0,|L7.1868|
000658  f7fffffe          BL       __2printf
00065c  f2af2008          ADR      r0,|L7.1112|
000660  f7fffffe          BL       __2printf
000664  bf00              NOP      
;;;462                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
000666  2101              MOVS     r1,#1
000668  f8b400f8          LDRH     r0,[r4,#0xf8]
00066c  eb000280          ADD      r2,r0,r0,LSL #2
000670  eb0202c0          ADD      r2,r2,r0,LSL #3
000674  f1040090          ADD      r0,r4,#0x90
000678  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;463                  MSC_Handle->current_lun++;
00067c  f8b400f8          LDRH     r0,[r4,#0xf8]
000680  1c40              ADDS     r0,r0,#1
000682  f8a400f8          STRH     r0,[r4,#0xf8]
                  |L7.1670|
;;;464                }
;;;465                if (scsi_status == USBH_FAIL)
000686  2d02              CMP      r5,#2
000688  d115              BNE      |L7.1718|
;;;466                {
;;;467                  USBH_UsrLog("MSC Device NOT ready");
00068a  bf00              NOP      
00068c  f2af10d8          ADR      r0,|L7.1208|
000690  f7fffffe          BL       __2printf
000694  f2af2040          ADR      r0,|L7.1112|
000698  f7fffffe          BL       __2printf
00069c  bf00              NOP      
;;;468                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
00069e  2108              MOVS     r1,#8
0006a0  f8b400f8          LDRH     r0,[r4,#0xf8]
0006a4  eb000280          ADD      r2,r0,r0,LSL #2
0006a8  eb0202c0          ADD      r2,r2,r0,LSL #3
0006ac  f1040090          ADD      r0,r4,#0x90
0006b0  f8001022          STRB     r1,[r0,r2,LSL #2]
0006b4  e018              B        |L7.1768|
                  |L7.1718|
;;;469                }
;;;470                else
;;;471                {
;;;472                  if (scsi_status == USBH_UNRECOVERED_ERROR)
0006b6  2d04              CMP      r5,#4
0006b8  d116              BNE      |L7.1768|
;;;473                  {
;;;474                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
0006ba  2101              MOVS     r1,#1
0006bc  f8b400f8          LDRH     r0,[r4,#0xf8]
0006c0  eb000280          ADD      r2,r0,r0,LSL #2
0006c4  eb0202c0          ADD      r2,r2,r0,LSL #3
0006c8  f1040090          ADD      r0,r4,#0x90
0006cc  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;475                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
0006d0  2102              MOVS     r1,#2
0006d2  f8b400f8          LDRH     r0,[r4,#0xf8]
0006d6  eb000280          ADD      r2,r0,r0,LSL #2
0006da  eb0202c0          ADD      r2,r2,r0,LSL #3
0006de  f1040090          ADD      r0,r4,#0x90
0006e2  eb000082          ADD      r0,r0,r2,LSL #2
0006e6  7041              STRB     r1,[r0,#1]
                  |L7.1768|
;;;476                  }
;;;477                }
;;;478                break;
0006e8  e006              B        |L7.1784|
                  |L7.1770|
;;;479    
;;;480              case MSC_UNRECOVERED_ERROR:
;;;481                MSC_Handle->current_lun++;
0006ea  f8b400f8          LDRH     r0,[r4,#0xf8]
0006ee  1c40              ADDS     r0,r0,#1
0006f0  f8a400f8          STRH     r0,[r4,#0xf8]
;;;482                break;
0006f4  e000              B        |L7.1784|
                  |L7.1782|
;;;483    
;;;484              default:
;;;485                break;
0006f6  bf00              NOP      
                  |L7.1784|
0006f8  e009              B        |L7.1806|
                  |L7.1786|
;;;486            }
;;;487    
;;;488    #if (USBH_USE_OS == 1U)
;;;489            phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
;;;490    #if (osCMSIS < 0x20000U)
;;;491            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;492    #else
;;;493            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;494    #endif
;;;495    #endif
;;;496          }
;;;497          else
;;;498          {
;;;499            MSC_Handle->current_lun = 0U;
0006fa  2000              MOVS     r0,#0
0006fc  f8a400f8          STRH     r0,[r4,#0xf8]
;;;500            MSC_Handle->state = MSC_IDLE;
000700  2001              MOVS     r0,#1
000702  7320              STRB     r0,[r4,#0xc]
;;;501    
;;;502    #if (USBH_USE_OS == 1U)
;;;503            phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
;;;504    #if (osCMSIS < 0x20000U)
;;;505            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;506    #else
;;;507            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;508    #endif
;;;509    #endif
;;;510            phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
000704  2102              MOVS     r1,#2
000706  4630              MOV      r0,r6
000708  f8d623d4          LDR      r2,[r6,#0x3d4]
00070c  4790              BLX      r2
                  |L7.1806|
;;;511          }
;;;512          break;
00070e  e003              B        |L7.1816|
                  |L7.1808|
;;;513    
;;;514        case MSC_IDLE:
;;;515          error = USBH_OK;
000710  f04f0800          MOV      r8,#0
;;;516          break;
000714  e000              B        |L7.1816|
                  |L7.1814|
;;;517    
;;;518        default:
;;;519          break;
000716  bf00              NOP      
                  |L7.1816|
000718  bf00              NOP                            ;512
;;;520      }
;;;521      return error;
00071a  4640              MOV      r0,r8
;;;522    }
00071c  e8bd81f0          POP      {r4-r8,pc}
;;;523    
                          ENDP

                  |L7.1824|
000720  53656e73          DCB      "Sense Key  : %x",0
000724  65204b65
000728  7920203a
00072c  20257800
                  |L7.1840|
000730  41646469          DCB      "Additional Sense Code : %x",0
000734  74696f6e
000738  616c2053
00073c  656e7365
000740  20436f64
000744  65203a20
000748  257800  
00074b  00                DCB      0
                  |L7.1868|
00074c  41646469          DCB      "Additional Sense Code Qualifier: %x",0
000750  74696f6e
000754  616c2053
000758  656e7365
00075c  20436f64
000760  65205175
000764  616c6966
000768  6965723a
00076c  20257800

                          AREA ||i.USBH_MSC_RdWrProcess||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  USBH_MSC_RdWrProcess PROC
;;;544      */
;;;545    static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;546    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;547      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000008  f8d8037c          LDR      r0,[r8,#0x37c]
00000c  69c5              LDR      r5,[r0,#0x1c]
;;;548      USBH_StatusTypeDef error = USBH_BUSY ;
00000e  2701              MOVS     r7,#1
;;;549      USBH_StatusTypeDef scsi_status = USBH_BUSY ;
000010  2601              MOVS     r6,#1
;;;550    
;;;551      /* Switch MSC REQ state machine */
;;;552      switch (MSC_Handle->unit[lun].state)
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb0001c4          ADD      r1,r0,r4,LSL #3
00001a  f1050090          ADD      r0,r5,#0x90
00001e  f8100021          LDRB     r0,[r0,r1,LSL #2]
000022  2805              CMP      r0,#5
000024  d060              BEQ      |L8.232|
000026  2806              CMP      r0,#6
000028  d002              BEQ      |L8.48|
00002a  2807              CMP      r0,#7
00002c  d178              BNE      |L8.288|
00002e  e02d              B        |L8.140|
                  |L8.48|
;;;553      {
;;;554    
;;;555        case MSC_READ:
;;;556          scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
000030  2000              MOVS     r0,#0
000032  4603              MOV      r3,r0
000034  4602              MOV      r2,r0
000036  4621              MOV      r1,r4
000038  9000              STR      r0,[sp,#0]
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       USBH_MSC_SCSI_Read
000040  4606              MOV      r6,r0
;;;557    
;;;558          if (scsi_status == USBH_OK)
000042  b956              CBNZ     r6,|L8.90|
;;;559          {
;;;560            MSC_Handle->unit[lun].state = MSC_IDLE;
000044  2101              MOVS     r1,#1
000046  eb040084          ADD      r0,r4,r4,LSL #2
00004a  eb0002c4          ADD      r2,r0,r4,LSL #3
00004e  f1050090          ADD      r0,r5,#0x90
000052  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;561            error = USBH_OK;
000056  2700              MOVS     r7,#0
000058  e017              B        |L8.138|
                  |L8.90|
;;;562          }
;;;563          else if (scsi_status == USBH_FAIL)
00005a  2e02              CMP      r6,#2
00005c  d109              BNE      |L8.114|
;;;564          {
;;;565            MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
00005e  2105              MOVS     r1,#5
000060  eb040084          ADD      r0,r4,r4,LSL #2
000064  eb0002c4          ADD      r2,r0,r4,LSL #3
000068  f1050090          ADD      r0,r5,#0x90
00006c  f8001022          STRB     r1,[r0,r2,LSL #2]
000070  e00b              B        |L8.138|
                  |L8.114|
;;;566          }
;;;567          else
;;;568          {
;;;569            if (scsi_status == USBH_UNRECOVERED_ERROR)
000072  2e04              CMP      r6,#4
000074  d109              BNE      |L8.138|
;;;570            {
;;;571              MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
000076  2108              MOVS     r1,#8
000078  eb040084          ADD      r0,r4,r4,LSL #2
00007c  eb0002c4          ADD      r2,r0,r4,LSL #3
000080  f1050090          ADD      r0,r5,#0x90
000084  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;572              error = USBH_FAIL;
000088  2702              MOVS     r7,#2
                  |L8.138|
;;;573            }
;;;574          }
;;;575    
;;;576    #if (USBH_USE_OS == 1U)
;;;577          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
;;;578    #if (osCMSIS < 0x20000U)
;;;579          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;580    #else
;;;581          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;582    #endif
;;;583    #endif
;;;584          break;
00008a  e09f              B        |L8.460|
                  |L8.140|
;;;585    
;;;586        case MSC_WRITE:
;;;587          scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
00008c  2000              MOVS     r0,#0
00008e  4603              MOV      r3,r0
000090  4602              MOV      r2,r0
000092  4621              MOV      r1,r4
000094  9000              STR      r0,[sp,#0]
000096  4640              MOV      r0,r8
000098  f7fffffe          BL       USBH_MSC_SCSI_Write
00009c  4606              MOV      r6,r0
;;;588    
;;;589          if (scsi_status == USBH_OK)
00009e  b956              CBNZ     r6,|L8.182|
;;;590          {
;;;591            MSC_Handle->unit[lun].state = MSC_IDLE;
0000a0  2101              MOVS     r1,#1
0000a2  eb040084          ADD      r0,r4,r4,LSL #2
0000a6  eb0002c4          ADD      r2,r0,r4,LSL #3
0000aa  f1050090          ADD      r0,r5,#0x90
0000ae  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;592            error = USBH_OK;
0000b2  2700              MOVS     r7,#0
0000b4  e017              B        |L8.230|
                  |L8.182|
;;;593          }
;;;594          else if (scsi_status == USBH_FAIL)
0000b6  2e02              CMP      r6,#2
0000b8  d109              BNE      |L8.206|
;;;595          {
;;;596            MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
0000ba  2105              MOVS     r1,#5
0000bc  eb040084          ADD      r0,r4,r4,LSL #2
0000c0  eb0002c4          ADD      r2,r0,r4,LSL #3
0000c4  f1050090          ADD      r0,r5,#0x90
0000c8  f8001022          STRB     r1,[r0,r2,LSL #2]
0000cc  e00b              B        |L8.230|
                  |L8.206|
;;;597          }
;;;598          else
;;;599          {
;;;600            if (scsi_status == USBH_UNRECOVERED_ERROR)
0000ce  2e04              CMP      r6,#4
0000d0  d109              BNE      |L8.230|
;;;601            {
;;;602              MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
0000d2  2108              MOVS     r1,#8
0000d4  eb040084          ADD      r0,r4,r4,LSL #2
0000d8  eb0002c4          ADD      r2,r0,r4,LSL #3
0000dc  f1050090          ADD      r0,r5,#0x90
0000e0  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;603              error = USBH_FAIL;
0000e4  2702              MOVS     r7,#2
                  |L8.230|
;;;604            }
;;;605          }
;;;606    
;;;607    #if (USBH_USE_OS == 1U)
;;;608          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
;;;609    #if (osCMSIS < 0x20000U)
;;;610          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;611    #else
;;;612          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;613    #endif
;;;614    #endif
;;;615          break;
0000e6  e071              B        |L8.460|
                  |L8.232|
;;;616    
;;;617        case MSC_REQUEST_SENSE:
;;;618          scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
0000e8  eb040084          ADD      r0,r4,r4,LSL #2
0000ec  eb0001c4          ADD      r1,r0,r4,LSL #3
0000f0  f1050090          ADD      r0,r5,#0x90
0000f4  eb000081          ADD      r0,r0,r1,LSL #2
0000f8  f100020c          ADD      r2,r0,#0xc
0000fc  4621              MOV      r1,r4
0000fe  4640              MOV      r0,r8
000100  f7fffffe          BL       USBH_MSC_SCSI_RequestSense
000104  4606              MOV      r6,r0
;;;619    
;;;620          if (scsi_status == USBH_OK)
000106  2e00              CMP      r6,#0
000108  d148              BNE      |L8.412|
;;;621          {
;;;622            USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
00010a  bf00              NOP      
00010c  eb040084          ADD      r0,r4,r4,LSL #2
000110  eb0002c4          ADD      r2,r0,r4,LSL #3
000114  f1050090          ADD      r0,r5,#0x90
000118  eb000082          ADD      r0,r0,r2,LSL #2
00011c  7b01              LDRB     r1,[r0,#0xc]
00011e  e000              B        |L8.290|
                  |L8.288|
000120  e053              B        |L8.458|
                  |L8.290|
000122  a02c              ADR      r0,|L8.468|
000124  f7fffffe          BL       __2printf
000128  a02e              ADR      r0,|L8.484|
00012a  f7fffffe          BL       __2printf
00012e  bf00              NOP      
;;;623            USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
000130  bf00              NOP      
000132  eb040084          ADD      r0,r4,r4,LSL #2
000136  eb0002c4          ADD      r2,r0,r4,LSL #3
00013a  f1050090          ADD      r0,r5,#0x90
00013e  eb000082          ADD      r0,r0,r2,LSL #2
000142  7b41              LDRB     r1,[r0,#0xd]
000144  a028              ADR      r0,|L8.488|
000146  f7fffffe          BL       __2printf
00014a  a026              ADR      r0,|L8.484|
00014c  f7fffffe          BL       __2printf
000150  bf00              NOP      
;;;624            USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
000152  bf00              NOP      
000154  eb040084          ADD      r0,r4,r4,LSL #2
000158  eb0002c4          ADD      r2,r0,r4,LSL #3
00015c  f1050090          ADD      r0,r5,#0x90
000160  eb000082          ADD      r0,r0,r2,LSL #2
000164  7b81              LDRB     r1,[r0,#0xe]
000166  a027              ADR      r0,|L8.516|
000168  f7fffffe          BL       __2printf
00016c  a01d              ADR      r0,|L8.484|
00016e  f7fffffe          BL       __2printf
000172  bf00              NOP      
;;;625            MSC_Handle->unit[lun].state = MSC_IDLE;
000174  2101              MOVS     r1,#1
000176  eb040084          ADD      r0,r4,r4,LSL #2
00017a  eb0002c4          ADD      r2,r0,r4,LSL #3
00017e  f1050090          ADD      r0,r5,#0x90
000182  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;626            MSC_Handle->unit[lun].error = MSC_ERROR;
000186  2102              MOVS     r1,#2
000188  eb040084          ADD      r0,r4,r4,LSL #2
00018c  eb0002c4          ADD      r2,r0,r4,LSL #3
000190  f1050090          ADD      r0,r5,#0x90
000194  eb000082          ADD      r0,r0,r2,LSL #2
000198  7041              STRB     r1,[r0,#1]
;;;627    
;;;628            error = USBH_FAIL;
00019a  2702              MOVS     r7,#2
                  |L8.412|
;;;629          }
;;;630          if (scsi_status == USBH_FAIL)
00019c  2e02              CMP      r6,#2
00019e  d107              BNE      |L8.432|
;;;631          {
;;;632            USBH_UsrLog("MSC Device NOT ready");
0001a0  bf00              NOP      
0001a2  a021              ADR      r0,|L8.552|
0001a4  f7fffffe          BL       __2printf
0001a8  a00e              ADR      r0,|L8.484|
0001aa  f7fffffe          BL       __2printf
0001ae  e00b              B        |L8.456|
                  |L8.432|
;;;633          }
;;;634          else
;;;635          {
;;;636            if (scsi_status == USBH_UNRECOVERED_ERROR)
0001b0  2e04              CMP      r6,#4
0001b2  d109              BNE      |L8.456|
;;;637            {
;;;638              MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
0001b4  2108              MOVS     r1,#8
0001b6  eb040084          ADD      r0,r4,r4,LSL #2
0001ba  eb0002c4          ADD      r2,r0,r4,LSL #3
0001be  f1050090          ADD      r0,r5,#0x90
0001c2  f8001022          STRB     r1,[r0,r2,LSL #2]
;;;639              error = USBH_FAIL;
0001c6  2702              MOVS     r7,#2
                  |L8.456|
;;;640            }
;;;641          }
;;;642    
;;;643    #if (USBH_USE_OS == 1U)
;;;644          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
;;;645    #if (osCMSIS < 0x20000U)
;;;646          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;647    #else
;;;648          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;649    #endif
;;;650    #endif
;;;651          break;
0001c8  e000              B        |L8.460|
                  |L8.458|
;;;652    
;;;653        default:
;;;654          break;
0001ca  bf00              NOP      
                  |L8.460|
0001cc  bf00              NOP                            ;584
;;;655    
;;;656      }
;;;657      return error;
0001ce  4638              MOV      r0,r7
;;;658    }
0001d0  e8bd83f8          POP      {r3-r9,pc}
;;;659    
                          ENDP

                  |L8.468|
0001d4  53656e73          DCB      "Sense Key  : %x",0
0001d8  65204b65
0001dc  7920203a
0001e0  20257800
                  |L8.484|
0001e4  0a00              DCB      "\n",0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L8.488|
0001e8  41646469          DCB      "Additional Sense Code : %x",0
0001ec  74696f6e
0001f0  616c2053
0001f4  656e7365
0001f8  20436f64
0001fc  65203a20
000200  257800  
000203  00                DCB      0
                  |L8.516|
000204  41646469          DCB      "Additional Sense Code Qualifier: %x",0
000208  74696f6e
00020c  616c2053
000210  656e7365
000214  20436f64
000218  65205175
00021c  616c6966
000220  6965723a
000224  20257800
                  |L8.552|
000228  4d534320          DCB      "MSC Device NOT ready",0
00022c  44657669
000230  6365204e
000234  4f542072
000238  65616479
00023c  00      
00023d  00                DCB      0
00023e  00                DCB      0
00023f  00                DCB      0

                          AREA ||i.USBH_MSC_Read||, CODE, READONLY, ALIGN=1

                  USBH_MSC_Read PROC
;;;755      */
;;;756    USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;757                                     uint8_t lun,
;;;758                                     uint32_t address,
;;;759                                     uint8_t *pbuf,
;;;760                                     uint32_t length)
;;;761    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
00000c  9f0a              LDR      r7,[sp,#0x28]
;;;762      uint32_t timeout;
;;;763      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000e  f8d4037c          LDR      r0,[r4,#0x37c]
000012  69c5              LDR      r5,[r0,#0x1c]
;;;764    
;;;765      if ((phost->device.is_connected == 0U) ||
000014  f8940320          LDRB     r0,[r4,#0x320]
000018  b160              CBZ      r0,|L9.52|
;;;766          (phost->gState != HOST_CLASS) ||
00001a  7820              LDRB     r0,[r4,#0]
00001c  280b              CMP      r0,#0xb
00001e  d109              BNE      |L9.52|
;;;767          (MSC_Handle->unit[lun].state != MSC_IDLE))
000020  eb060086          ADD      r0,r6,r6,LSL #2
000024  eb0001c6          ADD      r1,r0,r6,LSL #3
000028  f1050090          ADD      r0,r5,#0x90
00002c  f8100021          LDRB     r0,[r0,r1,LSL #2]
000030  2801              CMP      r0,#1
000032  d002              BEQ      |L9.58|
                  |L9.52|
;;;768      {
;;;769        return  USBH_FAIL;
000034  2002              MOVS     r0,#2
                  |L9.54|
;;;770      }
;;;771    
;;;772      MSC_Handle->state = MSC_READ;
;;;773      MSC_Handle->unit[lun].state = MSC_READ;
;;;774      MSC_Handle->rw_lun = lun;
;;;775    
;;;776      USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
;;;777    
;;;778      timeout = phost->Timer;
;;;779    
;;;780      while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
;;;781      {
;;;782        if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
;;;783        {
;;;784          MSC_Handle->state = MSC_IDLE;
;;;785          return USBH_FAIL;
;;;786        }
;;;787      }
;;;788      MSC_Handle->state = MSC_IDLE;
;;;789    
;;;790      return USBH_OK;
;;;791    }
000036  e8bd8ff8          POP      {r3-r11,pc}
                  |L9.58|
00003a  2006              MOVS     r0,#6                 ;772
00003c  7328              STRB     r0,[r5,#0xc]          ;772
00003e  2106              MOVS     r1,#6                 ;773
000040  eb060086          ADD      r0,r6,r6,LSL #2       ;773
000044  eb0002c6          ADD      r2,r0,r6,LSL #3       ;773
000048  f1050090          ADD      r0,r5,#0x90           ;773
00004c  f8001022          STRB     r1,[r0,r2,LSL #2]     ;773
000050  f8a560fa          STRH     r6,[r5,#0xfa]         ;774
000054  4653              MOV      r3,r10                ;776
000056  464a              MOV      r2,r9                 ;776
000058  4631              MOV      r1,r6                 ;776
00005a  4620              MOV      r0,r4                 ;776
00005c  9700              STR      r7,[sp,#0]            ;776
00005e  f7fffffe          BL       USBH_MSC_SCSI_Read
000062  f8d483c4          LDR      r8,[r4,#0x3c4]        ;778
000066  e00f              B        |L9.136|
                  |L9.104|
000068  f8d403c4          LDR      r0,[r4,#0x3c4]        ;782
00006c  eba00108          SUB      r1,r0,r8              ;782
000070  f2427010          MOV      r0,#0x2710            ;782
000074  4378              MULS     r0,r7,r0              ;782
000076  4281              CMP      r1,r0                 ;782
000078  d802              BHI      |L9.128|
00007a  f8940320          LDRB     r0,[r4,#0x320]        ;782
00007e  b918              CBNZ     r0,|L9.136|
                  |L9.128|
000080  2001              MOVS     r0,#1                 ;784
000082  7328              STRB     r0,[r5,#0xc]          ;784
000084  2002              MOVS     r0,#2                 ;785
000086  e7d6              B        |L9.54|
                  |L9.136|
000088  4631              MOV      r1,r6                 ;780
00008a  4620              MOV      r0,r4                 ;780
00008c  f7fffffe          BL       USBH_MSC_RdWrProcess
000090  2801              CMP      r0,#1                 ;780
000092  d0e9              BEQ      |L9.104|
000094  2001              MOVS     r0,#1                 ;788
000096  7328              STRB     r0,[r5,#0xc]          ;788
000098  2000              MOVS     r0,#0                 ;790
00009a  e7cc              B        |L9.54|
;;;792    
                          ENDP


                          AREA ||i.USBH_MSC_SOFProcess||, CODE, READONLY, ALIGN=1

                  USBH_MSC_SOFProcess PROC
;;;530      */
;;;531    static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
000000  4601              MOV      r1,r0
;;;532    {
;;;533      /* Prevent unused argument(s) compilation warning */
;;;534      UNUSED(phost);
;;;535    
;;;536      return USBH_OK;
000002  2000              MOVS     r0,#0
;;;537    }
000004  4770              BX       lr
;;;538    /**
                          ENDP


                          AREA ||i.USBH_MSC_UnitIsReady||, CODE, READONLY, ALIGN=1

                  USBH_MSC_UnitIsReady PROC
;;;707      */
;;;708    uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
000000  b530              PUSH     {r4,r5,lr}
;;;709    {
000002  4602              MOV      r2,r0
;;;710      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000004  f8d2437c          LDR      r4,[r2,#0x37c]
000008  69e3              LDR      r3,[r4,#0x1c]
;;;711      uint8_t res;
;;;712    
;;;713      if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
00000a  7814              LDRB     r4,[r2,#0]
00000c  2c0b              CMP      r4,#0xb
00000e  d10b              BNE      |L11.40|
000010  eb010481          ADD      r4,r1,r1,LSL #2
000014  eb0405c1          ADD      r5,r4,r1,LSL #3
000018  f1030490          ADD      r4,r3,#0x90
00001c  eb040485          ADD      r4,r4,r5,LSL #2
000020  7864              LDRB     r4,[r4,#1]
000022  b90c              CBNZ     r4,|L11.40|
;;;714      {
;;;715        res = 1U;
000024  2001              MOVS     r0,#1
000026  e000              B        |L11.42|
                  |L11.40|
;;;716      }
;;;717      else
;;;718      {
;;;719        res = 0U;
000028  2000              MOVS     r0,#0
                  |L11.42|
;;;720      }
;;;721    
;;;722      return res;
;;;723    }
00002a  bd30              POP      {r4,r5,pc}
;;;724    
                          ENDP


                          AREA ||i.USBH_MSC_Write||, CODE, READONLY, ALIGN=1

                  USBH_MSC_Write PROC
;;;802      */
;;;803    USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;804                                      uint8_t lun,
;;;805                                      uint32_t address,
;;;806                                      uint8_t *pbuf,
;;;807                                      uint32_t length)
;;;808    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
00000c  9f0a              LDR      r7,[sp,#0x28]
;;;809      uint32_t timeout;
;;;810      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000e  f8d4037c          LDR      r0,[r4,#0x37c]
000012  69c5              LDR      r5,[r0,#0x1c]
;;;811    
;;;812      if ((phost->device.is_connected == 0U) ||
000014  f8940320          LDRB     r0,[r4,#0x320]
000018  b160              CBZ      r0,|L12.52|
;;;813          (phost->gState != HOST_CLASS) ||
00001a  7820              LDRB     r0,[r4,#0]
00001c  280b              CMP      r0,#0xb
00001e  d109              BNE      |L12.52|
;;;814          (MSC_Handle->unit[lun].state != MSC_IDLE))
000020  eb060086          ADD      r0,r6,r6,LSL #2
000024  eb0001c6          ADD      r1,r0,r6,LSL #3
000028  f1050090          ADD      r0,r5,#0x90
00002c  f8100021          LDRB     r0,[r0,r1,LSL #2]
000030  2801              CMP      r0,#1
000032  d002              BEQ      |L12.58|
                  |L12.52|
;;;815      {
;;;816        return  USBH_FAIL;
000034  2002              MOVS     r0,#2
                  |L12.54|
;;;817      }
;;;818    
;;;819      MSC_Handle->state = MSC_WRITE;
;;;820      MSC_Handle->unit[lun].state = MSC_WRITE;
;;;821      MSC_Handle->rw_lun = lun;
;;;822    
;;;823      USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
;;;824    
;;;825      timeout = phost->Timer;
;;;826      while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
;;;827      {
;;;828        if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
;;;829        {
;;;830          MSC_Handle->state = MSC_IDLE;
;;;831          return USBH_FAIL;
;;;832        }
;;;833      }
;;;834      MSC_Handle->state = MSC_IDLE;
;;;835      return USBH_OK;
;;;836    }
000036  e8bd8ff8          POP      {r3-r11,pc}
                  |L12.58|
00003a  2007              MOVS     r0,#7                 ;819
00003c  7328              STRB     r0,[r5,#0xc]          ;819
00003e  2107              MOVS     r1,#7                 ;820
000040  eb060086          ADD      r0,r6,r6,LSL #2       ;820
000044  eb0002c6          ADD      r2,r0,r6,LSL #3       ;820
000048  f1050090          ADD      r0,r5,#0x90           ;820
00004c  f8001022          STRB     r1,[r0,r2,LSL #2]     ;820
000050  f8a560fa          STRH     r6,[r5,#0xfa]         ;821
000054  4653              MOV      r3,r10                ;823
000056  464a              MOV      r2,r9                 ;823
000058  4631              MOV      r1,r6                 ;823
00005a  4620              MOV      r0,r4                 ;823
00005c  9700              STR      r7,[sp,#0]            ;823
00005e  f7fffffe          BL       USBH_MSC_SCSI_Write
000062  f8d483c4          LDR      r8,[r4,#0x3c4]        ;825
000066  e00f              B        |L12.136|
                  |L12.104|
000068  f8d403c4          LDR      r0,[r4,#0x3c4]        ;828
00006c  eba00108          SUB      r1,r0,r8              ;828
000070  f2427010          MOV      r0,#0x2710            ;828
000074  4378              MULS     r0,r7,r0              ;828
000076  4281              CMP      r1,r0                 ;828
000078  d802              BHI      |L12.128|
00007a  f8940320          LDRB     r0,[r4,#0x320]        ;828
00007e  b918              CBNZ     r0,|L12.136|
                  |L12.128|
000080  2001              MOVS     r0,#1                 ;830
000082  7328              STRB     r0,[r5,#0xc]          ;830
000084  2002              MOVS     r0,#2                 ;831
000086  e7d6              B        |L12.54|
                  |L12.136|
000088  4631              MOV      r1,r6                 ;826
00008a  4620              MOV      r0,r4                 ;826
00008c  f7fffffe          BL       USBH_MSC_RdWrProcess
000090  2801              CMP      r0,#1                 ;826
000092  d0e9              BEQ      |L12.104|
000094  2001              MOVS     r0,#1                 ;834
000096  7328              STRB     r0,[r5,#0xc]          ;834
000098  2000              MOVS     r0,#0                 ;835
00009a  e7cc              B        |L12.54|
;;;837    
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d534300          DCB      "MSC",0

                          AREA ||.data||, DATA, ALIGN=2

                  USBH_msc
                          DCD      ||.conststring||
000004  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      USBH_MSC_InterfaceInit
                          DCD      USBH_MSC_InterfaceDeInit
                          DCD      USBH_MSC_ClassRequest
                          DCD      USBH_MSC_Process
                          DCD      USBH_MSC_SOFProcess
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usbh_msc_c_USBH_msc____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___10_usbh_msc_c_USBH_msc____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usbh_msc_c_USBH_msc____REVSH|
#line 478
|__asm___10_usbh_msc_c_USBH_msc____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_usbh_msc_c_USBH_msc____RRX|
#line 665
|__asm___10_usbh_msc_c_USBH_msc____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
