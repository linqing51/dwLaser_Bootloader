; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\stm32f4xx_hal_adc_ex.o --asm_dir=./ --list_dir=--list --depend=mcu_application\stm32f4xx_hal_adc_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\stm32f4xx_hal_adc_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.c]
                          THUMB

                          AREA ||i.ADC_MultiModeDMAConvCplt||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAConvCplt PROC
;;;997      */
;;;998    static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;999    {
000002  4605              MOV      r5,r0
;;;1000     /* Retrieve ADC handle corresponding to current DMA handle */
;;;1001     ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;1002     
;;;1003     /* Update state machine on conversion status if not in error state */
;;;1004     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
000006  6c20              LDR      r0,[r4,#0x40]
000008  f0000050          AND      r0,r0,#0x50
00000c  bb50              CBNZ     r0,|L1.100|
;;;1005     {
;;;1006       /* Update ADC state machine */
;;;1007       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
00000e  6c20              LDR      r0,[r4,#0x40]
000010  f4407000          ORR      r0,r0,#0x200
000014  6420              STR      r0,[r4,#0x40]
;;;1008       
;;;1009       /* Determine whether any further conversion upcoming on group regular   */
;;;1010       /* by external trigger, continuous mode or scan sequence on going.      */
;;;1011       /* Note: On STM32F4, there is no independent flag of end of sequence.   */
;;;1012       /*       The test of scan sequence on going is done either with scan    */
;;;1013       /*       sequence disabled or with end of conversion flag set to        */
;;;1014       /*       of end of sequence.                                            */
;;;1015       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
000016  6820              LDR      r0,[r4,#0]
000018  6880              LDR      r0,[r0,#8]
00001a  f0005040          AND      r0,r0,#0x30000000
00001e  b9e8              CBNZ     r0,|L1.92|
;;;1016          (hadc->Init.ContinuousConvMode == DISABLE)            &&
000020  7e20              LDRB     r0,[r4,#0x18]
000022  b9d8              CBNZ     r0,|L1.92|
;;;1017          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
000024  6820              LDR      r0,[r4,#0]
000026  6ac0              LDR      r0,[r0,#0x2c]
000028  f4000070          AND      r0,r0,#0xf00000
00002c  b120              CBZ      r0,|L1.56|
;;;1018           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
00002e  6820              LDR      r0,[r4,#0]
000030  6880              LDR      r0,[r0,#8]
000032  f4006080          AND      r0,r0,#0x400
000036  b988              CBNZ     r0,|L1.92|
                  |L1.56|
;;;1019       {
;;;1020         /* Disable ADC end of single conversion interrupt on group regular */
;;;1021         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
;;;1022         /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
;;;1023         /* by overrun IRQ process below.                                      */
;;;1024         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  f0200020          BIC      r0,r0,#0x20
000040  6821              LDR      r1,[r4,#0]
000042  6048              STR      r0,[r1,#4]
;;;1025         
;;;1026         /* Set ADC state */
;;;1027         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
000044  6c20              LDR      r0,[r4,#0x40]
000046  f4207080          BIC      r0,r0,#0x100
00004a  6420              STR      r0,[r4,#0x40]
;;;1028         
;;;1029         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
00004c  6c20              LDR      r0,[r4,#0x40]
00004e  f4005080          AND      r0,r0,#0x1000
000052  b918              CBNZ     r0,|L1.92|
;;;1030         {
;;;1031           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
000054  6c20              LDR      r0,[r4,#0x40]
000056  f0400001          ORR      r0,r0,#1
00005a  6420              STR      r0,[r4,#0x40]
                  |L1.92|
;;;1032         }
;;;1033       }
;;;1034       
;;;1035       /* Conversion complete callback */
;;;1036       HAL_ADC_ConvCpltCallback(hadc);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       HAL_ADC_ConvCpltCallback
000062  e003              B        |L1.108|
                  |L1.100|
;;;1037     }
;;;1038     else
;;;1039     {
;;;1040       /* Call DMA error callback */
;;;1041       hadc->DMA_Handle->XferErrorCallback(hdma);
000064  6ba0              LDR      r0,[r4,#0x38]
000066  6cc1              LDR      r1,[r0,#0x4c]
000068  4628              MOV      r0,r5
00006a  4788              BLX      r1
                  |L1.108|
;;;1042     }
;;;1043   }
00006c  bd70              POP      {r4-r6,pc}
;;;1044   
                          ENDP


                          AREA ||i.ADC_MultiModeDMAError||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAError PROC
;;;1063     */
;;;1064   static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;1065   {
000002  4605              MOV      r5,r0
;;;1066       ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;1067       hadc->State= HAL_ADC_STATE_ERROR_DMA;
000006  2040              MOVS     r0,#0x40
000008  6420              STR      r0,[r4,#0x40]
;;;1068       /* Set ADC error code to DMA error */
;;;1069       hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
00000a  6c60              LDR      r0,[r4,#0x44]
00000c  f0400004          ORR      r0,r0,#4
000010  6460              STR      r0,[r4,#0x44]
;;;1070       HAL_ADC_ErrorCallback(hadc); 
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       HAL_ADC_ErrorCallback
;;;1071   }
000018  bd70              POP      {r4-r6,pc}
;;;1072   
                          ENDP


                          AREA ||i.ADC_MultiModeDMAHalfConvCplt||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAHalfConvCplt PROC
;;;1050     */
;;;1051   static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;1052   {
000002  4604              MOV      r4,r0
;;;1053       ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;1054       /* Conversion complete callback */
;;;1055       HAL_ADC_ConvHalfCpltCallback(hadc); 
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_ADC_ConvHalfCpltCallback
;;;1056   }
00000c  bd70              POP      {r4-r6,pc}
;;;1057   
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedConfigChannel PROC
;;;786      */
;;;787    HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
000000  b530              PUSH     {r4,r5,lr}
;;;788    {
000002  4602              MOV      r2,r0
;;;789      
;;;790    #ifdef USE_FULL_ASSERT  
;;;791      uint32_t tmp = 0U;
;;;792      
;;;793    #endif /* USE_FULL_ASSERT  */
;;;794    
;;;795      ADC_Common_TypeDef *tmpADC_Common;
;;;796    
;;;797      /* Check the parameters */
;;;798      assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
;;;799      assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
;;;800      assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
;;;801      assert_param(IS_ADC_EXT_INJEC_TRIG(sConfigInjected->ExternalTrigInjecConv));
;;;802      assert_param(IS_ADC_INJECTED_LENGTH(sConfigInjected->InjectedNbrOfConversion));
;;;803      assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
;;;804      assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
;;;805    
;;;806    #ifdef USE_FULL_ASSERT
;;;807      tmp = ADC_GET_RESOLUTION(hadc);
;;;808      assert_param(IS_ADC_RANGE(tmp, sConfigInjected->InjectedOffset));
;;;809    #endif /* USE_FULL_ASSERT  */
;;;810    
;;;811      if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
000004  4c86              LDR      r4,|L4.544|
000006  6988              LDR      r0,[r1,#0x18]
000008  42a0              CMP      r0,r4
00000a  d000              BEQ      |L4.14|
;;;812      {
;;;813        assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
00000c  bf00              NOP      
                  |L4.14|
;;;814      }
;;;815    
;;;816      /* Process locked */
;;;817      __HAL_LOCK(hadc);
00000e  bf00              NOP      
000010  f892003c          LDRB     r0,[r2,#0x3c]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L4.28|
000018  2002              MOVS     r0,#2
                  |L4.26|
;;;818      
;;;819      /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
;;;820      if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
;;;821      {
;;;822        /* Clear the old sample time */
;;;823        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
;;;824        
;;;825        /* Set the new sample time */
;;;826        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
;;;827      }
;;;828      else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;829      {
;;;830        /* Clear the old sample time */
;;;831        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
;;;832        
;;;833        /* Set the new sample time */
;;;834        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
;;;835      }
;;;836      
;;;837      /*---------------------------- ADCx JSQR Configuration -----------------*/
;;;838      hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
;;;839      hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
;;;840      
;;;841      /* Rank configuration */
;;;842      
;;;843      /* Clear the old SQx bits for the selected rank */
;;;844      hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
;;;845       
;;;846      /* Set the SQx bits for the selected rank */
;;;847      hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
;;;848    
;;;849      /* Enable external trigger if trigger selection is different of software  */
;;;850      /* start.                                                                 */
;;;851      /* Note: This configuration keeps the hardware feature of parameter       */
;;;852      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
;;;853      /*       software start.                                                  */ 
;;;854      if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
;;;855      {  
;;;856        /* Select external trigger to start conversion */
;;;857        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
;;;858        hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
;;;859        
;;;860        /* Select external trigger polarity */
;;;861        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
;;;862        hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
;;;863      }
;;;864      else
;;;865      {
;;;866        /* Reset the external trigger */
;;;867        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
;;;868        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
;;;869      }
;;;870      
;;;871      if (sConfigInjected->AutoInjectedConv != DISABLE)
;;;872      {
;;;873        /* Enable the selected ADC automatic injected group conversion */
;;;874        hadc->Instance->CR1 |= ADC_CR1_JAUTO;
;;;875      }
;;;876      else
;;;877      {
;;;878        /* Disable the selected ADC automatic injected group conversion */
;;;879        hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
;;;880      }
;;;881      
;;;882      if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
;;;883      {
;;;884        /* Enable the selected ADC injected discontinuous mode */
;;;885        hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
;;;886      }
;;;887      else
;;;888      {
;;;889        /* Disable the selected ADC injected discontinuous mode */
;;;890        hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
;;;891      }
;;;892      
;;;893      switch(sConfigInjected->InjectedRank)
;;;894      {
;;;895        case 1U:
;;;896          /* Set injected channel 1 offset */
;;;897          hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
;;;898          hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
;;;899          break;
;;;900        case 2U:
;;;901          /* Set injected channel 2 offset */
;;;902          hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
;;;903          hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
;;;904          break;
;;;905        case 3U:
;;;906          /* Set injected channel 3 offset */
;;;907          hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
;;;908          hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
;;;909          break;
;;;910        default:
;;;911          /* Set injected channel 4 offset */
;;;912          hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
;;;913          hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
;;;914          break;
;;;915      }
;;;916    
;;;917      /* Pointer to the common control register to which is belonging hadc    */
;;;918      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;919      /* control register)                                                    */
;;;920        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;921    
;;;922      /* if ADC1 Channel_18 is selected enable VBAT Channel */
;;;923      if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
;;;924      {
;;;925        /* Enable the VBAT channel*/
;;;926        tmpADC_Common->CCR |= ADC_CCR_VBATE;
;;;927      }
;;;928      
;;;929      /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
;;;930      if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
;;;931      {
;;;932        /* Enable the TSVREFE channel*/
;;;933        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
;;;934      }
;;;935      
;;;936      /* Process unlocked */
;;;937      __HAL_UNLOCK(hadc);
;;;938      
;;;939      /* Return function status */
;;;940      return HAL_OK;
;;;941    }
00001a  bd30              POP      {r4,r5,pc}
                  |L4.28|
00001c  2001              MOVS     r0,#1                 ;817
00001e  f882003c          STRB     r0,[r2,#0x3c]         ;817
000022  bf00              NOP                            ;817
000024  6808              LDR      r0,[r1,#0]            ;820
000026  2809              CMP      r0,#9                 ;820
000028  d916              BLS      |L4.88|
00002a  6810              LDR      r0,[r2,#0]            ;823
00002c  68c0              LDR      r0,[r0,#0xc]          ;823
00002e  780c              LDRB     r4,[r1,#0]            ;823
000030  3c0a              SUBS     r4,r4,#0xa            ;823
000032  eb040544          ADD      r5,r4,r4,LSL #1       ;823
000036  2407              MOVS     r4,#7                 ;823
000038  40ac              LSLS     r4,r4,r5              ;823
00003a  43a0              BICS     r0,r0,r4              ;823
00003c  6814              LDR      r4,[r2,#0]            ;823
00003e  60e0              STR      r0,[r4,#0xc]          ;823
000040  780c              LDRB     r4,[r1,#0]            ;826
000042  3c0a              SUBS     r4,r4,#0xa            ;826
000044  eb040444          ADD      r4,r4,r4,LSL #1       ;826
000048  6888              LDR      r0,[r1,#8]            ;826
00004a  40a0              LSLS     r0,r0,r4              ;826
00004c  6814              LDR      r4,[r2,#0]            ;826
00004e  68e4              LDR      r4,[r4,#0xc]          ;826
000050  4320              ORRS     r0,r0,r4              ;826
000052  6814              LDR      r4,[r2,#0]            ;826
000054  60e0              STR      r0,[r4,#0xc]          ;826
000056  e013              B        |L4.128|
                  |L4.88|
000058  6810              LDR      r0,[r2,#0]            ;831
00005a  6900              LDR      r0,[r0,#0x10]         ;831
00005c  780c              LDRB     r4,[r1,#0]            ;831
00005e  eb040544          ADD      r5,r4,r4,LSL #1       ;831
000062  2407              MOVS     r4,#7                 ;831
000064  40ac              LSLS     r4,r4,r5              ;831
000066  43a0              BICS     r0,r0,r4              ;831
000068  6814              LDR      r4,[r2,#0]            ;831
00006a  6120              STR      r0,[r4,#0x10]         ;831
00006c  780c              LDRB     r4,[r1,#0]            ;834
00006e  eb040444          ADD      r4,r4,r4,LSL #1       ;834
000072  6888              LDR      r0,[r1,#8]            ;834
000074  40a0              LSLS     r0,r0,r4              ;834
000076  6814              LDR      r4,[r2,#0]            ;834
000078  6924              LDR      r4,[r4,#0x10]         ;834
00007a  4320              ORRS     r0,r0,r4              ;834
00007c  6814              LDR      r4,[r2,#0]            ;834
00007e  6120              STR      r0,[r4,#0x10]         ;834
                  |L4.128|
000080  6810              LDR      r0,[r2,#0]            ;838
000082  6b80              LDR      r0,[r0,#0x38]         ;838
000084  f4201040          BIC      r0,r0,#0x300000       ;838
000088  6814              LDR      r4,[r2,#0]            ;838
00008a  63a0              STR      r0,[r4,#0x38]         ;838
00008c  6810              LDR      r0,[r2,#0]            ;839
00008e  6b84              LDR      r4,[r0,#0x38]         ;839
000090  8a08              LDRH     r0,[r1,#0x10]         ;839
000092  1e40              SUBS     r0,r0,#1              ;839
000094  ea445000          ORR      r0,r4,r0,LSL #20      ;839
000098  6814              LDR      r4,[r2,#0]            ;839
00009a  63a0              STR      r0,[r4,#0x38]         ;839
00009c  7908              LDRB     r0,[r1,#4]            ;844
00009e  1cc0              ADDS     r0,r0,#3              ;844
0000a0  7c0c              LDRB     r4,[r1,#0x10]         ;844
0000a2  1b00              SUBS     r0,r0,r4              ;844
0000a4  eb000480          ADD      r4,r0,r0,LSL #2       ;844
0000a8  201f              MOVS     r0,#0x1f              ;844
0000aa  40a0              LSLS     r0,r0,r4              ;844
0000ac  6814              LDR      r4,[r2,#0]            ;844
0000ae  6ba4              LDR      r4,[r4,#0x38]         ;844
0000b0  4384              BICS     r4,r4,r0              ;844
0000b2  6810              LDR      r0,[r2,#0]            ;844
0000b4  6384              STR      r4,[r0,#0x38]         ;844
0000b6  7908              LDRB     r0,[r1,#4]            ;847
0000b8  1cc0              ADDS     r0,r0,#3              ;847
0000ba  7c0c              LDRB     r4,[r1,#0x10]         ;847
0000bc  1b00              SUBS     r0,r0,r4              ;847
0000be  eb000480          ADD      r4,r0,r0,LSL #2       ;847
0000c2  8808              LDRH     r0,[r1,#0]            ;847
0000c4  b280              UXTH     r0,r0                 ;847
0000c6  40a0              LSLS     r0,r0,r4              ;847
0000c8  6814              LDR      r4,[r2,#0]            ;847
0000ca  6ba4              LDR      r4,[r4,#0x38]         ;847
0000cc  4320              ORRS     r0,r0,r4              ;847
0000ce  6814              LDR      r4,[r2,#0]            ;847
0000d0  63a0              STR      r0,[r4,#0x38]         ;847
0000d2  4c53              LDR      r4,|L4.544|
0000d4  6988              LDR      r0,[r1,#0x18]         ;854
0000d6  42a0              CMP      r0,r4                 ;854
0000d8  d018              BEQ      |L4.268|
0000da  6810              LDR      r0,[r2,#0]            ;857
0000dc  6880              LDR      r0,[r0,#8]            ;857
0000de  f4202070          BIC      r0,r0,#0xf0000        ;857
0000e2  6814              LDR      r4,[r2,#0]            ;857
0000e4  60a0              STR      r0,[r4,#8]            ;857
0000e6  6810              LDR      r0,[r2,#0]            ;858
0000e8  6880              LDR      r0,[r0,#8]            ;858
0000ea  698c              LDR      r4,[r1,#0x18]         ;858
0000ec  4320              ORRS     r0,r0,r4              ;858
0000ee  6814              LDR      r4,[r2,#0]            ;858
0000f0  60a0              STR      r0,[r4,#8]            ;858
0000f2  6810              LDR      r0,[r2,#0]            ;861
0000f4  6880              LDR      r0,[r0,#8]            ;861
0000f6  f4201040          BIC      r0,r0,#0x300000       ;861
0000fa  6814              LDR      r4,[r2,#0]            ;861
0000fc  60a0              STR      r0,[r4,#8]            ;861
0000fe  6810              LDR      r0,[r2,#0]            ;862
000100  6880              LDR      r0,[r0,#8]            ;862
000102  69cc              LDR      r4,[r1,#0x1c]         ;862
000104  4320              ORRS     r0,r0,r4              ;862
000106  6814              LDR      r4,[r2,#0]            ;862
000108  60a0              STR      r0,[r4,#8]            ;862
00010a  e00b              B        |L4.292|
                  |L4.268|
00010c  6810              LDR      r0,[r2,#0]            ;867
00010e  6880              LDR      r0,[r0,#8]            ;867
000110  f4202070          BIC      r0,r0,#0xf0000        ;867
000114  6814              LDR      r4,[r2,#0]            ;867
000116  60a0              STR      r0,[r4,#8]            ;867
000118  6810              LDR      r0,[r2,#0]            ;868
00011a  6880              LDR      r0,[r0,#8]            ;868
00011c  f4201040          BIC      r0,r0,#0x300000       ;868
000120  6814              LDR      r4,[r2,#0]            ;868
000122  60a0              STR      r0,[r4,#8]            ;868
                  |L4.292|
000124  7d48              LDRB     r0,[r1,#0x15]         ;871
000126  b130              CBZ      r0,|L4.310|
000128  6810              LDR      r0,[r2,#0]            ;874
00012a  6840              LDR      r0,[r0,#4]            ;874
00012c  f4406080          ORR      r0,r0,#0x400          ;874
000130  6814              LDR      r4,[r2,#0]            ;874
000132  6060              STR      r0,[r4,#4]            ;874
000134  e005              B        |L4.322|
                  |L4.310|
000136  6810              LDR      r0,[r2,#0]            ;879
000138  6840              LDR      r0,[r0,#4]            ;879
00013a  f4206080          BIC      r0,r0,#0x400          ;879
00013e  6814              LDR      r4,[r2,#0]            ;879
000140  6060              STR      r0,[r4,#4]            ;879
                  |L4.322|
000142  7d08              LDRB     r0,[r1,#0x14]         ;882
000144  b130              CBZ      r0,|L4.340|
000146  6810              LDR      r0,[r2,#0]            ;885
000148  6840              LDR      r0,[r0,#4]            ;885
00014a  f4405080          ORR      r0,r0,#0x1000         ;885
00014e  6814              LDR      r4,[r2,#0]            ;885
000150  6060              STR      r0,[r4,#4]            ;885
000152  e005              B        |L4.352|
                  |L4.340|
000154  6810              LDR      r0,[r2,#0]            ;890
000156  6840              LDR      r0,[r0,#4]            ;890
000158  f4205080          BIC      r0,r0,#0x1000         ;890
00015c  6814              LDR      r4,[r2,#0]            ;890
00015e  6060              STR      r0,[r4,#4]            ;890
                  |L4.352|
000160  6848              LDR      r0,[r1,#4]            ;893
000162  2801              CMP      r0,#1                 ;893
000164  d004              BEQ      |L4.368|
000166  2802              CMP      r0,#2                 ;893
000168  d00f              BEQ      |L4.394|
00016a  2803              CMP      r0,#3                 ;893
00016c  d127              BNE      |L4.446|
00016e  e019              B        |L4.420|
                  |L4.368|
000170  6810              LDR      r0,[r2,#0]            ;897
000172  6940              LDR      r0,[r0,#0x14]         ;897
000174  f36f000b          BFC      r0,#0,#12             ;897
000178  6814              LDR      r4,[r2,#0]            ;897
00017a  6160              STR      r0,[r4,#0x14]         ;897
00017c  6810              LDR      r0,[r2,#0]            ;898
00017e  6940              LDR      r0,[r0,#0x14]         ;898
000180  68cc              LDR      r4,[r1,#0xc]          ;898
000182  4320              ORRS     r0,r0,r4              ;898
000184  6814              LDR      r4,[r2,#0]            ;898
000186  6160              STR      r0,[r4,#0x14]         ;898
000188  e026              B        |L4.472|
                  |L4.394|
00018a  6810              LDR      r0,[r2,#0]            ;902
00018c  6980              LDR      r0,[r0,#0x18]         ;902
00018e  f36f000b          BFC      r0,#0,#12             ;902
000192  6814              LDR      r4,[r2,#0]            ;902
000194  61a0              STR      r0,[r4,#0x18]         ;902
000196  6810              LDR      r0,[r2,#0]            ;903
000198  6980              LDR      r0,[r0,#0x18]         ;903
00019a  68cc              LDR      r4,[r1,#0xc]          ;903
00019c  4320              ORRS     r0,r0,r4              ;903
00019e  6814              LDR      r4,[r2,#0]            ;903
0001a0  61a0              STR      r0,[r4,#0x18]         ;903
0001a2  e019              B        |L4.472|
                  |L4.420|
0001a4  6810              LDR      r0,[r2,#0]            ;907
0001a6  69c0              LDR      r0,[r0,#0x1c]         ;907
0001a8  f36f000b          BFC      r0,#0,#12             ;907
0001ac  6814              LDR      r4,[r2,#0]            ;907
0001ae  61e0              STR      r0,[r4,#0x1c]         ;907
0001b0  6810              LDR      r0,[r2,#0]            ;908
0001b2  69c0              LDR      r0,[r0,#0x1c]         ;908
0001b4  68cc              LDR      r4,[r1,#0xc]          ;908
0001b6  4320              ORRS     r0,r0,r4              ;908
0001b8  6814              LDR      r4,[r2,#0]            ;908
0001ba  61e0              STR      r0,[r4,#0x1c]         ;908
0001bc  e00c              B        |L4.472|
                  |L4.446|
0001be  6810              LDR      r0,[r2,#0]            ;912
0001c0  6a00              LDR      r0,[r0,#0x20]         ;912
0001c2  f36f000b          BFC      r0,#0,#12             ;912
0001c6  6814              LDR      r4,[r2,#0]            ;912
0001c8  6220              STR      r0,[r4,#0x20]         ;912
0001ca  6810              LDR      r0,[r2,#0]            ;913
0001cc  6a00              LDR      r0,[r0,#0x20]         ;913
0001ce  68cc              LDR      r4,[r1,#0xc]          ;913
0001d0  4320              ORRS     r0,r0,r4              ;913
0001d2  6814              LDR      r4,[r2,#0]            ;913
0001d4  6220              STR      r0,[r4,#0x20]         ;913
0001d6  bf00              NOP                            ;914
                  |L4.472|
0001d8  bf00              NOP                            ;899
0001da  4b12              LDR      r3,|L4.548|
0001dc  4c12              LDR      r4,|L4.552|
0001de  6810              LDR      r0,[r2,#0]            ;923
0001e0  42a0              CMP      r0,r4                 ;923
0001e2  d106              BNE      |L4.498|
0001e4  6808              LDR      r0,[r1,#0]            ;923
0001e6  2812              CMP      r0,#0x12              ;923
0001e8  d103              BNE      |L4.498|
0001ea  6858              LDR      r0,[r3,#4]            ;926
0001ec  f4400080          ORR      r0,r0,#0x400000       ;926
0001f0  6058              STR      r0,[r3,#4]            ;926
                  |L4.498|
0001f2  4c0d              LDR      r4,|L4.552|
0001f4  6810              LDR      r0,[r2,#0]            ;930
0001f6  42a0              CMP      r0,r4                 ;930
0001f8  d10a              BNE      |L4.528|
0001fa  4c0c              LDR      r4,|L4.556|
0001fc  6808              LDR      r0,[r1,#0]            ;930
0001fe  42a0              CMP      r0,r4                 ;930
000200  d002              BEQ      |L4.520|
000202  6808              LDR      r0,[r1,#0]            ;930
000204  2811              CMP      r0,#0x11              ;930
000206  d103              BNE      |L4.528|
                  |L4.520|
000208  6858              LDR      r0,[r3,#4]            ;933
00020a  f4400000          ORR      r0,r0,#0x800000       ;933
00020e  6058              STR      r0,[r3,#4]            ;933
                  |L4.528|
000210  bf00              NOP                            ;937
000212  2000              MOVS     r0,#0                 ;937
000214  f882003c          STRB     r0,[r2,#0x3c]         ;937
000218  bf00              NOP                            ;937
00021a  bf00              NOP                            ;940
00021c  e6fd              B        |L4.26|
;;;942    
                          ENDP

00021e  0000              DCW      0x0000
                  |L4.544|
                          DCD      0x000f0001
                  |L4.548|
                          DCD      0x40012300
                  |L4.552|
                          DCD      0x40012000
                  |L4.556|
                          DCD      0x10000012

                          AREA ||i.HAL_ADCEx_InjectedConvCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedConvCpltCallback PROC
;;;769      */
;;;770    __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
000000  4770              BX       lr
;;;771    {
;;;772      /* Prevent unused argument(s) compilation warning */
;;;773      UNUSED(hadc);
;;;774      /* NOTE : This function Should not be modified, when the callback is needed,
;;;775                the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
;;;776       */
;;;777    }
;;;778    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedGetValue||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedGetValue PROC
;;;527      */
;;;528    uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
000000  b508              PUSH     {r3,lr}
;;;529    {
000002  4602              MOV      r2,r0
;;;530      __IO uint32_t tmp = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;531      
;;;532      /* Check the parameters */
;;;533      assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
;;;534      
;;;535      /* Clear injected group conversion flag to have similar behaviour as        */
;;;536      /* regular group: reading data register also clears end of conversion flag. */
;;;537      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
000008  1f40              SUBS     r0,r0,#5
00000a  6813              LDR      r3,[r2,#0]
00000c  6018              STR      r0,[r3,#0]
;;;538      
;;;539      /* Return the selected ADC converted value */ 
;;;540      switch(InjectedRank)
00000e  2901              CMP      r1,#1
000010  d011              BEQ      |L6.54|
000012  2902              CMP      r1,#2
000014  d00b              BEQ      |L6.46|
000016  2903              CMP      r1,#3
000018  d005              BEQ      |L6.38|
00001a  2904              CMP      r1,#4
00001c  d10f              BNE      |L6.62|
;;;541      {  
;;;542        case ADC_INJECTED_RANK_4:
;;;543        {
;;;544          tmp =  hadc->Instance->JDR4;
00001e  6810              LDR      r0,[r2,#0]
000020  6c80              LDR      r0,[r0,#0x48]
000022  9000              STR      r0,[sp,#0]
;;;545        }  
;;;546        break;
000024  e00c              B        |L6.64|
                  |L6.38|
;;;547        case ADC_INJECTED_RANK_3: 
;;;548        {  
;;;549          tmp =  hadc->Instance->JDR3;
000026  6810              LDR      r0,[r2,#0]
000028  6c40              LDR      r0,[r0,#0x44]
00002a  9000              STR      r0,[sp,#0]
;;;550        }  
;;;551        break;
00002c  e008              B        |L6.64|
                  |L6.46|
;;;552        case ADC_INJECTED_RANK_2: 
;;;553        {  
;;;554          tmp =  hadc->Instance->JDR2;
00002e  6810              LDR      r0,[r2,#0]
000030  6c00              LDR      r0,[r0,#0x40]
000032  9000              STR      r0,[sp,#0]
;;;555        }
;;;556        break;
000034  e004              B        |L6.64|
                  |L6.54|
;;;557        case ADC_INJECTED_RANK_1:
;;;558        {
;;;559          tmp =  hadc->Instance->JDR1;
000036  6810              LDR      r0,[r2,#0]
000038  6bc0              LDR      r0,[r0,#0x3c]
00003a  9000              STR      r0,[sp,#0]
;;;560        }
;;;561        break;
00003c  e000              B        |L6.64|
                  |L6.62|
;;;562        default:
;;;563        break;  
00003e  bf00              NOP      
                  |L6.64|
000040  bf00              NOP                            ;546
;;;564      }
;;;565      return tmp;
000042  9800              LDR      r0,[sp,#0]
;;;566    }
000044  bd08              POP      {r3,pc}
;;;567    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedPollForConversion||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedPollForConversion PROC
;;;398      */
;;;399    HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;401      uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;402    
;;;403      /* Get tick */ 
;;;404      tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4606              MOV      r6,r0
;;;405    
;;;406      /* Check End of conversion flag */
;;;407      while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
00000e  e010              B        |L7.50|
                  |L7.16|
;;;408      {
;;;409        /* Check for the Timeout */
;;;410        if(Timeout != HAL_MAX_DELAY)
000010  1c68              ADDS     r0,r5,#1
000012  b170              CBZ      r0,|L7.50|
;;;411        {
;;;412          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
000014  b125              CBZ      r5,|L7.32|
000016  f7fffffe          BL       HAL_GetTick
00001a  1b80              SUBS     r0,r0,r6
00001c  42a8              CMP      r0,r5
00001e  d908              BLS      |L7.50|
                  |L7.32|
;;;413          {
;;;414            hadc->State= HAL_ADC_STATE_TIMEOUT;
000020  2004              MOVS     r0,#4
000022  6420              STR      r0,[r4,#0x40]
;;;415            /* Process unlocked */
;;;416            __HAL_UNLOCK(hadc);
000024  bf00              NOP      
000026  2000              MOVS     r0,#0
000028  f884003c          STRB     r0,[r4,#0x3c]
00002c  bf00              NOP      
;;;417            return HAL_TIMEOUT;
00002e  2003              MOVS     r0,#3
                  |L7.48|
;;;418          }
;;;419        }
;;;420      }
;;;421      
;;;422      /* Clear injected group conversion flag */
;;;423      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
;;;424        
;;;425      /* Update ADC state machine */
;;;426      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
;;;427      
;;;428      /* Determine whether any further conversion upcoming on group injected      */
;;;429      /* by external trigger, continuous mode or scan sequence on going.          */
;;;430      /* Note: On STM32F4, there is no independent flag of end of sequence.       */
;;;431      /*       The test of scan sequence on going is done either with scan        */
;;;432      /*       sequence disabled or with end of conversion flag set to            */
;;;433      /*       of end of sequence.                                                */
;;;434      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
;;;435         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
;;;436          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
;;;437         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
;;;438          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
;;;439          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
;;;440      {
;;;441        /* Set ADC state */
;;;442        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
;;;443        
;;;444        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;445        { 
;;;446          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
;;;447        }
;;;448      }
;;;449      
;;;450      /* Return ADC state */
;;;451      return HAL_OK;
;;;452    }      
000030  bd70              POP      {r4-r6,pc}
                  |L7.50|
000032  6820              LDR      r0,[r4,#0]            ;407
000034  6800              LDR      r0,[r0,#0]            ;407
000036  f0000004          AND      r0,r0,#4              ;407
00003a  2804              CMP      r0,#4                 ;407
00003c  d1e8              BNE      |L7.16|
00003e  f06f000c          MVN      r0,#0xc               ;423
000042  6821              LDR      r1,[r4,#0]            ;423
000044  6008              STR      r0,[r1,#0]            ;423
000046  6c20              LDR      r0,[r4,#0x40]         ;426
000048  f4405000          ORR      r0,r0,#0x2000         ;426
00004c  6420              STR      r0,[r4,#0x40]         ;426
00004e  6820              LDR      r0,[r4,#0]            ;434
000050  6880              LDR      r0,[r0,#8]            ;434
000052  f4001040          AND      r0,r0,#0x300000       ;434
000056  bb08              CBNZ     r0,|L7.156|
000058  6820              LDR      r0,[r4,#0]            ;435
00005a  6b80              LDR      r0,[r0,#0x38]         ;435
00005c  f4001040          AND      r0,r0,#0x300000       ;435
000060  b120              CBZ      r0,|L7.108|
000062  6820              LDR      r0,[r4,#0]            ;436
000064  6880              LDR      r0,[r0,#8]            ;436
000066  f4006080          AND      r0,r0,#0x400          ;436
00006a  b9b8              CBNZ     r0,|L7.156|
                  |L7.108|
00006c  6820              LDR      r0,[r4,#0]            ;437
00006e  6840              LDR      r0,[r0,#4]            ;437
000070  f4006080          AND      r0,r0,#0x400          ;437
000074  b990              CBNZ     r0,|L7.156|
000076  6820              LDR      r0,[r4,#0]            ;438
000078  6880              LDR      r0,[r0,#8]            ;438
00007a  f0005040          AND      r0,r0,#0x30000000     ;438
00007e  b968              CBNZ     r0,|L7.156|
000080  7e20              LDRB     r0,[r4,#0x18]         ;439
000082  b958              CBNZ     r0,|L7.156|
000084  6c20              LDR      r0,[r4,#0x40]         ;442
000086  f4205080          BIC      r0,r0,#0x1000         ;442
00008a  6420              STR      r0,[r4,#0x40]         ;442
00008c  6c20              LDR      r0,[r4,#0x40]         ;444
00008e  f4007080          AND      r0,r0,#0x100          ;444
000092  b918              CBNZ     r0,|L7.156|
000094  6c20              LDR      r0,[r4,#0x40]         ;446
000096  f0400001          ORR      r0,r0,#1              ;446
00009a  6420              STR      r0,[r4,#0x40]         ;446
                  |L7.156|
00009c  2000              MOVS     r0,#0                 ;451
00009e  e7c7              B        |L7.48|
;;;453      
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedStart||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedStart PROC
;;;146      */
;;;147    HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
000000  b538              PUSH     {r3-r5,lr}
;;;148    {
000002  4601              MOV      r1,r0
;;;149      __IO uint32_t counter = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;150      uint32_t tmp1 = 0U, tmp2 = 0U;
000008  2200              MOVS     r2,#0
00000a  2300              MOVS     r3,#0
;;;151      ADC_Common_TypeDef *tmpADC_Common;
;;;152      
;;;153      /* Process locked */
;;;154      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f891003c          LDRB     r0,[r1,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L8.26|
000016  2002              MOVS     r0,#2
                  |L8.24|
;;;155      
;;;156      /* Enable the ADC peripheral */
;;;157      
;;;158      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;159         Tstab time the ADC's stabilization */
;;;160      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;161      {  
;;;162        /* Enable the Peripheral */
;;;163        __HAL_ADC_ENABLE(hadc);
;;;164        
;;;165        /* Delay for ADC stabilization time */
;;;166        /* Compute number of CPU cycles to wait for */
;;;167        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
;;;168        while(counter != 0U)
;;;169        {
;;;170          counter--;
;;;171        }
;;;172      }
;;;173      
;;;174      /* Start conversion if ADC is effectively enabled */
;;;175      if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
;;;176      {
;;;177        /* Set ADC state                                                          */
;;;178        /* - Clear state bitfield related to injected group conversion results    */
;;;179        /* - Set state bitfield related to injected operation                     */
;;;180        ADC_STATE_CLR_SET(hadc->State,
;;;181                          HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
;;;182                          HAL_ADC_STATE_INJ_BUSY);
;;;183        
;;;184        /* Check if a regular conversion is ongoing */
;;;185        /* Note: On this device, there is no ADC error code fields related to     */
;;;186        /*       conversions on group injected only. In case of conversion on     */
;;;187        /*       going on group regular, no error code is reset.                  */
;;;188        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;189        {
;;;190          /* Reset ADC all error code fields */
;;;191          ADC_CLEAR_ERRORCODE(hadc);
;;;192        }
;;;193        
;;;194        /* Process unlocked */
;;;195        /* Unlock before starting ADC conversions: in case of potential           */
;;;196        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;197        __HAL_UNLOCK(hadc);
;;;198        
;;;199        /* Clear injected group conversion flag */
;;;200        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;201        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
;;;202    
;;;203        /* Pointer to the common control register to which is belonging hadc    */
;;;204        /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;205        /* control register)                                                    */
;;;206        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;207    
;;;208        /* Check if Multimode enabled */
;;;209        if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
;;;210        {
;;;211          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;212          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;213          if(tmp1 && tmp2)
;;;214          {
;;;215            /* Enable the selected ADC software conversion for injected group */
;;;216            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;217          }
;;;218        }
;;;219        else
;;;220        {
;;;221          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;222          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;223          if((hadc->Instance == ADC1) && tmp1 && tmp2)  
;;;224          {
;;;225            /* Enable the selected ADC software conversion for injected group */
;;;226            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;227          }
;;;228        }
;;;229      }
;;;230      
;;;231      /* Return function status */
;;;232      return HAL_OK;
;;;233    }
000018  bd38              POP      {r3-r5,pc}
                  |L8.26|
00001a  2001              MOVS     r0,#1                 ;154
00001c  f881003c          STRB     r0,[r1,#0x3c]         ;154
000020  bf00              NOP                            ;154
000022  6808              LDR      r0,[r1,#0]            ;160
000024  6880              LDR      r0,[r0,#8]            ;160
000026  f0000001          AND      r0,r0,#1              ;160
00002a  b9a0              CBNZ     r0,|L8.86|
00002c  6808              LDR      r0,[r1,#0]            ;163
00002e  6880              LDR      r0,[r0,#8]            ;163
000030  f0400001          ORR      r0,r0,#1              ;163
000034  680d              LDR      r5,[r1,#0]            ;163
000036  60a8              STR      r0,[r5,#8]            ;163
000038  4830              LDR      r0,|L8.252|
00003a  6800              LDR      r0,[r0,#0]            ;167  ; SystemCoreClock
00003c  4d30              LDR      r5,|L8.256|
00003e  fbb0f0f5          UDIV     r0,r0,r5              ;167
000042  eb000040          ADD      r0,r0,r0,LSL #1       ;167
000046  9000              STR      r0,[sp,#0]            ;167
000048  e002              B        |L8.80|
                  |L8.74|
00004a  9800              LDR      r0,[sp,#0]            ;170
00004c  1e40              SUBS     r0,r0,#1              ;170
00004e  9000              STR      r0,[sp,#0]            ;170
                  |L8.80|
000050  9800              LDR      r0,[sp,#0]            ;168
000052  2800              CMP      r0,#0                 ;168
000054  d1f9              BNE      |L8.74|
                  |L8.86|
000056  6808              LDR      r0,[r1,#0]            ;175
000058  6880              LDR      r0,[r0,#8]            ;175
00005a  f0000001          AND      r0,r0,#1              ;175
00005e  2800              CMP      r0,#0                 ;175
000060  d04a              BEQ      |L8.248|
000062  6c08              LDR      r0,[r1,#0x40]         ;180
000064  f2420501          MOV      r5,#0x2001            ;180
000068  43a8              BICS     r0,r0,r5              ;180
00006a  f4405080          ORR      r0,r0,#0x1000         ;180
00006e  6408              STR      r0,[r1,#0x40]         ;180
000070  6c08              LDR      r0,[r1,#0x40]         ;188
000072  f4007080          AND      r0,r0,#0x100          ;188
000076  b908              CBNZ     r0,|L8.124|
000078  2000              MOVS     r0,#0                 ;191
00007a  6448              STR      r0,[r1,#0x44]         ;191
                  |L8.124|
00007c  bf00              NOP                            ;197
00007e  2000              MOVS     r0,#0                 ;197
000080  f881003c          STRB     r0,[r1,#0x3c]         ;197
000084  bf00              NOP                            ;197
000086  1f40              SUBS     r0,r0,#5              ;201
000088  680d              LDR      r5,[r1,#0]            ;201
00008a  6028              STR      r0,[r5,#0]            ;201
00008c  4c1d              LDR      r4,|L8.260|
00008e  6860              LDR      r0,[r4,#4]            ;209
000090  f000001f          AND      r0,r0,#0x1f           ;209
000094  b9b0              CBNZ     r0,|L8.196|
000096  6808              LDR      r0,[r1,#0]            ;211
000098  6880              LDR      r0,[r0,#8]            ;211
00009a  f4001040          AND      r0,r0,#0x300000       ;211
00009e  b908              CBNZ     r0,|L8.164|
0000a0  2001              MOVS     r0,#1                 ;211
0000a2  e000              B        |L8.166|
                  |L8.164|
0000a4  2000              MOVS     r0,#0                 ;211
                  |L8.166|
0000a6  4602              MOV      r2,r0                 ;211
0000a8  6808              LDR      r0,[r1,#0]            ;212
0000aa  6840              LDR      r0,[r0,#4]            ;212
0000ac  2501              MOVS     r5,#1                 ;212
0000ae  ea252390          BIC      r3,r5,r0,LSR #10      ;212
0000b2  b30a              CBZ      r2,|L8.248|
0000b4  b303              CBZ      r3,|L8.248|
0000b6  6808              LDR      r0,[r1,#0]            ;216
0000b8  6880              LDR      r0,[r0,#8]            ;216
0000ba  f4400080          ORR      r0,r0,#0x400000       ;216
0000be  680d              LDR      r5,[r1,#0]            ;216
0000c0  60a8              STR      r0,[r5,#8]            ;216
0000c2  e019              B        |L8.248|
                  |L8.196|
0000c4  6808              LDR      r0,[r1,#0]            ;221
0000c6  6880              LDR      r0,[r0,#8]            ;221
0000c8  f4001040          AND      r0,r0,#0x300000       ;221
0000cc  b908              CBNZ     r0,|L8.210|
0000ce  2001              MOVS     r0,#1                 ;221
0000d0  e000              B        |L8.212|
                  |L8.210|
0000d2  2000              MOVS     r0,#0                 ;221
                  |L8.212|
0000d4  4602              MOV      r2,r0                 ;221
0000d6  6808              LDR      r0,[r1,#0]            ;222
0000d8  6840              LDR      r0,[r0,#4]            ;222
0000da  2501              MOVS     r5,#1                 ;222
0000dc  ea252390          BIC      r3,r5,r0,LSR #10      ;222
0000e0  4d09              LDR      r5,|L8.264|
0000e2  6808              LDR      r0,[r1,#0]            ;223
0000e4  42a8              CMP      r0,r5                 ;223
0000e6  d107              BNE      |L8.248|
0000e8  b132              CBZ      r2,|L8.248|
0000ea  b12b              CBZ      r3,|L8.248|
0000ec  6808              LDR      r0,[r1,#0]            ;226
0000ee  6880              LDR      r0,[r0,#8]            ;226
0000f0  f4400080          ORR      r0,r0,#0x400000       ;226
0000f4  680d              LDR      r5,[r1,#0]            ;226
0000f6  60a8              STR      r0,[r5,#8]            ;226
                  |L8.248|
0000f8  2000              MOVS     r0,#0                 ;232
0000fa  e78d              B        |L8.24|
;;;234    
                          ENDP

                  |L8.252|
                          DCD      SystemCoreClock
                  |L8.256|
                          DCD      0x000f4240
                  |L8.260|
                          DCD      0x40012300
                  |L8.264|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_InjectedStart_IT||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedStart_IT PROC
;;;241      */
;;;242    HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
000000  b538              PUSH     {r3-r5,lr}
;;;243    {
000002  4601              MOV      r1,r0
;;;244      __IO uint32_t counter = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;245      uint32_t tmp1 = 0U, tmp2 = 0U;
000008  2200              MOVS     r2,#0
00000a  2300              MOVS     r3,#0
;;;246      ADC_Common_TypeDef *tmpADC_Common;
;;;247      
;;;248      /* Process locked */
;;;249      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f891003c          LDRB     r0,[r1,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L9.26|
000016  2002              MOVS     r0,#2
                  |L9.24|
;;;250      
;;;251      /* Enable the ADC peripheral */
;;;252      
;;;253      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;254         Tstab time the ADC's stabilization */
;;;255      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;256      {  
;;;257        /* Enable the Peripheral */
;;;258        __HAL_ADC_ENABLE(hadc);
;;;259        
;;;260        /* Delay for ADC stabilization time */
;;;261        /* Compute number of CPU cycles to wait for */
;;;262        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
;;;263        while(counter != 0U)
;;;264        {
;;;265          counter--;
;;;266        }
;;;267      }
;;;268      
;;;269      /* Start conversion if ADC is effectively enabled */
;;;270      if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
;;;271      {
;;;272        /* Set ADC state                                                          */
;;;273        /* - Clear state bitfield related to injected group conversion results    */
;;;274        /* - Set state bitfield related to injected operation                     */
;;;275        ADC_STATE_CLR_SET(hadc->State,
;;;276                          HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
;;;277                          HAL_ADC_STATE_INJ_BUSY);
;;;278        
;;;279        /* Check if a regular conversion is ongoing */
;;;280        /* Note: On this device, there is no ADC error code fields related to     */
;;;281        /*       conversions on group injected only. In case of conversion on     */
;;;282        /*       going on group regular, no error code is reset.                  */
;;;283        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;284        {
;;;285          /* Reset ADC all error code fields */
;;;286          ADC_CLEAR_ERRORCODE(hadc);
;;;287        }
;;;288        
;;;289        /* Process unlocked */
;;;290        /* Unlock before starting ADC conversions: in case of potential           */
;;;291        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;292        __HAL_UNLOCK(hadc);
;;;293        
;;;294        /* Clear injected group conversion flag */
;;;295        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;296        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
;;;297        
;;;298        /* Enable end of conversion interrupt for injected channels */
;;;299        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
;;;300    
;;;301        /* Pointer to the common control register to which is belonging hadc    */
;;;302        /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;303        /* control register)                                                    */
;;;304        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;305        
;;;306        /* Check if Multimode enabled */
;;;307        if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
;;;308        {
;;;309          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;310          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;311          if(tmp1 && tmp2)
;;;312          {
;;;313            /* Enable the selected ADC software conversion for injected group */
;;;314            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;315          }
;;;316        }
;;;317        else
;;;318        {
;;;319          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;320          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;321          if((hadc->Instance == ADC1) && tmp1 && tmp2)  
;;;322          {
;;;323            /* Enable the selected ADC software conversion for injected group */
;;;324            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;325          }
;;;326        }
;;;327      }
;;;328      
;;;329      /* Return function status */
;;;330      return HAL_OK;
;;;331    }
000018  bd38              POP      {r3-r5,pc}
                  |L9.26|
00001a  2001              MOVS     r0,#1                 ;249
00001c  f881003c          STRB     r0,[r1,#0x3c]         ;249
000020  bf00              NOP                            ;249
000022  6808              LDR      r0,[r1,#0]            ;255
000024  6880              LDR      r0,[r0,#8]            ;255
000026  f0000001          AND      r0,r0,#1              ;255
00002a  b9a0              CBNZ     r0,|L9.86|
00002c  6808              LDR      r0,[r1,#0]            ;258
00002e  6880              LDR      r0,[r0,#8]            ;258
000030  f0400001          ORR      r0,r0,#1              ;258
000034  680d              LDR      r5,[r1,#0]            ;258
000036  60a8              STR      r0,[r5,#8]            ;258
000038  4833              LDR      r0,|L9.264|
00003a  6800              LDR      r0,[r0,#0]            ;262  ; SystemCoreClock
00003c  4d33              LDR      r5,|L9.268|
00003e  fbb0f0f5          UDIV     r0,r0,r5              ;262
000042  eb000040          ADD      r0,r0,r0,LSL #1       ;262
000046  9000              STR      r0,[sp,#0]            ;262
000048  e002              B        |L9.80|
                  |L9.74|
00004a  9800              LDR      r0,[sp,#0]            ;265
00004c  1e40              SUBS     r0,r0,#1              ;265
00004e  9000              STR      r0,[sp,#0]            ;265
                  |L9.80|
000050  9800              LDR      r0,[sp,#0]            ;263
000052  2800              CMP      r0,#0                 ;263
000054  d1f9              BNE      |L9.74|
                  |L9.86|
000056  6808              LDR      r0,[r1,#0]            ;270
000058  6880              LDR      r0,[r0,#8]            ;270
00005a  f0000001          AND      r0,r0,#1              ;270
00005e  2800              CMP      r0,#0                 ;270
000060  d050              BEQ      |L9.260|
000062  6c08              LDR      r0,[r1,#0x40]         ;275
000064  f2420501          MOV      r5,#0x2001            ;275
000068  43a8              BICS     r0,r0,r5              ;275
00006a  f4405080          ORR      r0,r0,#0x1000         ;275
00006e  6408              STR      r0,[r1,#0x40]         ;275
000070  6c08              LDR      r0,[r1,#0x40]         ;283
000072  f4007080          AND      r0,r0,#0x100          ;283
000076  b908              CBNZ     r0,|L9.124|
000078  2000              MOVS     r0,#0                 ;286
00007a  6448              STR      r0,[r1,#0x44]         ;286
                  |L9.124|
00007c  bf00              NOP                            ;292
00007e  2000              MOVS     r0,#0                 ;292
000080  f881003c          STRB     r0,[r1,#0x3c]         ;292
000084  bf00              NOP                            ;292
000086  1f40              SUBS     r0,r0,#5              ;296
000088  680d              LDR      r5,[r1,#0]            ;296
00008a  6028              STR      r0,[r5,#0]            ;296
00008c  6808              LDR      r0,[r1,#0]            ;299
00008e  6840              LDR      r0,[r0,#4]            ;299
000090  f0400080          ORR      r0,r0,#0x80           ;299
000094  680d              LDR      r5,[r1,#0]            ;299
000096  6068              STR      r0,[r5,#4]            ;299
000098  4c1d              LDR      r4,|L9.272|
00009a  6860              LDR      r0,[r4,#4]            ;307
00009c  f000001f          AND      r0,r0,#0x1f           ;307
0000a0  b9b0              CBNZ     r0,|L9.208|
0000a2  6808              LDR      r0,[r1,#0]            ;309
0000a4  6880              LDR      r0,[r0,#8]            ;309
0000a6  f4001040          AND      r0,r0,#0x300000       ;309
0000aa  b908              CBNZ     r0,|L9.176|
0000ac  2001              MOVS     r0,#1                 ;309
0000ae  e000              B        |L9.178|
                  |L9.176|
0000b0  2000              MOVS     r0,#0                 ;309
                  |L9.178|
0000b2  4602              MOV      r2,r0                 ;309
0000b4  6808              LDR      r0,[r1,#0]            ;310
0000b6  6840              LDR      r0,[r0,#4]            ;310
0000b8  2501              MOVS     r5,#1                 ;310
0000ba  ea252390          BIC      r3,r5,r0,LSR #10      ;310
0000be  b30a              CBZ      r2,|L9.260|
0000c0  b303              CBZ      r3,|L9.260|
0000c2  6808              LDR      r0,[r1,#0]            ;314
0000c4  6880              LDR      r0,[r0,#8]            ;314
0000c6  f4400080          ORR      r0,r0,#0x400000       ;314
0000ca  680d              LDR      r5,[r1,#0]            ;314
0000cc  60a8              STR      r0,[r5,#8]            ;314
0000ce  e019              B        |L9.260|
                  |L9.208|
0000d0  6808              LDR      r0,[r1,#0]            ;319
0000d2  6880              LDR      r0,[r0,#8]            ;319
0000d4  f4001040          AND      r0,r0,#0x300000       ;319
0000d8  b908              CBNZ     r0,|L9.222|
0000da  2001              MOVS     r0,#1                 ;319
0000dc  e000              B        |L9.224|
                  |L9.222|
0000de  2000              MOVS     r0,#0                 ;319
                  |L9.224|
0000e0  4602              MOV      r2,r0                 ;319
0000e2  6808              LDR      r0,[r1,#0]            ;320
0000e4  6840              LDR      r0,[r0,#4]            ;320
0000e6  2501              MOVS     r5,#1                 ;320
0000e8  ea252390          BIC      r3,r5,r0,LSR #10      ;320
0000ec  4d09              LDR      r5,|L9.276|
0000ee  6808              LDR      r0,[r1,#0]            ;321
0000f0  42a8              CMP      r0,r5                 ;321
0000f2  d107              BNE      |L9.260|
0000f4  b132              CBZ      r2,|L9.260|
0000f6  b12b              CBZ      r3,|L9.260|
0000f8  6808              LDR      r0,[r1,#0]            ;324
0000fa  6880              LDR      r0,[r0,#8]            ;324
0000fc  f4400080          ORR      r0,r0,#0x400000       ;324
000100  680d              LDR      r5,[r1,#0]            ;324
000102  60a8              STR      r0,[r5,#8]            ;324
                  |L9.260|
000104  2000              MOVS     r0,#0                 ;330
000106  e787              B        |L9.24|
;;;332    
                          ENDP

                  |L9.264|
                          DCD      SystemCoreClock
                  |L9.268|
                          DCD      0x000f4240
                  |L9.272|
                          DCD      0x40012300
                  |L9.276|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_InjectedStop||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedStop PROC
;;;344      */
;;;345    HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
000000  4601              MOV      r1,r0
;;;346    {
;;;347      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;348      
;;;349      /* Check the parameters */
;;;350      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;351    
;;;352      /* Process locked */
;;;353      __HAL_LOCK(hadc);
000004  bf00              NOP      
000006  f891003c          LDRB     r0,[r1,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L10.18|
00000e  2002              MOVS     r0,#2
                  |L10.16|
;;;354        
;;;355      /* Stop potential conversion and disable ADC peripheral                     */
;;;356      /* Conditioned to:                                                          */
;;;357      /* - No conversion on the other group (regular group) is intended to        */
;;;358      /*   continue (injected and regular groups stop conversion and ADC disable  */
;;;359      /*   are common)                                                            */
;;;360      /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
;;;361      if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
;;;362         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
;;;363      {
;;;364        /* Stop potential conversion on going, on regular and injected groups */
;;;365        /* Disable ADC peripheral */
;;;366        __HAL_ADC_DISABLE(hadc);
;;;367        
;;;368        /* Check if ADC is effectively disabled */
;;;369        if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
;;;370        {
;;;371          /* Set ADC state */
;;;372          ADC_STATE_CLR_SET(hadc->State,
;;;373                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;374                            HAL_ADC_STATE_READY);
;;;375        }
;;;376      }
;;;377      else
;;;378      {
;;;379        /* Update ADC state machine to error */
;;;380        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;381          
;;;382        tmp_hal_status = HAL_ERROR;
;;;383      }
;;;384      
;;;385      /* Process unlocked */
;;;386      __HAL_UNLOCK(hadc);
;;;387      
;;;388      /* Return function status */
;;;389      return tmp_hal_status;
;;;390    }
000010  4770              BX       lr
                  |L10.18|
000012  2001              MOVS     r0,#1                 ;353
000014  f881003c          STRB     r0,[r1,#0x3c]         ;353
000018  bf00              NOP                            ;353
00001a  6c08              LDR      r0,[r1,#0x40]         ;361
00001c  f4007080          AND      r0,r0,#0x100          ;361
000020  b9b0              CBNZ     r0,|L10.80|
000022  6808              LDR      r0,[r1,#0]            ;362
000024  6840              LDR      r0,[r0,#4]            ;362
000026  f4006080          AND      r0,r0,#0x400          ;362
00002a  b988              CBNZ     r0,|L10.80|
00002c  6808              LDR      r0,[r1,#0]            ;366
00002e  6880              LDR      r0,[r0,#8]            ;366
000030  f0200001          BIC      r0,r0,#1              ;366
000034  680b              LDR      r3,[r1,#0]            ;366
000036  6098              STR      r0,[r3,#8]            ;366
000038  6808              LDR      r0,[r1,#0]            ;369
00003a  6880              LDR      r0,[r0,#8]            ;369
00003c  f0000001          AND      r0,r0,#1              ;369
000040  b958              CBNZ     r0,|L10.90|
000042  6c08              LDR      r0,[r1,#0x40]         ;372
000044  f4205088          BIC      r0,r0,#0x1100         ;372
000048  f0400001          ORR      r0,r0,#1              ;372
00004c  6408              STR      r0,[r1,#0x40]         ;372
00004e  e004              B        |L10.90|
                  |L10.80|
000050  6c08              LDR      r0,[r1,#0x40]         ;380
000052  f0400020          ORR      r0,r0,#0x20           ;380
000056  6408              STR      r0,[r1,#0x40]         ;380
000058  2201              MOVS     r2,#1                 ;382
                  |L10.90|
00005a  bf00              NOP                            ;386
00005c  2000              MOVS     r0,#0                 ;386
00005e  f881003c          STRB     r0,[r1,#0x3c]         ;386
000062  bf00              NOP                            ;386
000064  4610              MOV      r0,r2                 ;389
000066  e7d3              B        |L10.16|
;;;391    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedStop_IT||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedStop_IT PROC
;;;465      */
;;;466    HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
000000  4601              MOV      r1,r0
;;;467    {
;;;468      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;469      
;;;470      /* Check the parameters */
;;;471      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;472    
;;;473      /* Process locked */
;;;474      __HAL_LOCK(hadc);
000004  bf00              NOP      
000006  f891003c          LDRB     r0,[r1,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L11.18|
00000e  2002              MOVS     r0,#2
                  |L11.16|
;;;475        
;;;476      /* Stop potential conversion and disable ADC peripheral                     */
;;;477      /* Conditioned to:                                                          */
;;;478      /* - No conversion on the other group (regular group) is intended to        */
;;;479      /*   continue (injected and regular groups stop conversion and ADC disable  */
;;;480      /*   are common)                                                            */
;;;481      /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
;;;482      if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
;;;483         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
;;;484      {
;;;485        /* Stop potential conversion on going, on regular and injected groups */
;;;486        /* Disable ADC peripheral */
;;;487        __HAL_ADC_DISABLE(hadc);
;;;488        
;;;489        /* Check if ADC is effectively disabled */
;;;490        if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
;;;491        {
;;;492          /* Disable ADC end of conversion interrupt for injected channels */
;;;493          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
;;;494          
;;;495          /* Set ADC state */
;;;496          ADC_STATE_CLR_SET(hadc->State,
;;;497                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;498                            HAL_ADC_STATE_READY);
;;;499        }
;;;500      }
;;;501      else
;;;502      {
;;;503        /* Update ADC state machine to error */
;;;504        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;505          
;;;506        tmp_hal_status = HAL_ERROR;
;;;507      }
;;;508      
;;;509      /* Process unlocked */
;;;510      __HAL_UNLOCK(hadc);
;;;511      
;;;512      /* Return function status */
;;;513      return tmp_hal_status;
;;;514    }
000010  4770              BX       lr
                  |L11.18|
000012  2001              MOVS     r0,#1                 ;474
000014  f881003c          STRB     r0,[r1,#0x3c]         ;474
000018  bf00              NOP                            ;474
00001a  6c08              LDR      r0,[r1,#0x40]         ;482
00001c  f4007080          AND      r0,r0,#0x100          ;482
000020  b9e0              CBNZ     r0,|L11.92|
000022  6808              LDR      r0,[r1,#0]            ;483
000024  6840              LDR      r0,[r0,#4]            ;483
000026  f4006080          AND      r0,r0,#0x400          ;483
00002a  b9b8              CBNZ     r0,|L11.92|
00002c  6808              LDR      r0,[r1,#0]            ;487
00002e  6880              LDR      r0,[r0,#8]            ;487
000030  f0200001          BIC      r0,r0,#1              ;487
000034  680b              LDR      r3,[r1,#0]            ;487
000036  6098              STR      r0,[r3,#8]            ;487
000038  6808              LDR      r0,[r1,#0]            ;490
00003a  6880              LDR      r0,[r0,#8]            ;490
00003c  f0000001          AND      r0,r0,#1              ;490
000040  b988              CBNZ     r0,|L11.102|
000042  6808              LDR      r0,[r1,#0]            ;493
000044  6840              LDR      r0,[r0,#4]            ;493
000046  f0200080          BIC      r0,r0,#0x80           ;493
00004a  680b              LDR      r3,[r1,#0]            ;493
00004c  6058              STR      r0,[r3,#4]            ;493
00004e  6c08              LDR      r0,[r1,#0x40]         ;496
000050  f4205088          BIC      r0,r0,#0x1100         ;496
000054  f0400001          ORR      r0,r0,#1              ;496
000058  6408              STR      r0,[r1,#0x40]         ;496
00005a  e004              B        |L11.102|
                  |L11.92|
00005c  6c08              LDR      r0,[r1,#0x40]         ;504
00005e  f0400020          ORR      r0,r0,#0x20           ;504
000062  6408              STR      r0,[r1,#0x40]         ;504
000064  2201              MOVS     r2,#1                 ;506
                  |L11.102|
000066  bf00              NOP                            ;510
000068  2000              MOVS     r0,#0                 ;510
00006a  f881003c          STRB     r0,[r1,#0x3c]         ;510
00006e  bf00              NOP                            ;510
000070  4610              MOV      r0,r2                 ;513
000072  e7cd              B        |L11.16|
;;;515    
                          ENDP


                          AREA ||i.HAL_ADCEx_MultiModeConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeConfigChannel PROC
;;;950      */
;;;951    HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
000000  b510              PUSH     {r4,lr}
;;;952    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;953    
;;;954      ADC_Common_TypeDef *tmpADC_Common;
;;;955    
;;;956      /* Check the parameters */
;;;957      assert_param(IS_ADC_MODE(multimode->Mode));
;;;958      assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
;;;959      assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
;;;960      
;;;961      /* Process locked */
;;;962      __HAL_LOCK(hadc);
000006  bf00              NOP      
000008  f892003c          LDRB     r0,[r2,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L12.20|
000010  2002              MOVS     r0,#2
                  |L12.18|
;;;963    
;;;964      /* Pointer to the common control register to which is belonging hadc    */
;;;965      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;966      /* control register)                                                    */
;;;967      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;968    
;;;969      /* Set ADC mode */
;;;970      tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
;;;971      tmpADC_Common->CCR |= multimode->Mode;
;;;972      
;;;973      /* Set the ADC DMA access mode */
;;;974      tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
;;;975      tmpADC_Common->CCR |= multimode->DMAAccessMode;
;;;976      
;;;977      /* Set delay between two sampling phases */
;;;978      tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
;;;979      tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
;;;980      
;;;981      /* Process unlocked */
;;;982      __HAL_UNLOCK(hadc);
;;;983      
;;;984      /* Return function status */
;;;985      return HAL_OK;
;;;986    }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  2001              MOVS     r0,#1                 ;962
000016  f882003c          STRB     r0,[r2,#0x3c]         ;962
00001a  bf00              NOP                            ;962
00001c  490f              LDR      r1,|L12.92|
00001e  6848              LDR      r0,[r1,#4]            ;970
000020  f020001f          BIC      r0,r0,#0x1f           ;970
000024  6048              STR      r0,[r1,#4]            ;970
000026  6848              LDR      r0,[r1,#4]            ;971
000028  681c              LDR      r4,[r3,#0]            ;971
00002a  4320              ORRS     r0,r0,r4              ;971
00002c  6048              STR      r0,[r1,#4]            ;971
00002e  6848              LDR      r0,[r1,#4]            ;974
000030  f4204040          BIC      r0,r0,#0xc000         ;974
000034  6048              STR      r0,[r1,#4]            ;974
000036  6848              LDR      r0,[r1,#4]            ;975
000038  685c              LDR      r4,[r3,#4]            ;975
00003a  4320              ORRS     r0,r0,r4              ;975
00003c  6048              STR      r0,[r1,#4]            ;975
00003e  6848              LDR      r0,[r1,#4]            ;978
000040  f4206070          BIC      r0,r0,#0xf00          ;978
000044  6048              STR      r0,[r1,#4]            ;978
000046  6848              LDR      r0,[r1,#4]            ;979
000048  689c              LDR      r4,[r3,#8]            ;979
00004a  4320              ORRS     r0,r0,r4              ;979
00004c  6048              STR      r0,[r1,#4]            ;979
00004e  bf00              NOP                            ;982
000050  2000              MOVS     r0,#0                 ;982
000052  f882003c          STRB     r0,[r2,#0x3c]         ;982
000056  bf00              NOP                            ;982
000058  bf00              NOP                            ;985
00005a  e7da              B        |L12.18|
;;;987    
                          ENDP

                  |L12.92|
                          DCD      0x40012300

                          AREA ||i.HAL_ADCEx_MultiModeGetValue||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeGetValue PROC
;;;750      */
;;;751    uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
000000  4602              MOV      r2,r0
;;;752    {
;;;753      ADC_Common_TypeDef *tmpADC_Common;
;;;754    
;;;755      /* Pointer to the common control register to which is belonging hadc    */
;;;756      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;757      /* control register)                                                    */
;;;758      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
000002  4901              LDR      r1,|L13.8|
;;;759    
;;;760      /* Return the multi mode conversion value */
;;;761      return tmpADC_Common->CDR;
000004  6888              LDR      r0,[r1,#8]
;;;762    }
000006  4770              BX       lr
;;;763    
                          ENDP

                  |L13.8|
                          DCD      0x40012300

                          AREA ||i.HAL_ADCEx_MultiModeStart_DMA||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeStart_DMA PROC
;;;578      */
;;;579    HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;580    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;581      __IO uint32_t counter = 0U;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;582      ADC_Common_TypeDef *tmpADC_Common;
;;;583      
;;;584      /* Check the parameters */
;;;585      assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
;;;586      assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
;;;587      assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
;;;588      
;;;589      /* Process locked */
;;;590      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f894003c          LDRB     r0,[r4,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L14.26|
000016  2002              MOVS     r0,#2
                  |L14.24|
;;;591      
;;;592      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;593         Tstab time the ADC's stabilization */
;;;594      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;595      {  
;;;596        /* Enable the Peripheral */
;;;597        __HAL_ADC_ENABLE(hadc);
;;;598        
;;;599        /* Delay for temperature sensor stabilization time */
;;;600        /* Compute number of CPU cycles to wait for */
;;;601        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
;;;602        while(counter != 0U)
;;;603        {
;;;604          counter--;
;;;605        }
;;;606      }
;;;607      
;;;608      /* Start conversion if ADC is effectively enabled */
;;;609      if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
;;;610      {
;;;611        /* Set ADC state                                                          */
;;;612        /* - Clear state bitfield related to regular group conversion results     */
;;;613        /* - Set state bitfield related to regular group operation                */
;;;614        ADC_STATE_CLR_SET(hadc->State,
;;;615                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
;;;616                          HAL_ADC_STATE_REG_BUSY);
;;;617        
;;;618        /* If conversions on group regular are also triggering group injected,    */
;;;619        /* update ADC state.                                                      */
;;;620        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
;;;621        {
;;;622          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
;;;623        }
;;;624        
;;;625        /* State machine update: Check if an injected conversion is ongoing */
;;;626        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
;;;627        {
;;;628          /* Reset ADC error code fields related to conversions on group regular */
;;;629          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
;;;630        }
;;;631        else
;;;632        {
;;;633          /* Reset ADC all error code fields */
;;;634          ADC_CLEAR_ERRORCODE(hadc);
;;;635        }
;;;636        
;;;637        /* Process unlocked */
;;;638        /* Unlock before starting ADC conversions: in case of potential           */
;;;639        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;640        __HAL_UNLOCK(hadc);
;;;641        
;;;642        /* Set the DMA transfer complete callback */
;;;643        hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
;;;644        
;;;645        /* Set the DMA half transfer complete callback */
;;;646        hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
;;;647        
;;;648        /* Set the DMA error callback */
;;;649        hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
;;;650        
;;;651        /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
;;;652        /* start (in case of SW start):                                           */
;;;653        
;;;654        /* Clear regular group conversion flag and overrun flag */
;;;655        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;656        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
;;;657    
;;;658        /* Enable ADC overrun interrupt */
;;;659        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
;;;660    
;;;661        /* Pointer to the common control register to which is belonging hadc    */
;;;662        /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;663        /* control register)                                                    */
;;;664        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;665    
;;;666        if (hadc->Init.DMAContinuousRequests != DISABLE)
;;;667        {
;;;668          /* Enable the selected ADC DMA request after last transfer */
;;;669          tmpADC_Common->CCR |= ADC_CCR_DDS;
;;;670        }
;;;671        else
;;;672        {
;;;673          /* Disable the selected ADC EOC rising on each regular channel conversion */
;;;674          tmpADC_Common->CCR &= ~ADC_CCR_DDS;
;;;675        }
;;;676        
;;;677        /* Enable the DMA Stream */
;;;678        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
;;;679        
;;;680        /* if no external trigger present enable software conversion of regular channels */
;;;681        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
;;;682        {
;;;683          /* Enable the selected ADC software conversion for regular group */
;;;684          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
;;;685        }
;;;686      }
;;;687      
;;;688      /* Return function status */
;;;689      return HAL_OK;
;;;690    }
000018  bdf8              POP      {r3-r7,pc}
                  |L14.26|
00001a  2001              MOVS     r0,#1                 ;590
00001c  f884003c          STRB     r0,[r4,#0x3c]         ;590
000020  bf00              NOP                            ;590
000022  6820              LDR      r0,[r4,#0]            ;594
000024  6880              LDR      r0,[r0,#8]            ;594
000026  f0000001          AND      r0,r0,#1              ;594
00002a  b9a0              CBNZ     r0,|L14.86|
00002c  6820              LDR      r0,[r4,#0]            ;597
00002e  6880              LDR      r0,[r0,#8]            ;597
000030  f0400001          ORR      r0,r0,#1              ;597
000034  6821              LDR      r1,[r4,#0]            ;597
000036  6088              STR      r0,[r1,#8]            ;597
000038  4836              LDR      r0,|L14.276|
00003a  6800              LDR      r0,[r0,#0]            ;601  ; SystemCoreClock
00003c  4936              LDR      r1,|L14.280|
00003e  fbb0f0f1          UDIV     r0,r0,r1              ;601
000042  eb000040          ADD      r0,r0,r0,LSL #1       ;601
000046  9000              STR      r0,[sp,#0]            ;601
000048  e002              B        |L14.80|
                  |L14.74|
00004a  9800              LDR      r0,[sp,#0]            ;604
00004c  1e40              SUBS     r0,r0,#1              ;604
00004e  9000              STR      r0,[sp,#0]            ;604
                  |L14.80|
000050  9800              LDR      r0,[sp,#0]            ;602
000052  2800              CMP      r0,#0                 ;602
000054  d1f9              BNE      |L14.74|
                  |L14.86|
000056  6820              LDR      r0,[r4,#0]            ;609
000058  6880              LDR      r0,[r0,#8]            ;609
00005a  f0000001          AND      r0,r0,#1              ;609
00005e  2800              CMP      r0,#0                 ;609
000060  d055              BEQ      |L14.270|
000062  6c20              LDR      r0,[r4,#0x40]         ;614
000064  f2406101          MOV      r1,#0x601             ;614
000068  4388              BICS     r0,r0,r1              ;614
00006a  f4407080          ORR      r0,r0,#0x100          ;614
00006e  6420              STR      r0,[r4,#0x40]         ;614
000070  6820              LDR      r0,[r4,#0]            ;620
000072  6840              LDR      r0,[r0,#4]            ;620
000074  f4006080          AND      r0,r0,#0x400          ;620
000078  b128              CBZ      r0,|L14.134|
00007a  6c20              LDR      r0,[r4,#0x40]         ;622
00007c  f4205000          BIC      r0,r0,#0x2000         ;622
000080  f4405080          ORR      r0,r0,#0x1000         ;622
000084  6420              STR      r0,[r4,#0x40]         ;622
                  |L14.134|
000086  6c20              LDR      r0,[r4,#0x40]         ;626
000088  f4005080          AND      r0,r0,#0x1000         ;626
00008c  f5b05f80          CMP      r0,#0x1000            ;626
000090  d104              BNE      |L14.156|
000092  6c60              LDR      r0,[r4,#0x44]         ;629
000094  f0200006          BIC      r0,r0,#6              ;629
000098  6460              STR      r0,[r4,#0x44]         ;629
00009a  e001              B        |L14.160|
                  |L14.156|
00009c  2000              MOVS     r0,#0                 ;634
00009e  6460              STR      r0,[r4,#0x44]         ;634
                  |L14.160|
0000a0  bf00              NOP                            ;640
0000a2  2000              MOVS     r0,#0                 ;640
0000a4  f884003c          STRB     r0,[r4,#0x3c]         ;640
0000a8  bf00              NOP                            ;640
0000aa  481c              LDR      r0,|L14.284|
0000ac  6ba1              LDR      r1,[r4,#0x38]         ;643
0000ae  63c8              STR      r0,[r1,#0x3c]         ;643
0000b0  481b              LDR      r0,|L14.288|
0000b2  6ba1              LDR      r1,[r4,#0x38]         ;646
0000b4  6408              STR      r0,[r1,#0x40]         ;646
0000b6  481b              LDR      r0,|L14.292|
0000b8  6ba1              LDR      r1,[r4,#0x38]         ;649
0000ba  64c8              STR      r0,[r1,#0x4c]         ;649
0000bc  f06f0002          MVN      r0,#2                 ;656
0000c0  6821              LDR      r1,[r4,#0]            ;656
0000c2  6008              STR      r0,[r1,#0]            ;656
0000c4  6820              LDR      r0,[r4,#0]            ;659
0000c6  6840              LDR      r0,[r0,#4]            ;659
0000c8  f0406080          ORR      r0,r0,#0x4000000      ;659
0000cc  6821              LDR      r1,[r4,#0]            ;659
0000ce  6048              STR      r0,[r1,#4]            ;659
0000d0  4d15              LDR      r5,|L14.296|
0000d2  f8940030          LDRB     r0,[r4,#0x30]         ;666
0000d6  b120              CBZ      r0,|L14.226|
0000d8  6868              LDR      r0,[r5,#4]            ;669
0000da  f4405000          ORR      r0,r0,#0x2000         ;669
0000de  6068              STR      r0,[r5,#4]            ;669
0000e0  e003              B        |L14.234|
                  |L14.226|
0000e2  6868              LDR      r0,[r5,#4]            ;674
0000e4  f4205000          BIC      r0,r0,#0x2000         ;674
0000e8  6068              STR      r0,[r5,#4]            ;674
                  |L14.234|
0000ea  463b              MOV      r3,r7                 ;678
0000ec  4632              MOV      r2,r6                 ;678
0000ee  f1050108          ADD      r1,r5,#8              ;678
0000f2  6ba0              LDR      r0,[r4,#0x38]         ;678
0000f4  f7fffffe          BL       HAL_DMA_Start_IT
0000f8  6820              LDR      r0,[r4,#0]            ;681
0000fa  6880              LDR      r0,[r0,#8]            ;681
0000fc  f0005040          AND      r0,r0,#0x30000000     ;681
000100  b928              CBNZ     r0,|L14.270|
000102  6820              LDR      r0,[r4,#0]            ;684
000104  6880              LDR      r0,[r0,#8]            ;684
000106  f0404080          ORR      r0,r0,#0x40000000     ;684
00010a  6821              LDR      r1,[r4,#0]            ;684
00010c  6088              STR      r0,[r1,#8]            ;684
                  |L14.270|
00010e  2000              MOVS     r0,#0                 ;689
000110  e782              B        |L14.24|
;;;691    
                          ENDP

000112  0000              DCW      0x0000
                  |L14.276|
                          DCD      SystemCoreClock
                  |L14.280|
                          DCD      0x000f4240
                  |L14.284|
                          DCD      ADC_MultiModeDMAConvCplt
                  |L14.288|
                          DCD      ADC_MultiModeDMAHalfConvCplt
                  |L14.292|
                          DCD      ADC_MultiModeDMAError
                  |L14.296|
                          DCD      0x40012300

                          AREA ||i.HAL_ADCEx_MultiModeStop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeStop_DMA PROC
;;;697      */
;;;698    HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
000000  b570              PUSH     {r4-r6,lr}
;;;699    {
000002  4604              MOV      r4,r0
;;;700      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000004  2600              MOVS     r6,#0
;;;701      ADC_Common_TypeDef *tmpADC_Common;
;;;702      
;;;703      /* Check the parameters */
;;;704      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;705      
;;;706      /* Process locked */
;;;707      __HAL_LOCK(hadc);
000006  bf00              NOP      
000008  f894003c          LDRB     r0,[r4,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L15.20|
000010  2002              MOVS     r0,#2
                  |L15.18|
;;;708      
;;;709      /* Stop potential conversion on going, on regular and injected groups */
;;;710      /* Disable ADC peripheral */
;;;711      __HAL_ADC_DISABLE(hadc);
;;;712    
;;;713      /* Pointer to the common control register to which is belonging hadc    */
;;;714      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;715      /* control register)                                                    */
;;;716      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;717    
;;;718      /* Check if ADC is effectively disabled */
;;;719      if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
;;;720      {
;;;721        /* Disable the selected ADC DMA mode for multimode */
;;;722        tmpADC_Common->CCR &= ~ADC_CCR_DDS;
;;;723        
;;;724        /* Disable the DMA channel (in case of DMA in circular mode or stop while */
;;;725        /* DMA transfer is on going)                                              */
;;;726        tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
;;;727        
;;;728        /* Disable ADC overrun interrupt */
;;;729        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
;;;730        
;;;731        /* Set ADC state */
;;;732        ADC_STATE_CLR_SET(hadc->State,
;;;733                          HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;734                          HAL_ADC_STATE_READY);
;;;735      }
;;;736      
;;;737      /* Process unlocked */
;;;738      __HAL_UNLOCK(hadc);
;;;739      
;;;740      /* Return function status */
;;;741      return tmp_hal_status;
;;;742    }
000012  bd70              POP      {r4-r6,pc}
                  |L15.20|
000014  2001              MOVS     r0,#1                 ;707
000016  f884003c          STRB     r0,[r4,#0x3c]         ;707
00001a  bf00              NOP                            ;707
00001c  6820              LDR      r0,[r4,#0]            ;711
00001e  6880              LDR      r0,[r0,#8]            ;711
000020  f0200001          BIC      r0,r0,#1              ;711
000024  6821              LDR      r1,[r4,#0]            ;711
000026  6088              STR      r0,[r1,#8]            ;711
000028  4d10              LDR      r5,|L15.108|
00002a  6820              LDR      r0,[r4,#0]            ;719
00002c  6880              LDR      r0,[r0,#8]            ;719
00002e  f0000001          AND      r0,r0,#1              ;719
000032  b998              CBNZ     r0,|L15.92|
000034  6868              LDR      r0,[r5,#4]            ;722
000036  f4205000          BIC      r0,r0,#0x2000         ;722
00003a  6068              STR      r0,[r5,#4]            ;722
00003c  6ba0              LDR      r0,[r4,#0x38]         ;726
00003e  f7fffffe          BL       HAL_DMA_Abort
000042  4606              MOV      r6,r0                 ;726
000044  6820              LDR      r0,[r4,#0]            ;729
000046  6840              LDR      r0,[r0,#4]            ;729
000048  f0206080          BIC      r0,r0,#0x4000000      ;729
00004c  6821              LDR      r1,[r4,#0]            ;729
00004e  6048              STR      r0,[r1,#4]            ;729
000050  6c20              LDR      r0,[r4,#0x40]         ;732
000052  f4205088          BIC      r0,r0,#0x1100         ;732
000056  f0400001          ORR      r0,r0,#1              ;732
00005a  6420              STR      r0,[r4,#0x40]         ;732
                  |L15.92|
00005c  bf00              NOP                            ;738
00005e  2000              MOVS     r0,#0                 ;738
000060  f884003c          STRB     r0,[r4,#0x3c]         ;738
000064  bf00              NOP                            ;738
000066  4630              MOV      r0,r6                 ;741
000068  e7d3              B        |L15.18|
;;;743    
                          ENDP

00006a  0000              DCW      0x0000
                  |L15.108|
                          DCD      0x40012300

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REVSH|
#line 478
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____RRX|
#line 665
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
