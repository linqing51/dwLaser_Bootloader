; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\stm32f4xx_hal_exti.o --asm_dir=./ --list_dir=--list --depend=mcu_application\stm32f4xx_hal_exti.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\stm32f4xx_hal_exti.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c]
                          THUMB

                          AREA ||i.HAL_EXTI_ClearConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearConfigLine PROC
;;;326      */
;;;327    HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
000000  b530              PUSH     {r4,r5,lr}
;;;328    {
000002  4601              MOV      r1,r0
;;;329      uint32_t regval;
;;;330      uint32_t linepos;
;;;331      uint32_t maskline;
;;;332    
;;;333      /* Check null pointer */
;;;334      if (hexti == NULL)
000004  b909              CBNZ     r1,|L1.10|
;;;335      {
;;;336        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;337      }
;;;338    
;;;339      /* Check the parameter */
;;;340      assert_param(IS_EXTI_LINE(hexti->Line));
;;;341    
;;;342      /* compute line mask */
;;;343      linepos = (hexti->Line & EXTI_PIN_MASK);
;;;344      maskline = (1uL << linepos);
;;;345    
;;;346      /* 1] Clear interrupt mode */
;;;347      EXTI->IMR = (EXTI->IMR & ~maskline);
;;;348    
;;;349      /* 2] Clear event mode */
;;;350      EXTI->EMR = (EXTI->EMR & ~maskline);
;;;351    
;;;352      /* 3] Clear triggers in case of configurable lines */
;;;353      if ((hexti->Line & EXTI_CONFIG) != 0x00u)
;;;354      {
;;;355        EXTI->RTSR = (EXTI->RTSR & ~maskline);
;;;356        EXTI->FTSR = (EXTI->FTSR & ~maskline);
;;;357    
;;;358        /* Get Gpio port selection for gpio lines */
;;;359        if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
;;;360        {
;;;361          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;362    
;;;363          regval = SYSCFG->EXTICR[linepos >> 2u];
;;;364          regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;365          SYSCFG->EXTICR[linepos >> 2u] = regval;
;;;366        }
;;;367      }
;;;368    
;;;369      return HAL_OK;
;;;370    }
000008  bd30              POP      {r4,r5,pc}
                  |L1.10|
00000a  7808              LDRB     r0,[r1,#0]            ;343
00000c  f000021f          AND      r2,r0,#0x1f           ;343
000010  2001              MOVS     r0,#1                 ;344
000012  fa00f302          LSL      r3,r0,r2              ;344
000016  4816              LDR      r0,|L1.112|
000018  6800              LDR      r0,[r0,#0]            ;347
00001a  4398              BICS     r0,r0,r3              ;347
00001c  4d14              LDR      r5,|L1.112|
00001e  6028              STR      r0,[r5,#0]            ;347
000020  1d28              ADDS     r0,r5,#4              ;350
000022  6800              LDR      r0,[r0,#0]            ;350
000024  4398              BICS     r0,r0,r3              ;350
000026  1d2d              ADDS     r5,r5,#4              ;350
000028  6028              STR      r0,[r5,#0]            ;350
00002a  6808              LDR      r0,[r1,#0]            ;353
00002c  f0007000          AND      r0,r0,#0x2000000      ;353
000030  b1e0              CBZ      r0,|L1.108|
000032  1d28              ADDS     r0,r5,#4              ;355
000034  6800              LDR      r0,[r0,#0]            ;355
000036  4398              BICS     r0,r0,r3              ;355
000038  1d2d              ADDS     r5,r5,#4              ;355
00003a  6028              STR      r0,[r5,#0]            ;355
00003c  1d28              ADDS     r0,r5,#4              ;356
00003e  6800              LDR      r0,[r0,#0]            ;356
000040  4398              BICS     r0,r0,r3              ;356
000042  1d2d              ADDS     r5,r5,#4              ;356
000044  6028              STR      r0,[r5,#0]            ;356
000046  6808              LDR      r0,[r1,#0]            ;359
000048  f00060c0          AND      r0,r0,#0x6000000      ;359
00004c  f1b06fc0          CMP      r0,#0x6000000         ;359
000050  d10c              BNE      |L1.108|
000052  4808              LDR      r0,|L1.116|
000054  0895              LSRS     r5,r2,#2              ;363
000056  f8504025          LDR      r4,[r0,r5,LSL #2]     ;363
00005a  0790              LSLS     r0,r2,#30             ;364
00005c  0f05              LSRS     r5,r0,#28             ;364
00005e  200f              MOVS     r0,#0xf               ;364
000060  40a8              LSLS     r0,r0,r5              ;364
000062  4384              BICS     r4,r4,r0              ;364
000064  4803              LDR      r0,|L1.116|
000066  0895              LSRS     r5,r2,#2              ;365
000068  f8404025          STR      r4,[r0,r5,LSL #2]     ;365
                  |L1.108|
00006c  2000              MOVS     r0,#0                 ;369
00006e  e7cb              B        |L1.8|
;;;371    
                          ENDP

                  |L1.112|
                          DCD      0x40013c00
                  |L1.116|
                          DCD      0x40013808

                          AREA ||i.HAL_EXTI_ClearPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearPending PROC
;;;505      */
;;;506    void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  b510              PUSH     {r4,lr}
;;;507    {
000002  460a              MOV      r2,r1
;;;508      uint32_t maskline;
;;;509    
;;;510      /* Check parameters */
;;;511      assert_param(IS_EXTI_LINE(hexti->Line));
;;;512      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;513      assert_param(IS_EXTI_PENDING_EDGE(Edge));
;;;514    
;;;515      /* Compute line mask */
;;;516      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000004  7803              LDRB     r3,[r0,#0]
000006  f003041f          AND      r4,r3,#0x1f
00000a  2301              MOVS     r3,#1
00000c  fa03f104          LSL      r1,r3,r4
;;;517    
;;;518      /* Clear Pending bit */
;;;519      EXTI->PR =  maskline;
000010  4b01              LDR      r3,|L2.24|
000012  6019              STR      r1,[r3,#0]
;;;520    }
000014  bd10              POP      {r4,pc}
;;;521    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40013c14

                          AREA ||i.HAL_EXTI_GenerateSWI||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GenerateSWI PROC
;;;526      */
;;;527    void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
000000  7802              LDRB     r2,[r0,#0]
;;;528    {
;;;529      uint32_t maskline;
;;;530    
;;;531      /* Check parameters */
;;;532      assert_param(IS_EXTI_LINE(hexti->Line));
;;;533      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;534    
;;;535      /* Compute line mask */
;;;536      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000002  f002031f          AND      r3,r2,#0x1f
000006  2201              MOVS     r2,#1
000008  fa02f103          LSL      r1,r2,r3
;;;537    
;;;538      /* Generate Software interrupt */
;;;539      EXTI->SWIER = maskline;
00000c  4a01              LDR      r2,|L3.20|
00000e  6011              STR      r1,[r2,#0]
;;;540    }
000010  4770              BX       lr
;;;541    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40013c10

                          AREA ||i.HAL_EXTI_GetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetConfigLine PROC
;;;237      */
;;;238    HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;239    {
000002  4604              MOV      r4,r0
;;;240      uint32_t regval;
;;;241      uint32_t linepos;
;;;242      uint32_t maskline;
;;;243    
;;;244      /* Check null pointer */
;;;245      if ((hexti == NULL) || (pExtiConfig == NULL))
000004  b104              CBZ      r4,|L4.8|
000006  b909              CBNZ     r1,|L4.12|
                  |L4.8|
;;;246      {
;;;247        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L4.10|
;;;248      }
;;;249    
;;;250      /* Check the parameter */
;;;251      assert_param(IS_EXTI_LINE(hexti->Line));
;;;252    
;;;253      /* Store handle line number to configuration structure */
;;;254      pExtiConfig->Line = hexti->Line;
;;;255    
;;;256      /* Compute line mask */
;;;257      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
;;;258      maskline = (1uL << linepos);
;;;259    
;;;260      /* 1] Get core mode : interrupt */
;;;261    
;;;262      /* Check if selected line is enable */
;;;263      if ((EXTI->IMR & maskline) != 0x00u)
;;;264      {
;;;265        pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
;;;266      }
;;;267      else
;;;268      {
;;;269        pExtiConfig->Mode = EXTI_MODE_NONE;
;;;270      }
;;;271    
;;;272      /* Get event mode */
;;;273      /* Check if selected line is enable */
;;;274      if ((EXTI->EMR & maskline) != 0x00u)
;;;275      {
;;;276        pExtiConfig->Mode |= EXTI_MODE_EVENT;
;;;277      }
;;;278    
;;;279      /* 2] Get trigger for configurable lines : rising */
;;;280      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
;;;281      {
;;;282        /* Check if configuration of selected line is enable */
;;;283        if ((EXTI->RTSR & maskline) != 0x00u)
;;;284        {
;;;285          pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
;;;286        }
;;;287        else
;;;288        {
;;;289          pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
;;;290        }
;;;291    
;;;292        /* Get falling configuration */
;;;293        /* Check if configuration of selected line is enable */
;;;294        if ((EXTI->FTSR & maskline) != 0x00u)
;;;295        {
;;;296          pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
;;;297        }
;;;298    
;;;299        /* Get Gpio port selection for gpio lines */
;;;300        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;301        {
;;;302          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;303    
;;;304          regval = SYSCFG->EXTICR[linepos >> 2u];
;;;305          pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
;;;306        }
;;;307        else
;;;308        {
;;;309          pExtiConfig->GPIOSel = 0x00u;
;;;310        }
;;;311      }
;;;312      else
;;;313      {
;;;314        /* No Trigger selected */
;;;315        pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
;;;316        pExtiConfig->GPIOSel = 0x00u;
;;;317      }
;;;318    
;;;319      return HAL_OK;
;;;320    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  6820              LDR      r0,[r4,#0]            ;254
00000e  6008              STR      r0,[r1,#0]            ;254
000010  7808              LDRB     r0,[r1,#0]            ;257
000012  f000031f          AND      r3,r0,#0x1f           ;257
000016  2001              MOVS     r0,#1                 ;258
000018  fa00f203          LSL      r2,r0,r3              ;258
00001c  4822              LDR      r0,|L4.168|
00001e  6800              LDR      r0,[r0,#0]            ;263
000020  4010              ANDS     r0,r0,r2              ;263
000022  b110              CBZ      r0,|L4.42|
000024  2001              MOVS     r0,#1                 ;265
000026  6048              STR      r0,[r1,#4]            ;265
000028  e001              B        |L4.46|
                  |L4.42|
00002a  2000              MOVS     r0,#0                 ;269
00002c  6048              STR      r0,[r1,#4]            ;269
                  |L4.46|
00002e  481e              LDR      r0,|L4.168|
000030  1d00              ADDS     r0,r0,#4              ;274
000032  6800              LDR      r0,[r0,#0]            ;274
000034  4010              ANDS     r0,r0,r2              ;274
000036  b118              CBZ      r0,|L4.64|
000038  6848              LDR      r0,[r1,#4]            ;276
00003a  f0400002          ORR      r0,r0,#2              ;276
00003e  6048              STR      r0,[r1,#4]            ;276
                  |L4.64|
000040  6808              LDR      r0,[r1,#0]            ;280
000042  f0007000          AND      r0,r0,#0x2000000      ;280
000046  b348              CBZ      r0,|L4.156|
000048  4817              LDR      r0,|L4.168|
00004a  3008              ADDS     r0,r0,#8              ;283
00004c  6800              LDR      r0,[r0,#0]            ;283
00004e  4010              ANDS     r0,r0,r2              ;283
000050  b110              CBZ      r0,|L4.88|
000052  2001              MOVS     r0,#1                 ;285
000054  6088              STR      r0,[r1,#8]            ;285
000056  e001              B        |L4.92|
                  |L4.88|
000058  2000              MOVS     r0,#0                 ;289
00005a  6088              STR      r0,[r1,#8]            ;289
                  |L4.92|
00005c  4812              LDR      r0,|L4.168|
00005e  300c              ADDS     r0,r0,#0xc            ;294
000060  6800              LDR      r0,[r0,#0]            ;294
000062  4010              ANDS     r0,r0,r2              ;294
000064  b118              CBZ      r0,|L4.110|
000066  6888              LDR      r0,[r1,#8]            ;296
000068  f0400002          ORR      r0,r0,#2              ;296
00006c  6088              STR      r0,[r1,#8]            ;296
                  |L4.110|
00006e  6808              LDR      r0,[r1,#0]            ;300
000070  f00060c0          AND      r0,r0,#0x6000000      ;300
000074  f1b06fc0          CMP      r0,#0x6000000         ;300
000078  d10d              BNE      |L4.150|
00007a  480c              LDR      r0,|L4.172|
00007c  089e              LSRS     r6,r3,#2              ;304
00007e  f8505026          LDR      r5,[r0,r6,LSL #2]     ;304
000082  f0030003          AND      r0,r3,#3              ;305
000086  f1c00003          RSB      r0,r0,#3              ;305
00008a  0080              LSLS     r0,r0,#2              ;305
00008c  fa05f000          LSL      r0,r5,r0              ;305
000090  0e00              LSRS     r0,r0,#24             ;305
000092  60c8              STR      r0,[r1,#0xc]          ;305
000094  e005              B        |L4.162|
                  |L4.150|
000096  2000              MOVS     r0,#0                 ;309
000098  60c8              STR      r0,[r1,#0xc]          ;309
00009a  e002              B        |L4.162|
                  |L4.156|
00009c  2000              MOVS     r0,#0                 ;315
00009e  6088              STR      r0,[r1,#8]            ;315
0000a0  60c8              STR      r0,[r1,#0xc]          ;316
                  |L4.162|
0000a2  2000              MOVS     r0,#0                 ;319
0000a4  e7b1              B        |L4.10|
;;;321    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L4.168|
                          DCD      0x40013c00
                  |L4.172|
                          DCD      0x40013808

                          AREA ||i.HAL_EXTI_GetHandle||, CODE, READONLY, ALIGN=1

                  HAL_EXTI_GetHandle PROC
;;;404      */
;;;405    HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
000000  4602              MOV      r2,r0
;;;406    {
;;;407      /* Check the parameters */
;;;408      assert_param(IS_EXTI_LINE(ExtiLine));
;;;409    
;;;410      /* Check null pointer */
;;;411      if (hexti == NULL)
000002  b90a              CBNZ     r2,|L5.8|
;;;412      {
;;;413        return HAL_ERROR;
000004  2001              MOVS     r0,#1
                  |L5.6|
;;;414      }
;;;415      else
;;;416      {
;;;417        /* Store line number as handle private field */
;;;418        hexti->Line = ExtiLine;
;;;419    
;;;420        return HAL_OK;
;;;421      }
;;;422    }
000006  4770              BX       lr
                  |L5.8|
000008  6011              STR      r1,[r2,#0]            ;418
00000a  2000              MOVS     r0,#0                 ;420
00000c  e7fb              B        |L5.6|
;;;423    
                          ENDP


                          AREA ||i.HAL_EXTI_GetPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetPending PROC
;;;476      */
;;;477    uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  b530              PUSH     {r4,r5,lr}
;;;478    {
000002  4602              MOV      r2,r0
000004  460d              MOV      r5,r1
;;;479      uint32_t regval;
;;;480      uint32_t linepos;
;;;481      uint32_t maskline;
;;;482    
;;;483      /* Check parameters */
;;;484      assert_param(IS_EXTI_LINE(hexti->Line));
;;;485      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;486      assert_param(IS_EXTI_PENDING_EDGE(Edge));
;;;487    
;;;488      /* Compute line mask */
;;;489      linepos = (hexti->Line & EXTI_PIN_MASK);
000006  7814              LDRB     r4,[r2,#0]
000008  f004011f          AND      r1,r4,#0x1f
;;;490      maskline = (1uL << linepos);
00000c  2401              MOVS     r4,#1
00000e  fa04f301          LSL      r3,r4,r1
;;;491    
;;;492      /* return 1 if bit is set else 0 */
;;;493      regval = ((EXTI->PR & maskline) >> linepos);
000012  4c03              LDR      r4,|L6.32|
000014  6824              LDR      r4,[r4,#0]
000016  401c              ANDS     r4,r4,r3
000018  fa24f001          LSR      r0,r4,r1
;;;494      return regval;
;;;495    }
00001c  bd30              POP      {r4,r5,pc}
;;;496    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x40013c14

                          AREA ||i.HAL_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_IRQHandler PROC
;;;444      */
;;;445    void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
000000  b570              PUSH     {r4-r6,lr}
;;;446    {
000002  4604              MOV      r4,r0
;;;447      uint32_t regval;
;;;448      uint32_t maskline;
;;;449    
;;;450      /* Compute line mask */
;;;451      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000004  7820              LDRB     r0,[r4,#0]
000006  f000011f          AND      r1,r0,#0x1f
00000a  2001              MOVS     r0,#1
00000c  fa00f501          LSL      r5,r0,r1
;;;452    
;;;453      /* Get pending bit  */
;;;454      regval = (EXTI->PR & maskline);
000010  4805              LDR      r0,|L7.40|
000012  6800              LDR      r0,[r0,#0]
000014  ea000605          AND      r6,r0,r5
;;;455      if (regval != 0x00u)
000018  b12e              CBZ      r6,|L7.38|
;;;456      {
;;;457        /* Clear pending bit */
;;;458        EXTI->PR = maskline;
00001a  4803              LDR      r0,|L7.40|
00001c  6005              STR      r5,[r0,#0]
;;;459    
;;;460        /* Call callback */
;;;461        if (hexti->PendingCallback != NULL)
00001e  6860              LDR      r0,[r4,#4]
000020  b108              CBZ      r0,|L7.38|
;;;462        {
;;;463          hexti->PendingCallback();
000022  6860              LDR      r0,[r4,#4]
000024  4780              BLX      r0
                  |L7.38|
;;;464        }
;;;465      }
;;;466    }
000026  bd70              POP      {r4-r6,pc}
;;;467    
                          ENDP

                  |L7.40|
                          DCD      0x40013c14

                          AREA ||i.HAL_EXTI_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_EXTI_RegisterCallback PROC
;;;379      */
;;;380    HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
000000  b510              PUSH     {r4,lr}
;;;381    {
000002  4603              MOV      r3,r0
;;;382      HAL_StatusTypeDef status = HAL_OK;
000004  2000              MOVS     r0,#0
;;;383    
;;;384      switch (CallbackID)
000006  b909              CBNZ     r1,|L8.12|
;;;385      {
;;;386        case  HAL_EXTI_COMMON_CB_ID:
;;;387          hexti->PendingCallback = pPendingCbfn;
000008  605a              STR      r2,[r3,#4]
;;;388          break;
00000a  e001              B        |L8.16|
                  |L8.12|
;;;389    
;;;390        default:
;;;391          status = HAL_ERROR;
00000c  2001              MOVS     r0,#1
;;;392          break;
00000e  bf00              NOP      
                  |L8.16|
000010  bf00              NOP                            ;388
;;;393      }
;;;394    
;;;395      return status;
;;;396    }
000012  bd10              POP      {r4,pc}
;;;397    
                          ENDP


                          AREA ||i.HAL_EXTI_SetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_SetConfigLine PROC
;;;142      */
;;;143    HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
000002  4604              MOV      r4,r0
;;;145      uint32_t regval;
;;;146      uint32_t linepos;
;;;147      uint32_t maskline;
;;;148    
;;;149      /* Check null pointer */
;;;150      if ((hexti == NULL) || (pExtiConfig == NULL))
000004  b104              CBZ      r4,|L9.8|
000006  b909              CBNZ     r1,|L9.12|
                  |L9.8|
;;;151      {
;;;152        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L9.10|
;;;153      }
;;;154    
;;;155      /* Check parameters */
;;;156      assert_param(IS_EXTI_LINE(pExtiConfig->Line));
;;;157      assert_param(IS_EXTI_MODE(pExtiConfig->Mode));
;;;158    
;;;159      /* Assign line number to handle */
;;;160      hexti->Line = pExtiConfig->Line;
;;;161    
;;;162      /* Compute line mask */
;;;163      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
;;;164      maskline = (1uL << linepos);
;;;165    
;;;166      /* Configure triggers for configurable lines */
;;;167      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
;;;168      {
;;;169        assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));
;;;170    
;;;171        /* Configure rising trigger */
;;;172        /* Mask or set line */
;;;173        if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
;;;174        {
;;;175          EXTI->RTSR |= maskline;
;;;176        }
;;;177        else
;;;178        {
;;;179          EXTI->RTSR &= ~maskline;
;;;180        }
;;;181    
;;;182        /* Configure falling trigger */
;;;183        /* Mask or set line */
;;;184        if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
;;;185        {
;;;186          EXTI->FTSR |= maskline;
;;;187        }
;;;188        else
;;;189        {
;;;190          EXTI->FTSR &= ~maskline;
;;;191        }
;;;192    
;;;193    
;;;194        /* Configure gpio port selection in case of gpio exti line */
;;;195        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;196        {
;;;197          assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
;;;198          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;199    
;;;200          regval = SYSCFG->EXTICR[linepos >> 2u];
;;;201          regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;202          regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;203          SYSCFG->EXTICR[linepos >> 2u] = regval;
;;;204        }
;;;205      }
;;;206    
;;;207      /* Configure interrupt mode : read current mode */
;;;208      /* Mask or set line */
;;;209      if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
;;;210      {
;;;211        EXTI->IMR |= maskline;
;;;212      }
;;;213      else
;;;214      {
;;;215        EXTI->IMR &= ~maskline;
;;;216      }
;;;217    
;;;218      /* Configure event mode : read current mode */
;;;219      /* Mask or set line */
;;;220      if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
;;;221      {
;;;222        EXTI->EMR |= maskline;
;;;223      }
;;;224      else
;;;225      {
;;;226        EXTI->EMR &= ~maskline;
;;;227      }
;;;228    
;;;229      return HAL_OK;
;;;230    }
00000a  bd70              POP      {r4-r6,pc}
                  |L9.12|
00000c  6808              LDR      r0,[r1,#0]            ;160
00000e  6020              STR      r0,[r4,#0]            ;160
000010  7808              LDRB     r0,[r1,#0]            ;163
000012  f000031f          AND      r3,r0,#0x1f           ;163
000016  2001              MOVS     r0,#1                 ;164
000018  fa00f203          LSL      r2,r0,r3              ;164
00001c  6808              LDR      r0,[r1,#0]            ;167
00001e  f0007000          AND      r0,r0,#0x2000000      ;167
000022  b3c8              CBZ      r0,|L9.152|
000024  7a08              LDRB     r0,[r1,#8]            ;173
000026  f0000001          AND      r0,r0,#1              ;173
00002a  b128              CBZ      r0,|L9.56|
00002c  482e              LDR      r0,|L9.232|
00002e  6800              LDR      r0,[r0,#0]            ;175
000030  4310              ORRS     r0,r0,r2              ;175
000032  4e2d              LDR      r6,|L9.232|
000034  6030              STR      r0,[r6,#0]            ;175
000036  e004              B        |L9.66|
                  |L9.56|
000038  482b              LDR      r0,|L9.232|
00003a  6800              LDR      r0,[r0,#0]            ;179
00003c  4390              BICS     r0,r0,r2              ;179
00003e  4e2a              LDR      r6,|L9.232|
000040  6030              STR      r0,[r6,#0]            ;179
                  |L9.66|
000042  7a08              LDRB     r0,[r1,#8]            ;184
000044  f0000002          AND      r0,r0,#2              ;184
000048  b138              CBZ      r0,|L9.90|
00004a  4827              LDR      r0,|L9.232|
00004c  1d00              ADDS     r0,r0,#4              ;186
00004e  6800              LDR      r0,[r0,#0]            ;186
000050  4310              ORRS     r0,r0,r2              ;186
000052  4e25              LDR      r6,|L9.232|
000054  1d36              ADDS     r6,r6,#4              ;186
000056  6030              STR      r0,[r6,#0]            ;186
000058  e006              B        |L9.104|
                  |L9.90|
00005a  4823              LDR      r0,|L9.232|
00005c  1d00              ADDS     r0,r0,#4              ;190
00005e  6800              LDR      r0,[r0,#0]            ;190
000060  4390              BICS     r0,r0,r2              ;190
000062  4e21              LDR      r6,|L9.232|
000064  1d36              ADDS     r6,r6,#4              ;190
000066  6030              STR      r0,[r6,#0]            ;190
                  |L9.104|
000068  6808              LDR      r0,[r1,#0]            ;195
00006a  f00060c0          AND      r0,r0,#0x6000000      ;195
00006e  f1b06fc0          CMP      r0,#0x6000000         ;195
000072  d111              BNE      |L9.152|
000074  481d              LDR      r0,|L9.236|
000076  089e              LSRS     r6,r3,#2              ;200
000078  f8505026          LDR      r5,[r0,r6,LSL #2]     ;200
00007c  0798              LSLS     r0,r3,#30             ;201
00007e  0f06              LSRS     r6,r0,#28             ;201
000080  200f              MOVS     r0,#0xf               ;201
000082  40b0              LSLS     r0,r0,r6              ;201
000084  4385              BICS     r5,r5,r0              ;201
000086  079e              LSLS     r6,r3,#30             ;202
000088  0f36              LSRS     r6,r6,#28             ;202
00008a  68c8              LDR      r0,[r1,#0xc]          ;202
00008c  40b0              LSLS     r0,r0,r6              ;202
00008e  4305              ORRS     r5,r5,r0              ;202
000090  4816              LDR      r0,|L9.236|
000092  089e              LSRS     r6,r3,#2              ;203
000094  f8405026          STR      r5,[r0,r6,LSL #2]     ;203
                  |L9.152|
000098  7908              LDRB     r0,[r1,#4]            ;209
00009a  f0000001          AND      r0,r0,#1              ;209
00009e  b138              CBZ      r0,|L9.176|
0000a0  4811              LDR      r0,|L9.232|
0000a2  3808              SUBS     r0,r0,#8              ;211
0000a4  6800              LDR      r0,[r0,#0]            ;211
0000a6  4310              ORRS     r0,r0,r2              ;211
0000a8  4e0f              LDR      r6,|L9.232|
0000aa  3e08              SUBS     r6,r6,#8              ;211
0000ac  6030              STR      r0,[r6,#0]            ;211
0000ae  e006              B        |L9.190|
                  |L9.176|
0000b0  480d              LDR      r0,|L9.232|
0000b2  3808              SUBS     r0,r0,#8              ;215
0000b4  6800              LDR      r0,[r0,#0]            ;215
0000b6  4390              BICS     r0,r0,r2              ;215
0000b8  4e0b              LDR      r6,|L9.232|
0000ba  3e08              SUBS     r6,r6,#8              ;215
0000bc  6030              STR      r0,[r6,#0]            ;215
                  |L9.190|
0000be  7908              LDRB     r0,[r1,#4]            ;220
0000c0  f0000002          AND      r0,r0,#2              ;220
0000c4  b138              CBZ      r0,|L9.214|
0000c6  4808              LDR      r0,|L9.232|
0000c8  1f00              SUBS     r0,r0,#4              ;222
0000ca  6800              LDR      r0,[r0,#0]            ;222
0000cc  4310              ORRS     r0,r0,r2              ;222
0000ce  4e06              LDR      r6,|L9.232|
0000d0  1f36              SUBS     r6,r6,#4              ;222
0000d2  6030              STR      r0,[r6,#0]            ;222
0000d4  e006              B        |L9.228|
                  |L9.214|
0000d6  4804              LDR      r0,|L9.232|
0000d8  1f00              SUBS     r0,r0,#4              ;226
0000da  6800              LDR      r0,[r0,#0]            ;226
0000dc  4390              BICS     r0,r0,r2              ;226
0000de  4e02              LDR      r6,|L9.232|
0000e0  1f36              SUBS     r6,r6,#4              ;226
0000e2  6030              STR      r0,[r6,#0]            ;226
                  |L9.228|
0000e4  2000              MOVS     r0,#0                 ;229
0000e6  e790              B        |L9.10|
;;;231    
                          ENDP

                  |L9.232|
                          DCD      0x40013c08
                  |L9.236|
                          DCD      0x40013808

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REVSH|
#line 478
|__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____RRX|
#line 665
|__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
