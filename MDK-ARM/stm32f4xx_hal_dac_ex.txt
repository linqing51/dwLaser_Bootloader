; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\stm32f4xx_hal_dac_ex.o --asm_dir=./ --list_dir=--list --depend=mcu_application\stm32f4xx_hal_dac_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\stm32f4xx_hal_dac_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dac_ex.c]
                          THUMB

                          AREA ||i.DAC_DMAConvCpltCh2||, CODE, READONLY, ALIGN=1

                  DAC_DMAConvCpltCh2 PROC
;;;313      */
;;;314    void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;315    {
000002  4604              MOV      r4,r0
;;;316      DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;317      
;;;318    #if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
;;;319      hdac->ConvCpltCallbackCh2(hdac);
;;;320    #else
;;;321      HAL_DACEx_ConvCpltCallbackCh2(hdac); 
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_DACEx_ConvCpltCallbackCh2
;;;322    #endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
;;;323      
;;;324      hdac->State= HAL_DAC_STATE_READY;
00000c  2001              MOVS     r0,#1
00000e  7128              STRB     r0,[r5,#4]
;;;325    }
000010  bd70              POP      {r4-r6,pc}
;;;326    
                          ENDP


                          AREA ||i.DAC_DMAErrorCh2||, CODE, READONLY, ALIGN=1

                  DAC_DMAErrorCh2 PROC
;;;349      */
;;;350    void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;351    {
000002  4605              MOV      r5,r0
;;;352      DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;353        
;;;354      /* Set DAC error code to DMA error */
;;;355      hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
000006  6920              LDR      r0,[r4,#0x10]
000008  f0400004          ORR      r0,r0,#4
00000c  6120              STR      r0,[r4,#0x10]
;;;356        
;;;357    #if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
;;;358      hdac->ErrorCallbackCh2(hdac);
;;;359    #else
;;;360      HAL_DACEx_ErrorCallbackCh2(hdac); 
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       HAL_DACEx_ErrorCallbackCh2
;;;361    #endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
;;;362        
;;;363      hdac->State= HAL_DAC_STATE_READY;
000014  2001              MOVS     r0,#1
000016  7120              STRB     r0,[r4,#4]
;;;364    }
000018  bd70              POP      {r4-r6,pc}
;;;365    
                          ENDP


                          AREA ||i.DAC_DMAHalfConvCpltCh2||, CODE, READONLY, ALIGN=1

                  DAC_DMAHalfConvCpltCh2 PROC
;;;332      */
;;;333    void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;334    {
000002  4604              MOV      r4,r0
;;;335        DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;336        /* Conversion complete callback */
;;;337    #if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
;;;338      hdac->ConvHalfCpltCallbackCh2(hdac);
;;;339    #else
;;;340        HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_DACEx_ConvHalfCpltCallbackCh2
;;;341    #endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
;;;342    }
00000c  bd70              POP      {r4-r6,pc}
;;;343    
                          ENDP


                          AREA ||i.HAL_DACEx_ConvCpltCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_ConvCpltCallbackCh2 PROC
;;;253      */
;;;254    __weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
000000  4770              BX       lr
;;;255    {
;;;256      /* Prevent unused argument(s) compilation warning */
;;;257      UNUSED(hdac);
;;;258      /* NOTE : This function Should not be modified, when the callback is needed,
;;;259                the HAL_DAC_ConvCpltCallback could be implemented in the user file
;;;260       */
;;;261    }
;;;262    
                          ENDP


                          AREA ||i.HAL_DACEx_ConvHalfCpltCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_ConvHalfCpltCallbackCh2 PROC
;;;268      */
;;;269    __weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
000000  4770              BX       lr
;;;270    {
;;;271      /* Prevent unused argument(s) compilation warning */
;;;272      UNUSED(hdac);
;;;273      /* NOTE : This function Should not be modified, when the callback is needed,
;;;274                the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
;;;275       */
;;;276    }
;;;277    
                          ENDP


                          AREA ||i.HAL_DACEx_DMAUnderrunCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_DMAUnderrunCallbackCh2 PROC
;;;298      */
;;;299    __weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
000000  4770              BX       lr
;;;300    {
;;;301      /* Prevent unused argument(s) compilation warning */
;;;302      UNUSED(hdac);
;;;303      /* NOTE : This function Should not be modified, when the callback is needed,
;;;304                the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
;;;305       */
;;;306    }
;;;307    
                          ENDP


                          AREA ||i.HAL_DACEx_DualGetValue||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_DualGetValue PROC
;;;91       */
;;;92     uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef* hdac)
000000  4601              MOV      r1,r0
;;;93     {
;;;94       uint32_t tmp = 0U;
000002  2000              MOVS     r0,#0
;;;95       
;;;96       tmp |= hdac->Instance->DOR1;
000004  680a              LDR      r2,[r1,#0]
000006  6ad2              LDR      r2,[r2,#0x2c]
000008  4310              ORRS     r0,r0,r2
;;;97       
;;;98       tmp |= hdac->Instance->DOR2 << 16U;
00000a  680a              LDR      r2,[r1,#0]
00000c  6b12              LDR      r2,[r2,#0x30]
00000e  ea404002          ORR      r0,r0,r2,LSL #16
;;;99       
;;;100      /* Returns the DAC channel data output register value */
;;;101      return tmp;
;;;102    }
000012  4770              BX       lr
;;;103    
                          ENDP


                          AREA ||i.HAL_DACEx_DualSetValue||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_DualSetValue PROC
;;;214      */
;;;215    HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
000000  b570              PUSH     {r4-r6,lr}
;;;216    {  
000002  4604              MOV      r4,r0
;;;217      uint32_t data = 0U, tmp = 0U;
000004  2600              MOVS     r6,#0
000006  2500              MOVS     r5,#0
;;;218      
;;;219      /* Check the parameters */
;;;220      assert_param(IS_DAC_ALIGN(Alignment));
;;;221      assert_param(IS_DAC_DATA(Data1));
;;;222      assert_param(IS_DAC_DATA(Data2));
;;;223      
;;;224      /* Calculate and set dual DAC data holding register value */
;;;225      if (Alignment == DAC_ALIGN_8B_R)
000008  2908              CMP      r1,#8
00000a  d102              BNE      |L8.18|
;;;226      {
;;;227        data = ((uint32_t)Data2 << 8U) | Data1; 
00000c  ea422603          ORR      r6,r2,r3,LSL #8
000010  e001              B        |L8.22|
                  |L8.18|
;;;228      }
;;;229      else
;;;230      {
;;;231        data = ((uint32_t)Data2 << 16U) | Data1;
000012  ea424603          ORR      r6,r2,r3,LSL #16
                  |L8.22|
;;;232      }
;;;233      
;;;234      tmp = (uint32_t)hdac->Instance;
000016  6825              LDR      r5,[r4,#0]
;;;235      tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
000018  f1010020          ADD      r0,r1,#0x20
00001c  4405              ADD      r5,r5,r0
;;;236    
;;;237      /* Set the dual DAC selected data holding register */
;;;238      *(__IO uint32_t *)tmp = data;
00001e  602e              STR      r6,[r5,#0]
;;;239      
;;;240      /* Return function status */
;;;241      return HAL_OK;
000020  2000              MOVS     r0,#0
;;;242    }
000022  bd70              POP      {r4-r6,pc}
;;;243    
                          ENDP


                          AREA ||i.HAL_DACEx_ErrorCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_ErrorCallbackCh2 PROC
;;;283      */
;;;284    __weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
000000  4770              BX       lr
;;;285    {
;;;286      /* Prevent unused argument(s) compilation warning */
;;;287      UNUSED(hdac);
;;;288      /* NOTE : This function Should not be modified, when the callback is needed,
;;;289                the HAL_DAC_ErrorCallback could be implemented in the user file
;;;290       */
;;;291    }
;;;292    
                          ENDP


                          AREA ||i.HAL_DACEx_NoiseWaveGenerate||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_NoiseWaveGenerate PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
000000  b510              PUSH     {r4,lr}
;;;176    {  
000002  4603              MOV      r3,r0
;;;177      /* Check the parameters */
;;;178      assert_param(IS_DAC_CHANNEL(Channel));
;;;179      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
;;;180      
;;;181      /* Process locked */
;;;182      __HAL_LOCK(hdac);
000004  bf00              NOP      
000006  7958              LDRB     r0,[r3,#5]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L10.16|
00000c  2002              MOVS     r0,#2
                  |L10.14|
;;;183      
;;;184      /* Change DAC state */
;;;185      hdac->State = HAL_DAC_STATE_BUSY;
;;;186      
;;;187      /* Enable the selected wave generation for the selected DAC channel */
;;;188      MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_0 | Amplitude) << Channel);
;;;189      
;;;190      /* Change DAC state */
;;;191      hdac->State = HAL_DAC_STATE_READY;
;;;192      
;;;193      /* Process unlocked */
;;;194      __HAL_UNLOCK(hdac);
;;;195      
;;;196      /* Return function status */
;;;197      return HAL_OK;
;;;198    }
00000e  bd10              POP      {r4,pc}
                  |L10.16|
000010  2001              MOVS     r0,#1                 ;182
000012  7158              STRB     r0,[r3,#5]            ;182
000014  bf00              NOP                            ;182
000016  2002              MOVS     r0,#2                 ;185
000018  7118              STRB     r0,[r3,#4]            ;185
00001a  6818              LDR      r0,[r3,#0]            ;188
00001c  6800              LDR      r0,[r0,#0]            ;188
00001e  f44f647c          MOV      r4,#0xfc0             ;188
000022  408c              LSLS     r4,r4,r1              ;188
000024  43a0              BICS     r0,r0,r4              ;188
000026  f0420440          ORR      r4,r2,#0x40           ;188
00002a  408c              LSLS     r4,r4,r1              ;188
00002c  4320              ORRS     r0,r0,r4              ;188
00002e  681c              LDR      r4,[r3,#0]            ;188
000030  6020              STR      r0,[r4,#0]            ;188
000032  2001              MOVS     r0,#1                 ;191
000034  7118              STRB     r0,[r3,#4]            ;191
000036  bf00              NOP                            ;194
000038  2000              MOVS     r0,#0                 ;194
00003a  7158              STRB     r0,[r3,#5]            ;194
00003c  bf00              NOP                            ;194
00003e  bf00              NOP                            ;197
000040  e7e5              B        |L10.14|
;;;199    
                          ENDP


                          AREA ||i.HAL_DACEx_TriangleWaveGenerate||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_TriangleWaveGenerate PROC
;;;126      */
;;;127    HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
000000  b510              PUSH     {r4,lr}
;;;128    {  
000002  4603              MOV      r3,r0
;;;129      /* Check the parameters */
;;;130      assert_param(IS_DAC_CHANNEL(Channel));
;;;131      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
;;;132      
;;;133      /* Process locked */
;;;134      __HAL_LOCK(hdac);
000004  bf00              NOP      
000006  7958              LDRB     r0,[r3,#5]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L11.16|
00000c  2002              MOVS     r0,#2
                  |L11.14|
;;;135      
;;;136      /* Change DAC state */
;;;137      hdac->State = HAL_DAC_STATE_BUSY;
;;;138      
;;;139      /* Enable the selected wave generation for the selected DAC channel */
;;;140      MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
;;;141      
;;;142      /* Change DAC state */
;;;143      hdac->State = HAL_DAC_STATE_READY;
;;;144      
;;;145      /* Process unlocked */
;;;146      __HAL_UNLOCK(hdac);
;;;147      
;;;148      /* Return function status */
;;;149      return HAL_OK;
;;;150    }
00000e  bd10              POP      {r4,pc}
                  |L11.16|
000010  2001              MOVS     r0,#1                 ;134
000012  7158              STRB     r0,[r3,#5]            ;134
000014  bf00              NOP                            ;134
000016  2002              MOVS     r0,#2                 ;137
000018  7118              STRB     r0,[r3,#4]            ;137
00001a  6818              LDR      r0,[r3,#0]            ;140
00001c  6800              LDR      r0,[r0,#0]            ;140
00001e  f44f647c          MOV      r4,#0xfc0             ;140
000022  408c              LSLS     r4,r4,r1              ;140
000024  43a0              BICS     r0,r0,r4              ;140
000026  f0420480          ORR      r4,r2,#0x80           ;140
00002a  408c              LSLS     r4,r4,r1              ;140
00002c  4320              ORRS     r0,r0,r4              ;140
00002e  681c              LDR      r4,[r3,#0]            ;140
000030  6020              STR      r0,[r4,#0]            ;140
000032  2001              MOVS     r0,#1                 ;143
000034  7118              STRB     r0,[r3,#4]            ;143
000036  bf00              NOP                            ;146
000038  2000              MOVS     r0,#0                 ;146
00003a  7158              STRB     r0,[r3,#5]            ;146
00003c  bf00              NOP                            ;146
00003e  bf00              NOP                            ;149
000040  e7e5              B        |L11.14|
;;;151    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dac_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REVSH|
#line 478
|__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____RRX|
#line 665
|__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
