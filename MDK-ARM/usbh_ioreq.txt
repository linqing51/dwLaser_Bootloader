; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\usbh_ioreq.o --asm_dir=./ --list_dir=--list --depend=mcu_application\usbh_ioreq.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\usbh_ioreq.crf ../Middlewares/ST/STM32_USB_Host_Library/Core/Src/usbh_ioreq.c]
                          THUMB

                          AREA ||i.USBH_BulkReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_BulkReceiveData PROC
;;;209      */
;;;210    USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;211                                            uint8_t *buff,
;;;212                                            uint16_t length,
;;;213                                            uint8_t pipe_num)
;;;214    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;215      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00000c  2000              MOVS     r0,#0
00000e  2101              MOVS     r1,#1
000010  2302              MOVS     r3,#2
000012  460a              MOV      r2,r1
000014  e88d0032          STM      sp,{r1,r4,r5}
000018  9003              STR      r0,[sp,#0xc]
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       USBH_LL_SubmitURB
;;;216                        pipe_num,             /* Pipe index       */
;;;217                        1U,                    /* Direction : IN   */
;;;218                        USBH_EP_BULK,         /* EP type          */
;;;219                        USBH_PID_DATA,        /* Type Data        */
;;;220                        buff,                 /* data buffer      */
;;;221                        length,               /* data length      */
;;;222                        0U);
;;;223      return USBH_OK;
000022  2000              MOVS     r0,#0
;;;224    }
000024  b004              ADD      sp,sp,#0x10
000026  e8bd81f0          POP      {r4-r8,pc}
;;;225    
                          ENDP


                          AREA ||i.USBH_BulkSendData||, CODE, READONLY, ALIGN=1

                  USBH_BulkSendData PROC
;;;177      */
;;;178    USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;179                                         uint8_t *buff,
;;;180                                         uint16_t length,
;;;181                                         uint8_t pipe_num,
;;;182                                         uint8_t do_ping)
;;;183    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;184      if (phost->device.speed != USBH_SPEED_HIGH)
000010  f894031d          LDRB     r0,[r4,#0x31d]
000014  b108              CBZ      r0,|L2.26|
;;;185      {
;;;186        do_ping = 0U;
000016  f04f0800          MOV      r8,#0
                  |L2.26|
;;;187      }
;;;188    
;;;189      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00001a  2001              MOVS     r0,#1
00001c  2302              MOVS     r3,#2
00001e  2200              MOVS     r2,#0
000020  4631              MOV      r1,r6
000022  e88d01a1          STM      sp,{r0,r5,r7,r8}
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       USBH_LL_SubmitURB
;;;190                        pipe_num,             /* Pipe index       */
;;;191                        0U,                    /* Direction : IN   */
;;;192                        USBH_EP_BULK,         /* EP type          */
;;;193                        USBH_PID_DATA,        /* Type Data        */
;;;194                        buff,                 /* data buffer      */
;;;195                        length,               /* data length      */
;;;196                        do_ping);             /* do ping (HS Only)*/
;;;197      return USBH_OK;
00002c  2000              MOVS     r0,#0
;;;198    }
00002e  b004              ADD      sp,sp,#0x10
000030  e8bd81f0          POP      {r4-r8,pc}
;;;199    
                          ENDP


                          AREA ||i.USBH_CtlReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_CtlReceiveData PROC
;;;150      */
;;;151    USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;152                                           uint8_t *buff,
;;;153                                           uint16_t length,
;;;154                                           uint8_t pipe_num)
;;;155    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;156      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00000c  2000              MOVS     r0,#0
00000e  2101              MOVS     r1,#1
000010  4603              MOV      r3,r0
000012  460a              MOV      r2,r1
000014  e88d0032          STM      sp,{r1,r4,r5}
000018  9003              STR      r0,[sp,#0xc]
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       USBH_LL_SubmitURB
;;;157                        pipe_num,             /* Pipe index       */
;;;158                        1U,                    /* Direction : IN   */
;;;159                        USBH_EP_CONTROL,      /* EP type          */
;;;160                        USBH_PID_DATA,        /* Type Data        */
;;;161                        buff,                 /* data buffer      */
;;;162                        length,               /* data length      */
;;;163                        0U);
;;;164      return USBH_OK;
000022  2000              MOVS     r0,#0
;;;165    
;;;166    }
000024  b004              ADD      sp,sp,#0x10
000026  e8bd81f0          POP      {r4-r8,pc}
;;;167    
                          ENDP


                          AREA ||i.USBH_CtlSendData||, CODE, READONLY, ALIGN=1

                  USBH_CtlSendData PROC
;;;117      */
;;;118    USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;119                                        uint8_t *buff,
;;;120                                        uint16_t length,
;;;121                                        uint8_t pipe_num,
;;;122                                        uint8_t do_ping)
;;;123    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;124      if (phost->device.speed != USBH_SPEED_HIGH)
000010  f894031d          LDRB     r0,[r4,#0x31d]
000014  b108              CBZ      r0,|L4.26|
;;;125      {
;;;126        do_ping = 0U;
000016  f04f0800          MOV      r8,#0
                  |L4.26|
;;;127      }
;;;128    
;;;129      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00001a  2001              MOVS     r0,#1
00001c  2300              MOVS     r3,#0
00001e  461a              MOV      r2,r3
000020  4631              MOV      r1,r6
000022  e88d01a1          STM      sp,{r0,r5,r7,r8}
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       USBH_LL_SubmitURB
;;;130                        pipe_num,             /* Pipe index       */
;;;131                        0U,                   /* Direction : OUT  */
;;;132                        USBH_EP_CONTROL,      /* EP type          */
;;;133                        USBH_PID_DATA,        /* Type Data        */
;;;134                        buff,                 /* data buffer      */
;;;135                        length,               /* data length      */
;;;136                        do_ping);             /* do ping (HS Only)*/
;;;137    
;;;138      return USBH_OK;
00002c  2000              MOVS     r0,#0
;;;139    }
00002e  b004              ADD      sp,sp,#0x10
000030  e8bd81f0          POP      {r4-r8,pc}
;;;140    
                          ENDP


                          AREA ||i.USBH_CtlSendSetup||, CODE, READONLY, ALIGN=1

                  USBH_CtlSendSetup PROC
;;;91       */
;;;92     USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
000000  b57f              PUSH     {r0-r6,lr}
;;;93                                          uint8_t *buff,
;;;94                                          uint8_t pipe_num)
;;;95     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;96     
;;;97       USBH_LL_SubmitURB(phost,                      /* Driver handle    */
000008  2000              MOVS     r0,#0
00000a  2108              MOVS     r1,#8
00000c  e9cd0400          STRD     r0,r4,[sp,#0]
000010  4603              MOV      r3,r0
000012  4602              MOV      r2,r0
000014  e9cd1002          STRD     r1,r0,[sp,#8]
000018  4629              MOV      r1,r5
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       USBH_LL_SubmitURB
;;;98                         pipe_num,             /* Pipe index       */
;;;99                         0U,                    /* Direction : OUT  */
;;;100                        USBH_EP_CONTROL,      /* EP type          */
;;;101                        USBH_PID_SETUP,       /* Type setup       */
;;;102                        buff,                 /* data buffer      */
;;;103                        USBH_SETUP_PKT_SIZE,  /* data length      */
;;;104                        0U);
;;;105      return USBH_OK;
000020  2000              MOVS     r0,#0
;;;106    }
000022  b004              ADD      sp,sp,#0x10
000024  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||i.USBH_InterruptReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_InterruptReceiveData PROC
;;;235      */
;;;236    USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;237                                                 uint8_t *buff,
;;;238                                                 uint8_t length,
;;;239                                                 uint8_t pipe_num)
;;;240    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;241      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00000c  2000              MOVS     r0,#0
00000e  2101              MOVS     r1,#1
000010  2303              MOVS     r3,#3
000012  460a              MOV      r2,r1
000014  e88d0032          STM      sp,{r1,r4,r5}
000018  9003              STR      r0,[sp,#0xc]
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       USBH_LL_SubmitURB
;;;242                        pipe_num,             /* Pipe index       */
;;;243                        1U,                   /* Direction : IN   */
;;;244                        USBH_EP_INTERRUPT,    /* EP type          */
;;;245                        USBH_PID_DATA,        /* Type Data        */
;;;246                        buff,                 /* data buffer      */
;;;247                        (uint16_t)length,     /* data length      */
;;;248                        0U);
;;;249    
;;;250      return USBH_OK;
000022  2000              MOVS     r0,#0
;;;251    }
000024  b004              ADD      sp,sp,#0x10
000026  e8bd81f0          POP      {r4-r8,pc}
;;;252    
                          ENDP


                          AREA ||i.USBH_InterruptSendData||, CODE, READONLY, ALIGN=1

                  USBH_InterruptSendData PROC
;;;261      */
;;;262    USBH_StatusTypeDef USBH_InterruptSendData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;263                                              uint8_t *buff,
;;;264                                              uint8_t length,
;;;265                                              uint8_t pipe_num)
;;;266    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;267      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00000c  2000              MOVS     r0,#0
00000e  2101              MOVS     r1,#1
000010  2303              MOVS     r3,#3
000012  4602              MOV      r2,r0
000014  e88d0032          STM      sp,{r1,r4,r5}
000018  9003              STR      r0,[sp,#0xc]
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       USBH_LL_SubmitURB
;;;268                        pipe_num,             /* Pipe index       */
;;;269                        0U,                   /* Direction : OUT   */
;;;270                        USBH_EP_INTERRUPT,    /* EP type          */
;;;271                        USBH_PID_DATA,        /* Type Data        */
;;;272                        buff,                 /* data buffer      */
;;;273                        (uint16_t)length,     /* data length      */
;;;274                        0U);
;;;275    
;;;276      return USBH_OK;
000022  2000              MOVS     r0,#0
;;;277    }
000024  b004              ADD      sp,sp,#0x10
000026  e8bd81f0          POP      {r4-r8,pc}
;;;278    
                          ENDP


                          AREA ||i.USBH_IsocReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_IsocReceiveData PROC
;;;287      */
;;;288    USBH_StatusTypeDef USBH_IsocReceiveData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;289                                            uint8_t *buff,
;;;290                                            uint32_t length,
;;;291                                            uint8_t pipe_num)
;;;292    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;293      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00000c  2100              MOVS     r1,#0
00000e  b2a8              UXTH     r0,r5
000010  2201              MOVS     r2,#1
000012  4613              MOV      r3,r2
000014  e9cd2400          STRD     r2,r4,[sp,#0]
000018  e9cd0102          STRD     r0,r1,[sp,#8]
00001c  4631              MOV      r1,r6
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       USBH_LL_SubmitURB
;;;294                        pipe_num,             /* Pipe index       */
;;;295                        1U,                   /* Direction : IN   */
;;;296                        USBH_EP_ISO,          /* EP type          */
;;;297                        USBH_PID_DATA,        /* Type Data        */
;;;298                        buff,                 /* data buffer      */
;;;299                        (uint16_t)length,     /* data length      */
;;;300                        0U);
;;;301    
;;;302    
;;;303      return USBH_OK;
000024  2000              MOVS     r0,#0
;;;304    }
000026  b004              ADD      sp,sp,#0x10
000028  e8bd81f0          POP      {r4-r8,pc}
;;;305    
                          ENDP


                          AREA ||i.USBH_IsocSendData||, CODE, READONLY, ALIGN=1

                  USBH_IsocSendData PROC
;;;314      */
;;;315    USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;316                                         uint8_t *buff,
;;;317                                         uint32_t length,
;;;318                                         uint8_t pipe_num)
;;;319    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;320      USBH_LL_SubmitURB(phost,                      /* Driver handle    */
00000c  2100              MOVS     r1,#0
00000e  b2a8              UXTH     r0,r5
000010  2201              MOVS     r2,#1
000012  4613              MOV      r3,r2
000014  e9cd2400          STRD     r2,r4,[sp,#0]
000018  e9cd0102          STRD     r0,r1,[sp,#8]
00001c  460a              MOV      r2,r1
00001e  4631              MOV      r1,r6
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       USBH_LL_SubmitURB
;;;321                        pipe_num,             /* Pipe index       */
;;;322                        0U,                   /* Direction : OUT   */
;;;323                        USBH_EP_ISO,          /* EP type          */
;;;324                        USBH_PID_DATA,        /* Type Data        */
;;;325                        buff,                 /* data buffer      */
;;;326                        (uint16_t)length,     /* data length      */
;;;327                        0U);
;;;328    
;;;329      return USBH_OK;
000026  2000              MOVS     r0,#0
;;;330    }
000028  b004              ADD      sp,sp,#0x10
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;331    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Middlewares/ST/STM32_USB_Host_Library/Core/Src/usbh_ioreq.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_usbh_ioreq_c_d3bbdb7f____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___12_usbh_ioreq_c_d3bbdb7f____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_usbh_ioreq_c_d3bbdb7f____REVSH|
#line 478
|__asm___12_usbh_ioreq_c_d3bbdb7f____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_usbh_ioreq_c_d3bbdb7f____RRX|
#line 665
|__asm___12_usbh_ioreq_c_d3bbdb7f____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
