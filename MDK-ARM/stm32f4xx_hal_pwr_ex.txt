; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\stm32f4xx_hal_pwr_ex.o --asm_dir=./ --list_dir=--list --depend=mcu_application\stm32f4xx_hal_pwr_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\stm32f4xx_hal_pwr_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c]
                          THUMB

                          AREA ||i.HAL_PWREx_ControlVoltageScaling||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_ControlVoltageScaling PROC
;;;289      */
;;;290    HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
000000  b538              PUSH     {r3-r5,lr}
;;;291    {
000002  4605              MOV      r5,r0
;;;292      uint32_t tickstart = 0U;
000004  2400              MOVS     r4,#0
;;;293      
;;;294      assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
;;;295      
;;;296      /* Enable PWR RCC Clock Peripheral */
;;;297      __HAL_RCC_PWR_CLK_ENABLE();
000006  bf00              NOP      
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  4832              LDR      r0,|L1.216|
00000e  6800              LDR      r0,[r0,#0]
000010  f0405080          ORR      r0,r0,#0x10000000
000014  4930              LDR      r1,|L1.216|
000016  6008              STR      r0,[r1,#0]
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f0005080          AND      r0,r0,#0x10000000
000020  9000              STR      r0,[sp,#0]
000022  bf00              NOP      
000024  bf00              NOP      
;;;298      
;;;299      /* Check if the PLL is used as system clock or not */
;;;300      if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
000026  482c              LDR      r0,|L1.216|
000028  3838              SUBS     r0,r0,#0x38
00002a  6800              LDR      r0,[r0,#0]
00002c  f000000c          AND      r0,r0,#0xc
000030  2808              CMP      r0,#8
000032  d04c              BEQ      |L1.206|
;;;301      {
;;;302        /* Disable the main PLL */
;;;303        __HAL_RCC_PLL_DISABLE();
000034  2000              MOVS     r0,#0
000036  4929              LDR      r1,|L1.220|
000038  6608              STR      r0,[r1,#0x60]
;;;304        
;;;305        /* Get Start Tick */
;;;306        tickstart = HAL_GetTick();    
00003a  f7fffffe          BL       HAL_GetTick
00003e  4604              MOV      r4,r0
;;;307        /* Wait till PLL is disabled */  
;;;308        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
000040  e006              B        |L1.80|
                  |L1.66|
;;;309        {
;;;310          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
000042  f7fffffe          BL       HAL_GetTick
000046  1b00              SUBS     r0,r0,r4
000048  2802              CMP      r0,#2
00004a  d901              BLS      |L1.80|
;;;311          {
;;;312            return HAL_TIMEOUT;
00004c  2003              MOVS     r0,#3
                  |L1.78|
;;;313          }
;;;314        }
;;;315        
;;;316        /* Set Range */
;;;317        __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
;;;318        
;;;319        /* Enable the main PLL */
;;;320        __HAL_RCC_PLL_ENABLE();
;;;321        
;;;322        /* Get Start Tick */
;;;323        tickstart = HAL_GetTick();
;;;324        /* Wait till PLL is ready */  
;;;325        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;326        {
;;;327          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;328          {
;;;329            return HAL_TIMEOUT;
;;;330          } 
;;;331        }
;;;332        
;;;333        /* Get Start Tick */
;;;334        tickstart = HAL_GetTick();
;;;335        while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
;;;336        {
;;;337          if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
;;;338          {
;;;339            return HAL_TIMEOUT;
;;;340          } 
;;;341        }
;;;342      }
;;;343      else
;;;344      {
;;;345        return HAL_ERROR;
;;;346      }
;;;347    
;;;348      return HAL_OK;
;;;349    }
00004e  bd38              POP      {r3-r5,pc}
                  |L1.80|
000050  4821              LDR      r0,|L1.216|
000052  3840              SUBS     r0,r0,#0x40           ;308
000054  6800              LDR      r0,[r0,#0]            ;308
000056  f3c06040          UBFX     r0,r0,#25,#1          ;308
00005a  2800              CMP      r0,#0                 ;308
00005c  d1f1              BNE      |L1.66|
00005e  bf00              NOP                            ;317
000060  9000              STR      r0,[sp,#0]            ;317
000062  481f              LDR      r0,|L1.224|
000064  6800              LDR      r0,[r0,#0]            ;317
000066  f4204040          BIC      r0,r0,#0xc000         ;317
00006a  4328              ORRS     r0,r0,r5              ;317
00006c  491c              LDR      r1,|L1.224|
00006e  6008              STR      r0,[r1,#0]            ;317
000070  4608              MOV      r0,r1                 ;317
000072  6800              LDR      r0,[r0,#0]            ;317
000074  f4004040          AND      r0,r0,#0xc000         ;317
000078  9000              STR      r0,[sp,#0]            ;317
00007a  bf00              NOP                            ;317
00007c  bf00              NOP                            ;317
00007e  2001              MOVS     r0,#1                 ;320
000080  4916              LDR      r1,|L1.220|
000082  6608              STR      r0,[r1,#0x60]         ;320
000084  f7fffffe          BL       HAL_GetTick
000088  4604              MOV      r4,r0                 ;323
00008a  e006              B        |L1.154|
                  |L1.140|
00008c  f7fffffe          BL       HAL_GetTick
000090  1b00              SUBS     r0,r0,r4              ;327
000092  2802              CMP      r0,#2                 ;327
000094  d901              BLS      |L1.154|
000096  2003              MOVS     r0,#3                 ;329
000098  e7d9              B        |L1.78|
                  |L1.154|
00009a  480f              LDR      r0,|L1.216|
00009c  3840              SUBS     r0,r0,#0x40           ;325
00009e  6800              LDR      r0,[r0,#0]            ;325
0000a0  f3c06040          UBFX     r0,r0,#25,#1          ;325
0000a4  2800              CMP      r0,#0                 ;325
0000a6  d0f1              BEQ      |L1.140|
0000a8  f7fffffe          BL       HAL_GetTick
0000ac  4604              MOV      r4,r0                 ;334
0000ae  e007              B        |L1.192|
                  |L1.176|
0000b0  f7fffffe          BL       HAL_GetTick
0000b4  1b00              SUBS     r0,r0,r4              ;337
0000b6  f5b07f7a          CMP      r0,#0x3e8             ;337
0000ba  d901              BLS      |L1.192|
0000bc  2003              MOVS     r0,#3                 ;339
0000be  e7c6              B        |L1.78|
                  |L1.192|
0000c0  4807              LDR      r0,|L1.224|
0000c2  6840              LDR      r0,[r0,#4]            ;335
0000c4  f3c03080          UBFX     r0,r0,#14,#1          ;335
0000c8  2800              CMP      r0,#0                 ;335
0000ca  d0f1              BEQ      |L1.176|
0000cc  e001              B        |L1.210|
                  |L1.206|
0000ce  2001              MOVS     r0,#1                 ;345
0000d0  e7bd              B        |L1.78|
                  |L1.210|
0000d2  2000              MOVS     r0,#0                 ;348
0000d4  e7bb              B        |L1.78|
;;;350    #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */
                          ENDP

0000d6  0000              DCW      0x0000
                  |L1.216|
                          DCD      0x40023840
                  |L1.220|
                          DCD      0x42470000
                  |L1.224|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableBkUpReg||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableBkUpReg PROC
;;;166      */
;;;167    HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169      uint32_t tickstart = 0U;
000002  2400              MOVS     r4,#0
;;;170    
;;;171      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
000004  2000              MOVS     r0,#0
000006  490b              LDR      r1,|L2.52|
000008  6008              STR      r0,[r1,#0]
;;;172    
;;;173      /* Get tick */
;;;174      tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4604              MOV      r4,r0
;;;175    
;;;176      /* Wait till Backup regulator ready flag is set */  
;;;177      while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
000010  e007              B        |L2.34|
                  |L2.18|
;;;178      {
;;;179        if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
000012  f7fffffe          BL       HAL_GetTick
000016  1b00              SUBS     r0,r0,r4
000018  f5b07f7a          CMP      r0,#0x3e8
00001c  d901              BLS      |L2.34|
;;;180        {
;;;181          return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
                  |L2.32|
;;;182        } 
;;;183      }
;;;184      return HAL_OK;
;;;185    }
000020  bd10              POP      {r4,pc}
                  |L2.34|
000022  4805              LDR      r0,|L2.56|
000024  6840              LDR      r0,[r0,#4]            ;177
000026  f3c000c0          UBFX     r0,r0,#3,#1           ;177
00002a  2800              CMP      r0,#0                 ;177
00002c  d1f1              BNE      |L2.18|
00002e  bf00              NOP                            ;184
000030  e7f6              B        |L2.32|
;;;186    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x420e00a4
                  |L2.56|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableFlashPowerDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableFlashPowerDown PROC
;;;199      */
;;;200    void HAL_PWREx_DisableFlashPowerDown(void)
000000  2000              MOVS     r0,#0
;;;201    {
;;;202      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L3.8|
000004  6248              STR      r0,[r1,#0x24]
;;;203    }
000006  4770              BX       lr
;;;204    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_DisableLowRegulatorLowVoltage||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableLowRegulatorLowVoltage PROC
;;;393      */
;;;394    void HAL_PWREx_DisableLowRegulatorLowVoltage(void)
000000  2000              MOVS     r0,#0
;;;395    {
;;;396      *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  6288              STR      r0,[r1,#0x28]
;;;397    }
000006  4770              BX       lr
;;;398    
                          ENDP

                  |L4.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_DisableMainRegulatorLowVoltage||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableMainRegulatorLowVoltage PROC
;;;371      */
;;;372    void HAL_PWREx_DisableMainRegulatorLowVoltage(void)
000000  2000              MOVS     r0,#0
;;;373    {
;;;374      *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L5.8|
000004  62c8              STR      r0,[r1,#0x2c]
;;;375    }
000006  4770              BX       lr
;;;376    
                          ENDP

                  |L5.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_EnableBkUpReg||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableBkUpReg PROC
;;;142      */
;;;143    HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
000000  b510              PUSH     {r4,lr}
;;;144    {
;;;145      uint32_t tickstart = 0U;
000002  2400              MOVS     r4,#0
;;;146    
;;;147      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
000004  2001              MOVS     r0,#1
000006  490b              LDR      r1,|L6.52|
000008  6008              STR      r0,[r1,#0]
;;;148    
;;;149      /* Get tick */
;;;150      tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4604              MOV      r4,r0
;;;151    
;;;152      /* Wait till Backup regulator ready flag is set */  
;;;153      while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
000010  e007              B        |L6.34|
                  |L6.18|
;;;154      {
;;;155        if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
000012  f7fffffe          BL       HAL_GetTick
000016  1b00              SUBS     r0,r0,r4
000018  f5b07f7a          CMP      r0,#0x3e8
00001c  d901              BLS      |L6.34|
;;;156        {
;;;157          return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
                  |L6.32|
;;;158        } 
;;;159      }
;;;160      return HAL_OK;
;;;161    }
000020  bd10              POP      {r4,pc}
                  |L6.34|
000022  4805              LDR      r0,|L6.56|
000024  6840              LDR      r0,[r0,#4]            ;153
000026  f3c000c0          UBFX     r0,r0,#3,#1           ;153
00002a  2800              CMP      r0,#0                 ;153
00002c  d0f1              BEQ      |L6.18|
00002e  2000              MOVS     r0,#0                 ;160
000030  e7f6              B        |L6.32|
;;;162    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0x420e00a4
                  |L6.56|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableFlashPowerDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableFlashPowerDown PROC
;;;190      */
;;;191    void HAL_PWREx_EnableFlashPowerDown(void)
000000  2001              MOVS     r0,#1
;;;192    {
;;;193      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L7.8|
000004  6248              STR      r0,[r1,#0x24]
;;;194    }
000006  4770              BX       lr
;;;195    
                          ENDP

                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_EnableLowRegulatorLowVoltage||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableLowRegulatorLowVoltage PROC
;;;382      */
;;;383    void HAL_PWREx_EnableLowRegulatorLowVoltage(void)
000000  2001              MOVS     r0,#1
;;;384    {
;;;385      *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L8.8|
000004  6288              STR      r0,[r1,#0x28]
;;;386    }
000006  4770              BX       lr
;;;387    
                          ENDP

                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_EnableMainRegulatorLowVoltage||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableMainRegulatorLowVoltage PROC
;;;360      */
;;;361    void HAL_PWREx_EnableMainRegulatorLowVoltage(void)
000000  2001              MOVS     r0,#1
;;;362    {
;;;363      *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L9.8|
000004  62c8              STR      r0,[r1,#0x2c]
;;;364    }
000006  4770              BX       lr
;;;365    
                          ENDP

                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_GetVoltageRange||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_GetVoltageRange PROC
;;;212      */  
;;;213    uint32_t HAL_PWREx_GetVoltageRange(void)
000000  4802              LDR      r0,|L10.12|
;;;214    {
;;;215      return (PWR->CR & PWR_CR_VOS);
000002  6800              LDR      r0,[r0,#0]
000004  f4004040          AND      r0,r0,#0xc000
;;;216    }
000008  4770              BX       lr
;;;217    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x40007000

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REVSH|
#line 478
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____RRX|
#line 665
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
