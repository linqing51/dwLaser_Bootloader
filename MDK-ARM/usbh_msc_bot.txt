; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\usbh_msc_bot.o --asm_dir=./ --list_dir=--list --depend=mcu_application\usbh_msc_bot.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\usbh_msc_bot.crf ../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc_bot.c]
                          THUMB

                          AREA ||i.USBH_MSC_BOT_Abort||, CODE, READONLY, ALIGN=1

                  USBH_MSC_BOT_Abort PROC
;;;533      */
;;;534    static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;535    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;536      /* Prevent unused argument(s) compilation warning */
;;;537      UNUSED(lun);
;;;538    
;;;539      USBH_StatusTypeDef status = USBH_FAIL;
00000a  2702              MOVS     r7,#2
;;;540      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
00000c  f8d4037c          LDR      r0,[r4,#0x37c]
000010  69c6              LDR      r6,[r0,#0x1c]
;;;541    
;;;542      switch (dir)
000012  b115              CBZ      r5,|L1.26|
000014  2d01              CMP      r5,#1
000016  d10c              BNE      |L1.50|
000018  e005              B        |L1.38|
                  |L1.26|
;;;543      {
;;;544        case BOT_DIR_IN :
;;;545          /* send ClrFeture on Bulk IN endpoint */
;;;546          status = USBH_ClrFeature(phost, MSC_Handle->InEp);
00001a  79f1              LDRB     r1,[r6,#7]
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USBH_ClrFeature
000022  4607              MOV      r7,r0
;;;547    
;;;548          break;
000024  e006              B        |L1.52|
                  |L1.38|
;;;549    
;;;550        case BOT_DIR_OUT :
;;;551          /*send ClrFeature on Bulk OUT endpoint */
;;;552          status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
000026  79b1              LDRB     r1,[r6,#6]
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       USBH_ClrFeature
00002e  4607              MOV      r7,r0
;;;553          break;
000030  e000              B        |L1.52|
                  |L1.50|
;;;554    
;;;555        default:
;;;556          break;
000032  bf00              NOP      
                  |L1.52|
000034  bf00              NOP                            ;548
;;;557      }
;;;558      return status;
000036  4638              MOV      r0,r7
;;;559    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;560    
                          ENDP


                          AREA ||i.USBH_MSC_BOT_Init||, CODE, READONLY, ALIGN=2

                  USBH_MSC_BOT_Init PROC
;;;149      */
;;;150    USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
000000  4602              MOV      r2,r0
;;;151    {
;;;152    
;;;153      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000002  f8d2037c          LDR      r0,[r2,#0x37c]
000006  69c1              LDR      r1,[r0,#0x1c]
;;;154    
;;;155      MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
000008  4b05              LDR      r3,|L2.32|
00000a  654b              STR      r3,[r1,#0x54]
;;;156      MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
00000c  4b05              LDR      r3,|L2.36|
00000e  658b              STR      r3,[r1,#0x58]
;;;157      MSC_Handle->hbot.state = BOT_SEND_CBW;
000010  2301              MOVS     r3,#1
000012  f8813050          STRB     r3,[r1,#0x50]
;;;158      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
000016  f8813052          STRB     r3,[r1,#0x52]
;;;159    
;;;160      return USBH_OK;
00001a  2000              MOVS     r0,#0
;;;161    }
00001c  4770              BX       lr
;;;162    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x43425355
                  |L2.36|
                          DCD      0x20304050

                          AREA ||i.USBH_MSC_BOT_Process||, CODE, READONLY, ALIGN=1

                  USBH_MSC_BOT_Process PROC
;;;171      */
;;;172    USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;173    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
;;;174      USBH_StatusTypeDef   status = USBH_BUSY;
000008  f04f0901          MOV      r9,#1
;;;175      USBH_StatusTypeDef   error  = USBH_BUSY;
00000c  2601              MOVS     r6,#1
;;;176      BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
00000e  46b2              MOV      r10,r6
;;;177      USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
000010  2500              MOVS     r5,#0
;;;178      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000012  f8d7037c          LDR      r0,[r7,#0x37c]
000016  69c4              LDR      r4,[r0,#0x1c]
;;;179      uint8_t toggle = 0U;
000018  46ab              MOV      r11,r5
;;;180    
;;;181      switch (MSC_Handle->hbot.state)
00001a  f8940050          LDRB     r0,[r4,#0x50]
00001e  280c              CMP      r0,#0xc
000020  d274              BCS      |L3.268|
000022  e8dff000          TBB      [pc,r0]
000026  7306              DCB      0x73,0x06
000028  153c4774          DCB      0x15,0x3c,0x47,0x74
00002c  81b5c0df          DCB      0x81,0xb5,0xc0,0xdf
000030  f2f0              DCB      0xf2,0xf0
;;;182      {
;;;183        case BOT_SEND_CBW:
;;;184          MSC_Handle->hbot.cbw.field.LUN = lun;
000032  f8848061          STRB     r8,[r4,#0x61]
;;;185          MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
000036  2102              MOVS     r1,#2
000038  f8841050          STRB     r1,[r4,#0x50]
;;;186          USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  7963              LDRB     r3,[r4,#5]
000042  221f              MOVS     r2,#0x1f
000044  f1040154          ADD      r1,r4,#0x54
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       USBH_BulkSendData
;;;187                            BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);
;;;188    
;;;189          break;
00004e  e10a              B        |L3.614|
;;;190    
;;;191        case BOT_SEND_CBW_WAIT:
;;;192    
;;;193          URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
000050  7961              LDRB     r1,[r4,#5]
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       USBH_LL_GetURBState
000058  4605              MOV      r5,r0
;;;194    
;;;195          if (URB_Status == USBH_URB_DONE)
00005a  2d01              CMP      r5,#1
00005c  d113              BNE      |L3.134|
;;;196          {
;;;197            if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
00005e  6de0              LDR      r0,[r4,#0x5c]
000060  b168              CBZ      r0,|L3.126|
;;;198            {
;;;199              /* If there is Data Transfer Stage */
;;;200              if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
000062  f8940060          LDRB     r0,[r4,#0x60]
000066  f0000080          AND      r0,r0,#0x80
00006a  2880              CMP      r0,#0x80
00006c  d103              BNE      |L3.118|
;;;201              {
;;;202                /* Data Direction is IN */
;;;203                MSC_Handle->hbot.state = BOT_DATA_IN;
00006e  2103              MOVS     r1,#3
000070  f8841050          STRB     r1,[r4,#0x50]
000074  e012              B        |L3.156|
                  |L3.118|
;;;204              }
;;;205              else
;;;206              {
;;;207                /* Data Direction is OUT */
;;;208                MSC_Handle->hbot.state = BOT_DATA_OUT;
000076  2105              MOVS     r1,#5
000078  f8841050          STRB     r1,[r4,#0x50]
00007c  e00e              B        |L3.156|
                  |L3.126|
;;;209              }
;;;210            }
;;;211    
;;;212            else
;;;213            {
;;;214              /* If there is NO Data Transfer Stage */
;;;215              MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
00007e  2107              MOVS     r1,#7
000080  f8841050          STRB     r1,[r4,#0x50]
000084  e00a              B        |L3.156|
                  |L3.134|
;;;216            }
;;;217    
;;;218    #if (USBH_USE_OS == 1U)
;;;219            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;220    #if (osCMSIS < 0x20000U)
;;;221            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;222    #else
;;;223            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;224    #endif
;;;225    #endif
;;;226          }
;;;227          else if (URB_Status == USBH_URB_NOTREADY)
000086  2d02              CMP      r5,#2
000088  d103              BNE      |L3.146|
;;;228          {
;;;229            /* Re-send CBW */
;;;230            MSC_Handle->hbot.state = BOT_SEND_CBW;
00008a  2101              MOVS     r1,#1
00008c  f8841050          STRB     r1,[r4,#0x50]
000090  e004              B        |L3.156|
                  |L3.146|
;;;231    
;;;232    #if (USBH_USE_OS == 1U)
;;;233            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;234    #if (osCMSIS < 0x20000U)
;;;235            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;236    #else
;;;237            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;238    #endif
;;;239    #endif
;;;240          }
;;;241          else
;;;242          {
;;;243            if (URB_Status == USBH_URB_STALL)
000092  2d05              CMP      r5,#5
000094  d102              BNE      |L3.156|
;;;244            {
;;;245              MSC_Handle->hbot.state  = BOT_ERROR_OUT;
000096  210a              MOVS     r1,#0xa
000098  f8841050          STRB     r1,[r4,#0x50]
                  |L3.156|
;;;246    
;;;247    #if (USBH_USE_OS == 1U)
;;;248              phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;249    #if (osCMSIS < 0x20000U)
;;;250              (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;251    #else
;;;252              (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;253    #endif
;;;254    #endif
;;;255            }
;;;256          }
;;;257          break;
00009c  e0e3              B        |L3.614|
;;;258    
;;;259        case BOT_DATA_IN:
;;;260          /* Send first packet */
;;;261          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
00009e  7923              LDRB     r3,[r4,#4]
0000a0  8962              LDRH     r2,[r4,#0xa]
0000a2  208c              MOVS     r0,#0x8c
0000a4  5901              LDR      r1,[r0,r4]
0000a6  4638              MOV      r0,r7
0000a8  f7fffffe          BL       USBH_BulkReceiveData
;;;262                               MSC_Handle->InEpSize, MSC_Handle->InPipe);
;;;263    
;;;264          MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
0000ac  2104              MOVS     r1,#4
0000ae  f8841050          STRB     r1,[r4,#0x50]
;;;265    
;;;266          break;
0000b2  e0d8              B        |L3.614|
;;;267    
;;;268        case BOT_DATA_IN_WAIT:
;;;269    
;;;270          URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
0000b4  7921              LDRB     r1,[r4,#4]
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       USBH_LL_GetURBState
0000bc  4605              MOV      r5,r0
;;;271    
;;;272          if (URB_Status == USBH_URB_DONE)
0000be  2d01              CMP      r5,#1
0000c0  d11e              BNE      |L3.256|
;;;273          {
;;;274            /* Adjust Data pointer and data length */
;;;275            if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
0000c2  8961              LDRH     r1,[r4,#0xa]
0000c4  6de0              LDR      r0,[r4,#0x5c]
0000c6  4288              CMP      r0,r1
0000c8  d90a              BLS      |L3.224|
;;;276            {
;;;277              MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
0000ca  208c              MOVS     r0,#0x8c
0000cc  5900              LDR      r0,[r0,r4]
0000ce  8961              LDRH     r1,[r4,#0xa]
0000d0  4401              ADD      r1,r1,r0
0000d2  208c              MOVS     r0,#0x8c
0000d4  5101              STR      r1,[r0,r4]
;;;278              MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
0000d6  8961              LDRH     r1,[r4,#0xa]
0000d8  6de0              LDR      r0,[r4,#0x5c]
0000da  1a41              SUBS     r1,r0,r1
0000dc  65e1              STR      r1,[r4,#0x5c]
0000de  e001              B        |L3.228|
                  |L3.224|
;;;279            }
;;;280            else
;;;281            {
;;;282              MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
0000e0  2100              MOVS     r1,#0
0000e2  65e1              STR      r1,[r4,#0x5c]
                  |L3.228|
;;;283            }
;;;284    
;;;285            /* More Data To be Received */
;;;286            if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
0000e4  6de0              LDR      r0,[r4,#0x5c]
0000e6  b138              CBZ      r0,|L3.248|
;;;287            {
;;;288              /* Send next packet */
;;;289              USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
0000e8  7923              LDRB     r3,[r4,#4]
0000ea  8962              LDRH     r2,[r4,#0xa]
0000ec  208c              MOVS     r0,#0x8c
0000ee  5901              LDR      r1,[r0,r4]
0000f0  4638              MOV      r0,r7
0000f2  f7fffffe          BL       USBH_BulkReceiveData
0000f6  e008              B        |L3.266|
                  |L3.248|
;;;290                                   MSC_Handle->InEpSize, MSC_Handle->InPipe);
;;;291            }
;;;292            else
;;;293            {
;;;294              /* If value was 0, and successful transfer, then change the state */
;;;295              MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
0000f8  2107              MOVS     r1,#7
0000fa  f8841050          STRB     r1,[r4,#0x50]
0000fe  e004              B        |L3.266|
                  |L3.256|
;;;296    
;;;297    #if (USBH_USE_OS == 1U)
;;;298              phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;299    #if (osCMSIS < 0x20000U)
;;;300              (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;301    #else
;;;302              (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;303    #endif
;;;304    #endif
;;;305            }
;;;306          }
;;;307          else if (URB_Status == USBH_URB_STALL)
000100  2d05              CMP      r5,#5
000102  d102              BNE      |L3.266|
;;;308          {
;;;309            /* This is Data IN Stage STALL Condition */
;;;310            MSC_Handle->hbot.state  = BOT_ERROR_IN;
000104  2109              MOVS     r1,#9
000106  f8841050          STRB     r1,[r4,#0x50]
                  |L3.266|
;;;311    
;;;312            /* Refer to USB Mass-Storage Class : BOT (www.usb.org)
;;;313            6.7.2 Host expects to receive data from the device
;;;314            3. On a STALL condition receiving data, then:
;;;315            The host shall accept the data received.
;;;316            The host shall clear the Bulk-In pipe.
;;;317            4. The host shall attempt to receive a CSW.*/
;;;318    
;;;319    #if (USBH_USE_OS == 1U)
;;;320            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;321    #if (osCMSIS < 0x20000U)
;;;322            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;323    #else
;;;324            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;325    #endif
;;;326    #endif
;;;327          }
;;;328          else
;;;329          {
;;;330          }
;;;331          break;
00010a  e0ac              B        |L3.614|
                  |L3.268|
00010c  e0aa              B        |L3.612|
;;;332    
;;;333        case BOT_DATA_OUT:
;;;334    
;;;335          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
00010e  2001              MOVS     r0,#1
000110  9000              STR      r0,[sp,#0]
000112  7963              LDRB     r3,[r4,#5]
000114  8922              LDRH     r2,[r4,#8]
000116  208c              MOVS     r0,#0x8c
000118  5901              LDR      r1,[r0,r4]
00011a  4638              MOV      r0,r7
00011c  f7fffffe          BL       USBH_BulkSendData
;;;336                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
;;;337    
;;;338          MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
000120  2106              MOVS     r1,#6
000122  f8841050          STRB     r1,[r4,#0x50]
;;;339          break;
000126  e09e              B        |L3.614|
;;;340    
;;;341        case BOT_DATA_OUT_WAIT:
;;;342          URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
000128  7961              LDRB     r1,[r4,#5]
00012a  4638              MOV      r0,r7
00012c  f7fffffe          BL       USBH_LL_GetURBState
000130  4605              MOV      r5,r0
;;;343    
;;;344          if (URB_Status == USBH_URB_DONE)
000132  2d01              CMP      r5,#1
000134  d120              BNE      |L3.376|
;;;345          {
;;;346            /* Adjust Data pointer and data length */
;;;347            if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
000136  8921              LDRH     r1,[r4,#8]
000138  6de0              LDR      r0,[r4,#0x5c]
00013a  4288              CMP      r0,r1
00013c  d90a              BLS      |L3.340|
;;;348            {
;;;349              MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
00013e  208c              MOVS     r0,#0x8c
000140  5900              LDR      r0,[r0,r4]
000142  8921              LDRH     r1,[r4,#8]
000144  4401              ADD      r1,r1,r0
000146  208c              MOVS     r0,#0x8c
000148  5101              STR      r1,[r0,r4]
;;;350              MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
00014a  8921              LDRH     r1,[r4,#8]
00014c  6de0              LDR      r0,[r4,#0x5c]
00014e  1a41              SUBS     r1,r0,r1
000150  65e1              STR      r1,[r4,#0x5c]
000152  e001              B        |L3.344|
                  |L3.340|
;;;351            }
;;;352            else
;;;353            {
;;;354              MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
000154  2100              MOVS     r1,#0
000156  65e1              STR      r1,[r4,#0x5c]
                  |L3.344|
;;;355            }
;;;356    
;;;357            /* More Data To be Sent */
;;;358            if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
000158  6de0              LDR      r0,[r4,#0x5c]
00015a  b148              CBZ      r0,|L3.368|
;;;359            {
;;;360              USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
00015c  2001              MOVS     r0,#1
00015e  9000              STR      r0,[sp,#0]
000160  7963              LDRB     r3,[r4,#5]
000162  8922              LDRH     r2,[r4,#8]
000164  208c              MOVS     r0,#0x8c
000166  5901              LDR      r1,[r0,r4]
000168  4638              MOV      r0,r7
00016a  f7fffffe          BL       USBH_BulkSendData
00016e  e00e              B        |L3.398|
                  |L3.368|
;;;361                                MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
;;;362            }
;;;363            else
;;;364            {
;;;365              /* If value was 0, and successful transfer, then change the state */
;;;366              MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
000170  2107              MOVS     r1,#7
000172  f8841050          STRB     r1,[r4,#0x50]
000176  e00a              B        |L3.398|
                  |L3.376|
;;;367            }
;;;368    
;;;369    #if (USBH_USE_OS == 1U)
;;;370            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;371    #if (osCMSIS < 0x20000U)
;;;372            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;373    #else
;;;374            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;375    #endif
;;;376    #endif
;;;377          }
;;;378    
;;;379          else if (URB_Status == USBH_URB_NOTREADY)
000178  2d02              CMP      r5,#2
00017a  d103              BNE      |L3.388|
;;;380          {
;;;381            /* Resend same data */
;;;382            MSC_Handle->hbot.state  = BOT_DATA_OUT;
00017c  2105              MOVS     r1,#5
00017e  f8841050          STRB     r1,[r4,#0x50]
000182  e004              B        |L3.398|
                  |L3.388|
;;;383    
;;;384    #if (USBH_USE_OS == 1U)
;;;385            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;386    #if (osCMSIS < 0x20000U)
;;;387            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;388    #else
;;;389            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;390    #endif
;;;391    #endif
;;;392          }
;;;393    
;;;394          else if (URB_Status == USBH_URB_STALL)
000184  2d05              CMP      r5,#5
000186  d102              BNE      |L3.398|
;;;395          {
;;;396            MSC_Handle->hbot.state  = BOT_ERROR_OUT;
000188  210a              MOVS     r1,#0xa
00018a  f8841050          STRB     r1,[r4,#0x50]
                  |L3.398|
;;;397    
;;;398            /* Refer to USB Mass-Storage Class : BOT (www.usb.org)
;;;399            6.7.3 Ho - Host expects to send data to the device
;;;400            3. On a STALL condition sending data, then:
;;;401            " The host shall clear the Bulk-Out pipe.
;;;402            4. The host shall attempt to receive a CSW.
;;;403            */
;;;404    
;;;405    #if (USBH_USE_OS == 1U)
;;;406            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;407    #if (osCMSIS < 0x20000U)
;;;408            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;409    #else
;;;410            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;411    #endif
;;;412    #endif
;;;413          }
;;;414          else
;;;415          {
;;;416          }
;;;417          break;
00018e  e06a              B        |L3.614|
;;;418    
;;;419        case BOT_RECEIVE_CSW:
;;;420    
;;;421          USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
000190  7923              LDRB     r3,[r4,#4]
000192  220d              MOVS     r2,#0xd
000194  f1040178          ADD      r1,r4,#0x78
000198  4638              MOV      r0,r7
00019a  f7fffffe          BL       USBH_BulkReceiveData
;;;422                               BOT_CSW_LENGTH, MSC_Handle->InPipe);
;;;423    
;;;424          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
00019e  2108              MOVS     r1,#8
0001a0  f8841050          STRB     r1,[r4,#0x50]
;;;425          break;
0001a4  e05f              B        |L3.614|
;;;426    
;;;427        case BOT_RECEIVE_CSW_WAIT:
;;;428    
;;;429          URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
0001a6  7921              LDRB     r1,[r4,#4]
0001a8  4638              MOV      r0,r7
0001aa  f7fffffe          BL       USBH_LL_GetURBState
0001ae  4605              MOV      r5,r0
;;;430    
;;;431          /* Decode CSW */
;;;432          if (URB_Status == USBH_URB_DONE)
0001b0  2d01              CMP      r5,#1
0001b2  d111              BNE      |L3.472|
;;;433          {
;;;434            MSC_Handle->hbot.state = BOT_SEND_CBW;
0001b4  2101              MOVS     r1,#1
0001b6  f8841050          STRB     r1,[r4,#0x50]
;;;435            MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
0001ba  f8841052          STRB     r1,[r4,#0x52]
;;;436            CSW_Status = USBH_MSC_DecodeCSW(phost);
0001be  4638              MOV      r0,r7
0001c0  f7fffffe          BL       USBH_MSC_DecodeCSW
0001c4  4682              MOV      r10,r0
;;;437    
;;;438            if (CSW_Status == BOT_CSW_CMD_PASSED)
0001c6  f1ba0f00          CMP      r10,#0
0001ca  d102              BNE      |L3.466|
;;;439            {
;;;440              status = USBH_OK;
0001cc  f04f0900          MOV      r9,#0
0001d0  e007              B        |L3.482|
                  |L3.466|
;;;441            }
;;;442            else
;;;443            {
;;;444              status = USBH_FAIL;
0001d2  f04f0902          MOV      r9,#2
0001d6  e004              B        |L3.482|
                  |L3.472|
;;;445            }
;;;446    
;;;447    #if (USBH_USE_OS == 1U)
;;;448            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;449    #if (osCMSIS < 0x20000U)
;;;450            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;451    #else
;;;452            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;453    #endif
;;;454    #endif
;;;455          }
;;;456          else if (URB_Status == USBH_URB_STALL)
0001d8  2d05              CMP      r5,#5
0001da  d102              BNE      |L3.482|
;;;457          {
;;;458            MSC_Handle->hbot.state  = BOT_ERROR_IN;
0001dc  2109              MOVS     r1,#9
0001de  f8841050          STRB     r1,[r4,#0x50]
                  |L3.482|
;;;459    
;;;460    #if (USBH_USE_OS == 1U)
;;;461            phost->os_msg = (uint32_t)USBH_URB_EVENT;
;;;462    #if (osCMSIS < 0x20000U)
;;;463            (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
;;;464    #else
;;;465            (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
;;;466    #endif
;;;467    #endif
;;;468          }
;;;469          else
;;;470          {
;;;471          }
;;;472          break;
0001e2  e040              B        |L3.614|
;;;473    
;;;474        case BOT_ERROR_IN:
;;;475          error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
0001e4  2200              MOVS     r2,#0
0001e6  4641              MOV      r1,r8
0001e8  4638              MOV      r0,r7
0001ea  f7fffffe          BL       USBH_MSC_BOT_Abort
0001ee  4606              MOV      r6,r0
;;;476    
;;;477          if (error == USBH_OK)
0001f0  b91e              CBNZ     r6,|L3.506|
;;;478          {
;;;479            MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
0001f2  2107              MOVS     r1,#7
0001f4  f8841050          STRB     r1,[r4,#0x50]
0001f8  e004              B        |L3.516|
                  |L3.506|
;;;480          }
;;;481          else if (error == USBH_UNRECOVERED_ERROR)
0001fa  2e04              CMP      r6,#4
0001fc  d102              BNE      |L3.516|
;;;482          {
;;;483            /* This means that there is a STALL Error limit, Do Reset Recovery */
;;;484            MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
0001fe  210b              MOVS     r1,#0xb
000200  f8841050          STRB     r1,[r4,#0x50]
                  |L3.516|
;;;485          }
;;;486          else
;;;487          {
;;;488          }
;;;489          break;
000204  e02f              B        |L3.614|
000206  e022              B        |L3.590|
000208  e7ff              B        |L3.522|
                  |L3.522|
;;;490    
;;;491        case BOT_ERROR_OUT:
;;;492          error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
00020a  2201              MOVS     r2,#1
00020c  4641              MOV      r1,r8
00020e  4638              MOV      r0,r7
000210  f7fffffe          BL       USBH_MSC_BOT_Abort
000214  4606              MOV      r6,r0
;;;493    
;;;494          if (error == USBH_OK)
000216  b9a6              CBNZ     r6,|L3.578|
;;;495          {
;;;496    
;;;497            toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
000218  7961              LDRB     r1,[r4,#5]
00021a  4638              MOV      r0,r7
00021c  f7fffffe          BL       USBH_LL_GetToggle
000220  4683              MOV      r11,r0
;;;498            USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
000222  f1cb0001          RSB      r0,r11,#1
000226  b2c2              UXTB     r2,r0
000228  7961              LDRB     r1,[r4,#5]
00022a  4638              MOV      r0,r7
00022c  f7fffffe          BL       USBH_LL_SetToggle
;;;499            USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
000230  7921              LDRB     r1,[r4,#4]
000232  2200              MOVS     r2,#0
000234  4638              MOV      r0,r7
000236  f7fffffe          BL       USBH_LL_SetToggle
;;;500            MSC_Handle->hbot.state = BOT_ERROR_IN;
00023a  2109              MOVS     r1,#9
00023c  f8841050          STRB     r1,[r4,#0x50]
000240  e004              B        |L3.588|
                  |L3.578|
;;;501          }
;;;502          else
;;;503          {
;;;504            if (error == USBH_UNRECOVERED_ERROR)
000242  2e04              CMP      r6,#4
000244  d102              BNE      |L3.588|
;;;505            {
;;;506              MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
000246  210b              MOVS     r1,#0xb
000248  f8841050          STRB     r1,[r4,#0x50]
                  |L3.588|
;;;507            }
;;;508          }
;;;509          break;
00024c  e00b              B        |L3.614|
                  |L3.590|
;;;510    
;;;511    
;;;512        case BOT_UNRECOVERED_ERROR:
;;;513          status = USBH_MSC_BOT_REQ_Reset(phost);
00024e  4638              MOV      r0,r7
000250  f7fffffe          BL       USBH_MSC_BOT_REQ_Reset
000254  4681              MOV      r9,r0
;;;514          if (status == USBH_OK)
000256  f1b90f00          CMP      r9,#0
00025a  d102              BNE      |L3.610|
;;;515          {
;;;516            MSC_Handle->hbot.state = BOT_SEND_CBW;
00025c  2101              MOVS     r1,#1
00025e  f8841050          STRB     r1,[r4,#0x50]
                  |L3.610|
;;;517          }
;;;518          break;
000262  e000              B        |L3.614|
                  |L3.612|
;;;519    
;;;520        default:
;;;521          break;
000264  bf00              NOP      
                  |L3.614|
000266  bf00              NOP                            ;189
;;;522      }
;;;523      return status;
000268  4648              MOV      r0,r9
;;;524    }
00026a  e8bd8ff8          POP      {r3-r11,pc}
;;;525    
                          ENDP


                          AREA ||i.USBH_MSC_BOT_REQ_GetMaxLUN||, CODE, READONLY, ALIGN=1

                  USBH_MSC_BOT_REQ_GetMaxLUN PROC
;;;128      */
;;;129    USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;131      phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
000006  21a1              MOVS     r1,#0xa1
000008  7421              STRB     r1,[r4,#0x10]
;;;132                                             | USB_REQ_RECIPIENT_INTERFACE;
;;;133    
;;;134      phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
00000a  21fe              MOVS     r1,#0xfe
00000c  7461              STRB     r1,[r4,#0x11]
;;;135      phost->Control.setup.b.wValue.w = 0U;
00000e  2100              MOVS     r1,#0
000010  8261              STRH     r1,[r4,#0x12]
;;;136      phost->Control.setup.b.wIndex.w = 0U;
000012  82a1              STRH     r1,[r4,#0x14]
;;;137      phost->Control.setup.b.wLength.w = 1U;
000014  2101              MOVS     r1,#1
000016  82e1              STRH     r1,[r4,#0x16]
;;;138    
;;;139      return USBH_CtlReq(phost, Maxlun, 1U);
000018  2201              MOVS     r2,#1
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USBH_CtlReq
;;;140    }
000022  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP


                          AREA ||i.USBH_MSC_BOT_REQ_Reset||, CODE, READONLY, ALIGN=1

                  USBH_MSC_BOT_REQ_Reset PROC
;;;107      */
;;;108    USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110    
;;;111      phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
000004  2121              MOVS     r1,#0x21
000006  7421              STRB     r1,[r4,#0x10]
;;;112                                             | USB_REQ_RECIPIENT_INTERFACE;
;;;113    
;;;114      phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
000008  21ff              MOVS     r1,#0xff
00000a  7461              STRB     r1,[r4,#0x11]
;;;115      phost->Control.setup.b.wValue.w = 0U;
00000c  2100              MOVS     r1,#0
00000e  8261              STRH     r1,[r4,#0x12]
;;;116      phost->Control.setup.b.wIndex.w = 0U;
000010  82a1              STRH     r1,[r4,#0x14]
;;;117      phost->Control.setup.b.wLength.w = 0U;
000012  82e1              STRH     r1,[r4,#0x16]
;;;118    
;;;119      return USBH_CtlReq(phost, 0U, 0U);
000014  2200              MOVS     r2,#0
000016  4611              MOV      r1,r2
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       USBH_CtlReq
;;;120    }
00001e  bd10              POP      {r4,pc}
;;;121    
                          ENDP


                          AREA ||i.USBH_MSC_DecodeCSW||, CODE, READONLY, ALIGN=2

                  USBH_MSC_DecodeCSW PROC
;;;575    
;;;576    static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
000000  b570              PUSH     {r4-r6,lr}
;;;577    {
000002  4605              MOV      r5,r0
;;;578      MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
000004  f8d5037c          LDR      r0,[r5,#0x37c]
000008  69c4              LDR      r4,[r0,#0x1c]
;;;579      BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
00000a  2601              MOVS     r6,#1
;;;580    
;;;581      /*Checking if the transfer length is different than 13*/
;;;582      if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
00000c  7921              LDRB     r1,[r4,#4]
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       USBH_LL_GetLastXferSize
000014  280d              CMP      r0,#0xd
000016  d001              BEQ      |L6.28|
;;;583      {
;;;584        /*(4) Hi > Dn (Host expects to receive data from the device,
;;;585        Device intends to transfer no data)
;;;586        (5) Hi > Di (Host expects to receive data from the device,
;;;587        Device intends to send data to the host)
;;;588        (9) Ho > Dn (Host expects to send data to the device,
;;;589        Device intends to transfer no data)
;;;590        (11) Ho > Do  (Host expects to send data to the device,
;;;591        Device intends to receive data from the host)*/
;;;592    
;;;593    
;;;594        status = BOT_CSW_PHASE_ERROR;
000018  2602              MOVS     r6,#2
00001a  e019              B        |L6.80|
                  |L6.28|
;;;595      }
;;;596      else
;;;597      {
;;;598        /* CSW length is Correct */
;;;599    
;;;600        /* Check validity of the CSW Signature and CSWStatus */
;;;601        if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
00001c  490d              LDR      r1,|L6.84|
00001e  6fa0              LDR      r0,[r4,#0x78]
000020  4288              CMP      r0,r1
000022  d114              BNE      |L6.78|
;;;602        {
;;;603          /* Check Condition 1. dCSWSignature is equal to 53425355h */
;;;604    
;;;605          if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
000024  6fe1              LDR      r1,[r4,#0x7c]
000026  6da0              LDR      r0,[r4,#0x58]
000028  4281              CMP      r1,r0
00002a  d111              BNE      |L6.80|
;;;606          {
;;;607            /* Check Condition 3. dCSWTag matches the dCBWTag from the
;;;608            corresponding CBW */
;;;609    
;;;610            if (MSC_Handle->hbot.csw.field.Status == 0U)
00002c  f8940084          LDRB     r0,[r4,#0x84]
000030  b908              CBNZ     r0,|L6.54|
;;;611            {
;;;612              /* Refer to USB Mass-Storage Class : BOT (www.usb.org)
;;;613    
;;;614              Hn Host expects no data transfers
;;;615              Hi Host expects to receive data from the device
;;;616              Ho Host expects to send data to the device
;;;617    
;;;618              Dn Device intends to transfer no data
;;;619              Di Device intends to send data to the host
;;;620              Do Device intends to receive data from the host
;;;621    
;;;622              Section 6.7
;;;623              (1) Hn = Dn (Host expects no data transfers,
;;;624              Device intends to transfer no data)
;;;625              (6) Hi = Di (Host expects to receive data from the device,
;;;626              Device intends to send data to the host)
;;;627              (12) Ho = Do (Host expects to send data to the device,
;;;628              Device intends to receive data from the host)
;;;629    
;;;630              */
;;;631    
;;;632              status = BOT_CSW_CMD_PASSED;
000032  2600              MOVS     r6,#0
000034  e00c              B        |L6.80|
                  |L6.54|
;;;633            }
;;;634            else if (MSC_Handle->hbot.csw.field.Status == 1U)
000036  f8940084          LDRB     r0,[r4,#0x84]
00003a  2801              CMP      r0,#1
00003c  d101              BNE      |L6.66|
;;;635            {
;;;636              status = BOT_CSW_CMD_FAILED;
00003e  2601              MOVS     r6,#1
000040  e006              B        |L6.80|
                  |L6.66|
;;;637            }
;;;638    
;;;639            else if (MSC_Handle->hbot.csw.field.Status == 2U)
000042  f8940084          LDRB     r0,[r4,#0x84]
000046  2802              CMP      r0,#2
000048  d102              BNE      |L6.80|
;;;640            {
;;;641              /* Refer to USB Mass-Storage Class : BOT (www.usb.org)
;;;642              Section 6.7
;;;643              (2) Hn < Di ( Host expects no data transfers,
;;;644              Device intends to send data to the host)
;;;645              (3) Hn < Do ( Host expects no data transfers,
;;;646              Device intends to receive data from the host)
;;;647              (7) Hi < Di ( Host expects to receive data from the device,
;;;648              Device intends to send data to the host)
;;;649              (8) Hi <> Do ( Host expects to receive data from the device,
;;;650              Device intends to receive data from the host)
;;;651              (10) Ho <> Di (Host expects to send data to the device,
;;;652              Di Device intends to send data to the host)
;;;653              (13) Ho < Do (Host expects to send data to the device,
;;;654              Device intends to receive data from the host)
;;;655              */
;;;656    
;;;657              status = BOT_CSW_PHASE_ERROR;
00004a  2602              MOVS     r6,#2
00004c  e000              B        |L6.80|
                  |L6.78|
;;;658            }
;;;659            else
;;;660            {
;;;661            }
;;;662          } /* CSW Tag Matching is Checked  */
;;;663        } /* CSW Signature Correct Checking */
;;;664        else
;;;665        {
;;;666          /* If the CSW Signature is not valid, We sall return the Phase Error to
;;;667          Upper Layers for Reset Recovery */
;;;668    
;;;669          status = BOT_CSW_PHASE_ERROR;
00004e  2602              MOVS     r6,#2
                  |L6.80|
;;;670        }
;;;671      } /* CSW Length Check*/
;;;672    
;;;673      return status;
000050  4630              MOV      r0,r6
;;;674    }
000052  bd70              POP      {r4-r6,pc}
;;;675    
                          ENDP

                  |L6.84|
                          DCD      0x53425355

;*** Start embedded assembler ***

#line 1 "../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc_bot.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_943f6c6e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___14_usbh_msc_bot_c_943f6c6e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_943f6c6e____REVSH|
#line 478
|__asm___14_usbh_msc_bot_c_943f6c6e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_943f6c6e____RRX|
#line 665
|__asm___14_usbh_msc_bot_c_943f6c6e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
