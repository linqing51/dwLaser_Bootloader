; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\main.o --asm_dir=./ --list_dir=--list --depend=mcu_application\main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\main.crf ../Core/Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;181      */
;;;182    void Error_Handler(void)
000000  4770              BX       lr
;;;183    {
;;;184      /* USER CODE BEGIN Error_Handler_Debug */
;;;185      /* User can add his own implementation to report the HAL error return state */
;;;186    
;;;187      /* USER CODE END Error_Handler_Debug */
;;;188    }
;;;189    
                          ENDP


                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;126      */
;;;127    void SystemClock_Config(void)
000000  b500              PUSH     {lr}
;;;128    {
000002  b0a9              SUB      sp,sp,#0xa4
;;;129      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
000004  2134              MOVS     r1,#0x34
000006  a81c              ADD      r0,sp,#0x70
000008  f7fffffe          BL       __aeabi_memclr4
;;;130      RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
00000c  2114              MOVS     r1,#0x14
00000e  a817              ADD      r0,sp,#0x5c
000010  f7fffffe          BL       __aeabi_memclr4
;;;131      RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
000014  2158              MOVS     r1,#0x58
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
;;;132    
;;;133      /** Configure the main internal regulator output voltage
;;;134      */
;;;135      __HAL_RCC_PWR_CLK_ENABLE();
00001c  bf00              NOP      
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
000022  4829              LDR      r0,|L2.200|
000024  6800              LDR      r0,[r0,#0]
000026  f0405080          ORR      r0,r0,#0x10000000
00002a  4927              LDR      r1,|L2.200|
00002c  6008              STR      r0,[r1,#0]
00002e  4608              MOV      r0,r1
000030  6800              LDR      r0,[r0,#0]
000032  f0005080          AND      r0,r0,#0x10000000
000036  9000              STR      r0,[sp,#0]
000038  bf00              NOP      
00003a  bf00              NOP      
;;;136      __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
00003c  bf00              NOP      
00003e  2000              MOVS     r0,#0
000040  9000              STR      r0,[sp,#0]
000042  4822              LDR      r0,|L2.204|
000044  6800              LDR      r0,[r0,#0]
000046  f4404040          ORR      r0,r0,#0xc000
00004a  4920              LDR      r1,|L2.204|
00004c  6008              STR      r0,[r1,#0]
00004e  4608              MOV      r0,r1
000050  6800              LDR      r0,[r0,#0]
000052  f4004040          AND      r0,r0,#0xc000
000056  9000              STR      r0,[sp,#0]
000058  bf00              NOP      
00005a  bf00              NOP      
;;;137      /** Initializes the RCC Oscillators according to the specified parameters
;;;138      * in the RCC_OscInitTypeDef structure.
;;;139      */
;;;140      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
00005c  2001              MOVS     r0,#1
00005e  901c              STR      r0,[sp,#0x70]
;;;141      RCC_OscInitStruct.HSEState = RCC_HSE_ON;
000060  0400              LSLS     r0,r0,#16
000062  901d              STR      r0,[sp,#0x74]
;;;142      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
000064  2002              MOVS     r0,#2
000066  9022              STR      r0,[sp,#0x88]
;;;143      RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
000068  0541              LSLS     r1,r0,#21
00006a  a81c              ADD      r0,sp,#0x70
00006c  61c1              STR      r1,[r0,#0x1c]
;;;144      RCC_OscInitStruct.PLL.PLLM = 25;
00006e  2119              MOVS     r1,#0x19
000070  6201              STR      r1,[r0,#0x20]
;;;145      RCC_OscInitStruct.PLL.PLLN = 192;
000072  21c0              MOVS     r1,#0xc0
000074  6241              STR      r1,[r0,#0x24]
;;;146      RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
000076  2102              MOVS     r1,#2
000078  6281              STR      r1,[r0,#0x28]
;;;147      RCC_OscInitStruct.PLL.PLLQ = 4;
00007a  2104              MOVS     r1,#4
00007c  62c1              STR      r1,[r0,#0x2c]
;;;148      RCC_OscInitStruct.PLL.PLLR = 2;
00007e  2102              MOVS     r1,#2
000080  6301              STR      r1,[r0,#0x30]
;;;149      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
000082  f7fffffe          BL       HAL_RCC_OscConfig
000086  b108              CBZ      r0,|L2.140|
;;;150      {
;;;151        Error_Handler();
000088  f7fffffe          BL       Error_Handler
                  |L2.140|
;;;152      }
;;;153      /** Initializes the CPU, AHB and APB buses clocks
;;;154      */
;;;155      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
00008c  200f              MOVS     r0,#0xf
00008e  9017              STR      r0,[sp,#0x5c]
;;;156                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
;;;157      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
000090  2002              MOVS     r0,#2
000092  9018              STR      r0,[sp,#0x60]
;;;158      RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
000094  2000              MOVS     r0,#0
000096  9019              STR      r0,[sp,#0x64]
;;;159      RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
000098  f44f5080          MOV      r0,#0x1000
00009c  901a              STR      r0,[sp,#0x68]
;;;160      RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
00009e  2000              MOVS     r0,#0
0000a0  901b              STR      r0,[sp,#0x6c]
;;;161    
;;;162      if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
0000a2  2103              MOVS     r1,#3
0000a4  a817              ADD      r0,sp,#0x5c
0000a6  f7fffffe          BL       HAL_RCC_ClockConfig
0000aa  b108              CBZ      r0,|L2.176|
;;;163      {
;;;164        Error_Handler();
0000ac  f7fffffe          BL       Error_Handler
                  |L2.176|
;;;165      }
;;;166      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
0000b0  2020              MOVS     r0,#0x20
0000b2  9001              STR      r0,[sp,#4]
;;;167      PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
0000b4  2000              MOVS     r0,#0
0000b6  900d              STR      r0,[sp,#0x34]
;;;168      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
0000b8  a801              ADD      r0,sp,#4
0000ba  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
0000be  b108              CBZ      r0,|L2.196|
;;;169      {
;;;170        Error_Handler();
0000c0  f7fffffe          BL       Error_Handler
                  |L2.196|
;;;171      }
;;;172    }
0000c4  b029              ADD      sp,sp,#0xa4
0000c6  bd00              POP      {pc}
;;;173    
                          ENDP

                  |L2.200|
                          DCD      0x40023840
                  |L2.204|
                          DCD      0x40007000

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;71       */
;;;72     int main(void)
000000  f7fffffe          BL       resetInit
;;;73     {
;;;74       /* USER CODE BEGIN 1 */
;;;75     	//__HAL_DBGMCU_FREEZE_IWDG();
;;;76     	resetInit();
;;;77       /* USER CODE END 1 */
;;;78     
;;;79       /* MCU Configuration--------------------------------------------------------*/
;;;80     
;;;81       /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;82       HAL_Init();
000004  f7fffffe          BL       HAL_Init
;;;83     
;;;84       /* USER CODE BEGIN Init */
;;;85     
;;;86       /* USER CODE END Init */
;;;87     
;;;88       /* Configure the system clock */
;;;89       SystemClock_Config();
000008  f7fffffe          BL       SystemClock_Config
;;;90     
;;;91       /* USER CODE BEGIN SysInit */
;;;92     
;;;93       /* USER CODE END SysInit */
;;;94     
;;;95       /* Initialize all configured peripherals */
;;;96       MX_GPIO_Init();
00000c  f7fffffe          BL       MX_GPIO_Init
;;;97       MX_I2C1_Init();
000010  f7fffffe          BL       MX_I2C1_Init
;;;98       MX_UART5_Init();
000014  f7fffffe          BL       MX_UART5_Init
;;;99       MX_USART1_UART_Init();
000018  f7fffffe          BL       MX_USART1_UART_Init
;;;100      MX_FATFS_Init();
00001c  f7fffffe          BL       MX_FATFS_Init
;;;101      MX_USB_HOST_Init();
000020  f7fffffe          BL       MX_USB_HOST_Init
;;;102      MX_ADC1_Init();
000024  f7fffffe          BL       MX_ADC1_Init
;;;103      MX_DAC_Init();
000028  f7fffffe          BL       MX_DAC_Init
;;;104      MX_USART6_UART_Init();
00002c  f7fffffe          BL       MX_USART6_UART_Init
;;;105      /* USER CODE BEGIN 2 */
;;;106    	bootLoadInit();
000030  f7fffffe          BL       bootLoadInit
;;;107    	HAL_FLASH_Unlock();
000034  f7fffffe          BL       HAL_FLASH_Unlock
;;;108      /* USER CODE END 2 */
;;;109    
;;;110      /* Infinite loop */
;;;111      /* USER CODE BEGIN WHILE */
;;;112      while (1)
000038  e003              B        |L3.66|
                  |L3.58|
;;;113      {
;;;114        /* USER CODE END WHILE */
;;;115        MX_USB_HOST_Process();
00003a  f7fffffe          BL       MX_USB_HOST_Process
;;;116    
;;;117        /* USER CODE BEGIN 3 */
;;;118    	  bootLoadProcess();
00003e  f7fffffe          BL       bootLoadProcess
                  |L3.66|
000042  e7fa              B        |L3.58|
;;;119      }
;;;120      /* USER CODE END 3 */
;;;121    }
;;;122    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Core/Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 478
|__asm___6_main_c_main____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 665
|__asm___6_main_c_main____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
