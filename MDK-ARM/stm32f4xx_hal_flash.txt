; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\stm32f4xx_hal_flash.o --asm_dir=./ --list_dir=--list --depend=mcu_application\stm32f4xx_hal_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\stm32f4xx_hal_flash.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_Byte||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Byte PROC
;;;695      */
;;;696    static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
000000  4a07              LDR      r2,|L1.32|
;;;697    {
;;;698      /* Check the parameters */
;;;699      assert_param(IS_FLASH_ADDRESS(Address));
;;;700      
;;;701      /* If the previous operation is completed, proceed to program the new data */
;;;702      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b05              LDR      r3,|L1.32|
00000a  601a              STR      r2,[r3,#0]
;;;703      FLASH->CR |= FLASH_PSIZE_BYTE;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  601a              STR      r2,[r3,#0]
;;;704      FLASH->CR |= FLASH_CR_PG;
000012  461a              MOV      r2,r3
000014  6812              LDR      r2,[r2,#0]
000016  f0420201          ORR      r2,r2,#1
00001a  601a              STR      r2,[r3,#0]
;;;705    
;;;706      *(__IO uint8_t*)Address = Data;
00001c  7001              STRB     r1,[r0,#0]
;;;707    }
00001e  4770              BX       lr
;;;708    
                          ENDP

                  |L1.32|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_DoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_DoubleWord PROC
;;;611      */
;;;612    static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
000000  b510              PUSH     {r4,lr}
;;;613    {
;;;614      /* Check the parameters */
;;;615      assert_param(IS_FLASH_ADDRESS(Address));
;;;616      
;;;617      /* If the previous operation is completed, proceed to program the new data */
;;;618      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  490d              LDR      r1,|L2.56|
000004  6809              LDR      r1,[r1,#0]
000006  f4217140          BIC      r1,r1,#0x300
00000a  4c0b              LDR      r4,|L2.56|
00000c  6021              STR      r1,[r4,#0]
;;;619      FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
00000e  4621              MOV      r1,r4
000010  6809              LDR      r1,[r1,#0]
000012  f4417140          ORR      r1,r1,#0x300
000016  6021              STR      r1,[r4,#0]
;;;620      FLASH->CR |= FLASH_CR_PG;
000018  4621              MOV      r1,r4
00001a  6809              LDR      r1,[r1,#0]
00001c  f0410101          ORR      r1,r1,#1
000020  6021              STR      r1,[r4,#0]
;;;621    
;;;622      /* Program first word */
;;;623      *(__IO uint32_t*)Address = (uint32_t)Data;
000022  6002              STR      r2,[r0,#0]
;;;624    
;;;625      /* Barrier to ensure programming is performed in 2 steps, in right order
;;;626        (independently of compiler optimization behavior) */
;;;627      __ISB();
000024  bf00              NOP      
000026  bf00              NOP      
000028  bf00              NOP      
00002a  f3bf8f6f          ISB      
00002e  bf00              NOP      
000030  bf00              NOP      
000032  bf00              NOP      
;;;628    
;;;629      /* Program second word */
;;;630      *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
000034  6043              STR      r3,[r0,#4]
;;;631    }
000036  bd10              POP      {r4,pc}
;;;632    
                          ENDP

                  |L2.56|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;670      */
;;;671    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4a08              LDR      r2,|L3.36|
;;;672    {
;;;673      /* Check the parameters */
;;;674      assert_param(IS_FLASH_ADDRESS(Address));
;;;675      
;;;676      /* If the previous operation is completed, proceed to program the new data */
;;;677      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L3.36|
00000a  601a              STR      r2,[r3,#0]
;;;678      FLASH->CR |= FLASH_PSIZE_HALF_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427280          ORR      r2,r2,#0x100
000014  601a              STR      r2,[r3,#0]
;;;679      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;680    
;;;681      *(__IO uint16_t*)Address = Data;
000020  8001              STRH     r1,[r0,#0]
;;;682    }
000022  4770              BX       lr
;;;683    
                          ENDP

                  |L3.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_Word||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Word PROC
;;;645      */
;;;646    static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
000000  4a08              LDR      r2,|L4.36|
;;;647    {
;;;648      /* Check the parameters */
;;;649      assert_param(IS_FLASH_ADDRESS(Address));
;;;650      
;;;651      /* If the previous operation is completed, proceed to program the new data */
;;;652      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L4.36|
00000a  601a              STR      r2,[r3,#0]
;;;653      FLASH->CR |= FLASH_PSIZE_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427200          ORR      r2,r2,#0x200
000014  601a              STR      r2,[r3,#0]
;;;654      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;655    
;;;656      *(__IO uint32_t*)Address = Data;
000020  6001              STR      r1,[r0,#0]
;;;657    }
000022  4770              BX       lr
;;;658    
                          ENDP

                  |L4.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;712      */
;;;713    static void FLASH_SetErrorCode(void)
000000  482a              LDR      r0,|L5.172|
;;;714    { 
;;;715      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000010          AND      r0,r0,#0x10
000008  b140              CBZ      r0,|L5.28|
;;;716      {
;;;717       pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000a  4829              LDR      r0,|L5.176|
00000c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00000e  f0400010          ORR      r0,r0,#0x10
000012  4927              LDR      r1,|L5.176|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;718       
;;;719       /* Clear FLASH write protection error pending bit */
;;;720       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
000016  2010              MOVS     r0,#0x10
000018  4924              LDR      r1,|L5.172|
00001a  6008              STR      r0,[r1,#0]
                  |L5.28|
;;;721      }
;;;722      
;;;723      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
00001c  4823              LDR      r0,|L5.172|
00001e  6800              LDR      r0,[r0,#0]
000020  f0000020          AND      r0,r0,#0x20
000024  b140              CBZ      r0,|L5.56|
;;;724      {
;;;725       pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
000026  4822              LDR      r0,|L5.176|
000028  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00002a  f0400008          ORR      r0,r0,#8
00002e  4920              LDR      r1,|L5.176|
000030  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;726       
;;;727       /* Clear FLASH Programming alignment error pending bit */
;;;728       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
000032  2020              MOVS     r0,#0x20
000034  491d              LDR      r1,|L5.172|
000036  6008              STR      r0,[r1,#0]
                  |L5.56|
;;;729      }
;;;730      
;;;731      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
000038  481c              LDR      r0,|L5.172|
00003a  6800              LDR      r0,[r0,#0]
00003c  f0000040          AND      r0,r0,#0x40
000040  b140              CBZ      r0,|L5.84|
;;;732      {
;;;733        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
000042  481b              LDR      r0,|L5.176|
000044  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000046  f0400004          ORR      r0,r0,#4
00004a  4919              LDR      r1,|L5.176|
00004c  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;734        
;;;735        /* Clear FLASH Programming parallelism error pending bit */
;;;736        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
00004e  2040              MOVS     r0,#0x40
000050  4916              LDR      r1,|L5.172|
000052  6008              STR      r0,[r1,#0]
                  |L5.84|
;;;737      }
;;;738      
;;;739      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
000054  4815              LDR      r0,|L5.172|
000056  6800              LDR      r0,[r0,#0]
000058  f0000080          AND      r0,r0,#0x80
00005c  b140              CBZ      r0,|L5.112|
;;;740      {
;;;741        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
00005e  4814              LDR      r0,|L5.176|
000060  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000062  f0400002          ORR      r0,r0,#2
000066  4912              LDR      r1,|L5.176|
000068  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;742        
;;;743        /* Clear FLASH Programming sequence error pending bit */
;;;744        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
00006a  2080              MOVS     r0,#0x80
00006c  490f              LDR      r1,|L5.172|
00006e  6008              STR      r0,[r1,#0]
                  |L5.112|
;;;745      }
;;;746    #if defined(FLASH_SR_RDERR) 
;;;747      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
000070  480e              LDR      r0,|L5.172|
000072  6800              LDR      r0,[r0,#0]
000074  f4007080          AND      r0,r0,#0x100
000078  b148              CBZ      r0,|L5.142|
;;;748      {
;;;749        pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
00007a  480d              LDR      r0,|L5.176|
00007c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00007e  f0400001          ORR      r0,r0,#1
000082  490b              LDR      r1,|L5.176|
000084  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;750        
;;;751        /* Clear FLASH Proprietary readout protection error pending bit */
;;;752        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
000086  f44f7080          MOV      r0,#0x100
00008a  4908              LDR      r1,|L5.172|
00008c  6008              STR      r0,[r1,#0]
                  |L5.142|
;;;753      }
;;;754    #endif /* FLASH_SR_RDERR */  
;;;755      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
00008e  4807              LDR      r0,|L5.172|
000090  6800              LDR      r0,[r0,#0]
000092  f0000002          AND      r0,r0,#2
000096  b140              CBZ      r0,|L5.170|
;;;756      {
;;;757        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
000098  4805              LDR      r0,|L5.176|
00009a  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00009c  f0400020          ORR      r0,r0,#0x20
0000a0  4903              LDR      r1,|L5.176|
0000a2  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;758        
;;;759        /* Clear FLASH Operation error pending bit */
;;;760        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
0000a4  2002              MOVS     r0,#2
0000a6  4901              LDR      r1,|L5.172|
0000a8  6008              STR      r0,[r1,#0]
                  |L5.170|
;;;761      }
;;;762    }
0000aa  4770              BX       lr
;;;763    
                          ENDP

                  |L5.172|
                          DCD      0x40023c0c
                  |L5.176|
                          DCD      pFlash

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;551      */
;;;552    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;553    { 
000002  4604              MOV      r4,r0
;;;554      uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;555      
;;;556      /* Clear Error Code */
;;;557      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000006  2000              MOVS     r0,#0
000008  4914              LDR      r1,|L6.92|
00000a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;558      
;;;559      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;560         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;561         flag will be set */
;;;562      /* Get tick */
;;;563      tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4605              MOV      r5,r0
;;;564    
;;;565      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
000012  e009              B        |L6.40|
                  |L6.20|
;;;566      { 
;;;567        if(Timeout != HAL_MAX_DELAY)
000014  1c60              ADDS     r0,r4,#1
000016  b138              CBZ      r0,|L6.40|
;;;568        {
;;;569          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
000018  b124              CBZ      r4,|L6.36|
00001a  f7fffffe          BL       HAL_GetTick
00001e  1b40              SUBS     r0,r0,r5
000020  42a0              CMP      r0,r4
000022  d901              BLS      |L6.40|
                  |L6.36|
;;;570          {
;;;571            return HAL_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L6.38|
;;;572          }
;;;573        } 
;;;574      }
;;;575    
;;;576      /* Check FLASH End of Operation flag  */
;;;577      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
;;;578      {
;;;579        /* Clear FLASH End of Operation pending bit */
;;;580        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;581      }
;;;582    #if defined(FLASH_SR_RDERR)  
;;;583      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;584                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;585    #else
;;;586      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;587                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;588    #endif /* FLASH_SR_RDERR */
;;;589      {
;;;590        /*Save the error code*/
;;;591        FLASH_SetErrorCode();
;;;592        return HAL_ERROR;
;;;593      }
;;;594    
;;;595      /* If there is no error flag set */
;;;596      return HAL_OK;
;;;597      
;;;598    }  
000026  bd70              POP      {r4-r6,pc}
                  |L6.40|
000028  480d              LDR      r0,|L6.96|
00002a  6800              LDR      r0,[r0,#0]            ;565
00002c  f4003080          AND      r0,r0,#0x10000        ;565
000030  2800              CMP      r0,#0                 ;565
000032  d1ef              BNE      |L6.20|
000034  480a              LDR      r0,|L6.96|
000036  6800              LDR      r0,[r0,#0]            ;577
000038  f0000001          AND      r0,r0,#1              ;577
00003c  b110              CBZ      r0,|L6.68|
00003e  2001              MOVS     r0,#1                 ;580
000040  4907              LDR      r1,|L6.96|
000042  6008              STR      r0,[r1,#0]            ;580
                  |L6.68|
000044  4806              LDR      r0,|L6.96|
000046  6800              LDR      r0,[r0,#0]            ;583
000048  f40070f9          AND      r0,r0,#0x1f2          ;583
00004c  b118              CBZ      r0,|L6.86|
00004e  f7fffffe          BL       FLASH_SetErrorCode
000052  2001              MOVS     r0,#1                 ;592
000054  e7e7              B        |L6.38|
                  |L6.86|
000056  2000              MOVS     r0,#0                 ;596
000058  e7e5              B        |L6.38|
;;;599    
                          ENDP

00005a  0000              DCW      0x0000
                  |L6.92|
                          DCD      pFlash
                  |L6.96|
                          DCD      0x40023c0c

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;383      */
;;;384    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;385    {
;;;386      /* Prevent unused argument(s) compilation warning */
;;;387      UNUSED(ReturnValue);
;;;388      /* NOTE : This function Should not be modified, when the callback is needed,
;;;389                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;390       */ 
;;;391    }
;;;392    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;537      */
;;;538    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L8.8|
;;;539    { 
;;;540       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;541    }  
000004  4770              BX       lr
;;;542      
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;260      */
;;;261    void HAL_FLASH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;262    {
;;;263      uint32_t addresstmp = 0U;
000002  2400              MOVS     r4,#0
;;;264      
;;;265      /* Check FLASH operation error flags */
;;;266    #if defined(FLASH_SR_RDERR) 
;;;267      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
000004  4840              LDR      r0,|L9.264|
000006  6800              LDR      r0,[r0,#0]
000008  f40070f9          AND      r0,r0,#0x1f2
00000c  b1d8              CBZ      r0,|L9.70|
;;;268        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;269    #else
;;;270      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;271        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;272    #endif /* FLASH_SR_RDERR */
;;;273      {
;;;274        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
00000e  483f              LDR      r0,|L9.268|
000010  7800              LDRB     r0,[r0,#0]  ; pFlash
000012  2801              CMP      r0,#1
000014  d106              BNE      |L9.36|
;;;275        {
;;;276          /*return the faulty sector*/
;;;277          addresstmp = pFlash.Sector;
000016  483d              LDR      r0,|L9.268|
000018  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;278          pFlash.Sector = 0xFFFFFFFFU;
00001a  f04f30ff          MOV      r0,#0xffffffff
00001e  493b              LDR      r1,|L9.268|
000020  60c8              STR      r0,[r1,#0xc]  ; pFlash
000022  e008              B        |L9.54|
                  |L9.36|
;;;279        }
;;;280        else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000024  4839              LDR      r0,|L9.268|
000026  7800              LDRB     r0,[r0,#0]  ; pFlash
000028  2802              CMP      r0,#2
00002a  d102              BNE      |L9.50|
;;;281        {
;;;282          /*return the faulty bank*/
;;;283          addresstmp = pFlash.Bank;
00002c  4837              LDR      r0,|L9.268|
00002e  6904              LDR      r4,[r0,#0x10]  ; pFlash
000030  e001              B        |L9.54|
                  |L9.50|
;;;284        }
;;;285        else
;;;286        {
;;;287          /*return the faulty address*/
;;;288          addresstmp = pFlash.Address;
000032  4836              LDR      r0,|L9.268|
000034  6944              LDR      r4,[r0,#0x14]  ; pFlash
                  |L9.54|
;;;289        }
;;;290        
;;;291        /*Save the Error code*/
;;;292        FLASH_SetErrorCode();
000036  f7fffffe          BL       FLASH_SetErrorCode
;;;293        
;;;294        /* FLASH error interrupt user callback */
;;;295        HAL_FLASH_OperationErrorCallback(addresstmp);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;296        
;;;297        /*Stop the procedure ongoing*/
;;;298        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000040  2000              MOVS     r0,#0
000042  4932              LDR      r1,|L9.268|
000044  7008              STRB     r0,[r1,#0]
                  |L9.70|
;;;299      }
;;;300      
;;;301      /* Check FLASH End of Operation flag  */
;;;302      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
000046  4830              LDR      r0,|L9.264|
000048  6800              LDR      r0,[r0,#0]
00004a  f0000001          AND      r0,r0,#1
00004e  2800              CMP      r0,#0
000050  d03e              BEQ      |L9.208|
;;;303      {
;;;304        /* Clear FLASH End of Operation pending bit */
;;;305        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000052  2001              MOVS     r0,#1
000054  492c              LDR      r1,|L9.264|
000056  6008              STR      r0,[r1,#0]
;;;306        
;;;307        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000058  482c              LDR      r0,|L9.268|
00005a  7800              LDRB     r0,[r0,#0]  ; pFlash
00005c  2801              CMP      r0,#1
00005e  d125              BNE      |L9.172|
;;;308        {
;;;309          /*Nb of sector to erased can be decreased*/
;;;310          pFlash.NbSectorsToErase--;
000060  482a              LDR      r0,|L9.268|
000062  6840              LDR      r0,[r0,#4]  ; pFlash
000064  1e40              SUBS     r0,r0,#1
000066  4929              LDR      r1,|L9.268|
000068  6048              STR      r0,[r1,#4]  ; pFlash
;;;311          
;;;312          /* Check if there are still sectors to erase*/
;;;313          if(pFlash.NbSectorsToErase != 0U)
00006a  4608              MOV      r0,r1
00006c  6840              LDR      r0,[r0,#4]  ; pFlash
00006e  b180              CBZ      r0,|L9.146|
;;;314          {
;;;315            addresstmp = pFlash.Sector;
000070  4608              MOV      r0,r1
000072  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;316            /*Indicate user which sector has been erased*/
;;;317            HAL_FLASH_EndOfOperationCallback(addresstmp);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;318            
;;;319            /*Increment sector number*/
;;;320            pFlash.Sector++;
00007a  4824              LDR      r0,|L9.268|
00007c  68c0              LDR      r0,[r0,#0xc]  ; pFlash
00007e  1c40              ADDS     r0,r0,#1
000080  4922              LDR      r1,|L9.268|
000082  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;321            addresstmp = pFlash.Sector;
000084  4608              MOV      r0,r1
000086  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;322            FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
000088  7a01              LDRB     r1,[r0,#8]  ; pFlash
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       FLASH_Erase_Sector
000090  e01e              B        |L9.208|
                  |L9.146|
;;;323          }
;;;324          else
;;;325          {
;;;326            /*No more sectors to Erase, user callback can be called.*/
;;;327            /*Reset Sector and stop Erase sectors procedure*/
;;;328            pFlash.Sector = addresstmp = 0xFFFFFFFFU;
000092  f04f30ff          MOV      r0,#0xffffffff
000096  4604              MOV      r4,r0
000098  491c              LDR      r1,|L9.268|
00009a  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;329            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00009c  2000              MOVS     r0,#0
00009e  7008              STRB     r0,[r1,#0]
;;;330            
;;;331            /* Flush the caches to be sure of the data consistency */
;;;332            FLASH_FlushCaches() ;
0000a0  f7fffffe          BL       FLASH_FlushCaches
;;;333                    
;;;334            /* FLASH EOP interrupt user callback */
;;;335            HAL_FLASH_EndOfOperationCallback(addresstmp);
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000aa  e011              B        |L9.208|
                  |L9.172|
;;;336          }
;;;337        }
;;;338        else 
;;;339        {
;;;340          if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
0000ac  4817              LDR      r0,|L9.268|
0000ae  7800              LDRB     r0,[r0,#0]  ; pFlash
0000b0  2802              CMP      r0,#2
0000b2  d106              BNE      |L9.194|
;;;341          {
;;;342            /* MassErase ended. Return the selected bank */
;;;343            /* Flush the caches to be sure of the data consistency */
;;;344            FLASH_FlushCaches() ;
0000b4  f7fffffe          BL       FLASH_FlushCaches
;;;345    
;;;346            /* FLASH EOP interrupt user callback */
;;;347            HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
0000b8  4914              LDR      r1,|L9.268|
0000ba  6908              LDR      r0,[r1,#0x10]  ; pFlash
0000bc  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000c0  e003              B        |L9.202|
                  |L9.194|
;;;348          }
;;;349          else
;;;350          {
;;;351            /*Program ended. Return the selected address*/
;;;352            /* FLASH EOP interrupt user callback */
;;;353            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
0000c2  4912              LDR      r1,|L9.268|
0000c4  6948              LDR      r0,[r1,#0x14]  ; pFlash
0000c6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L9.202|
;;;354          }
;;;355          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000ca  2000              MOVS     r0,#0
0000cc  490f              LDR      r1,|L9.268|
0000ce  7008              STRB     r0,[r1,#0]
                  |L9.208|
;;;356        }
;;;357      }
;;;358      
;;;359      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000d0  480e              LDR      r0,|L9.268|
0000d2  7800              LDRB     r0,[r0,#0]  ; pFlash
0000d4  b9b0              CBNZ     r0,|L9.260|
;;;360      {
;;;361        /* Operation is completed, disable the PG, SER, SNB and MER Bits */
;;;362        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
0000d6  480c              LDR      r0,|L9.264|
0000d8  1d00              ADDS     r0,r0,#4
0000da  6800              LDR      r0,[r0,#0]
0000dc  f020007f          BIC      r0,r0,#0x7f
0000e0  4909              LDR      r1,|L9.264|
0000e2  1d09              ADDS     r1,r1,#4
0000e4  6008              STR      r0,[r1,#0]
;;;363    
;;;364        /* Disable End of FLASH Operation interrupt */
;;;365        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
0000e6  4608              MOV      r0,r1
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f0207080          BIC      r0,r0,#0x1000000
0000ee  6008              STR      r0,[r1,#0]
;;;366        
;;;367        /* Disable Error source interrupt */
;;;368        __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
0000f0  4608              MOV      r0,r1
0000f2  6800              LDR      r0,[r0,#0]
0000f4  f0207000          BIC      r0,r0,#0x2000000
0000f8  6008              STR      r0,[r1,#0]
;;;369        
;;;370        /* Process Unlocked */
;;;371        __HAL_UNLOCK(&pFlash);
0000fa  bf00              NOP      
0000fc  2000              MOVS     r0,#0
0000fe  4903              LDR      r1,|L9.268|
000100  7608              STRB     r0,[r1,#0x18]
000102  bf00              NOP      
                  |L9.260|
;;;372      }
;;;373    }
000104  bd10              POP      {r4,pc}
;;;374    
                          ENDP

000106  0000              DCW      0x0000
                  |L9.264|
                          DCD      0x40023c0c
                  |L9.268|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;456      */
;;;457    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L10.16|
;;;458    {
;;;459      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;460      FLASH->CR |= FLASH_CR_LOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0404000          ORR      r0,r0,#0x80000000
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;461      
;;;462      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;463    }
00000e  4770              BX       lr
;;;464    
                          ENDP

                  |L10.16|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;500      */
;;;501    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;502    {
;;;503      /* Set the OPTSTRT bit in OPTCR register */
;;;504      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000002  4805              LDR      r0,|L11.24|
000004  7800              LDRB     r0,[r0,#0]
000006  f0400002          ORR      r0,r0,#2
00000a  4903              LDR      r1,|L11.24|
00000c  7008              STRB     r0,[r1,#0]
;;;505    
;;;506      /* Wait for last operation to be completed */
;;;507      return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
00000e  f24c3050          MOV      r0,#0xc350
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;508    }
000016  bd10              POP      {r4,pc}
;;;509    
                          ENDP

                  |L11.24|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;488      */
;;;489    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L12.16|
;;;490    {
;;;491      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;492      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;493      
;;;494      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;495    }
00000e  4770              BX       lr
;;;496    
                          ENDP

                  |L12.16|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;468      */
;;;469    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4807              LDR      r0,|L13.32|
;;;470    {
;;;471      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b130              CBZ      r0,|L13.24|
;;;472      {
;;;473        /* Authorizes the Option Byte register programming */
;;;474        FLASH->OPTKEYR = FLASH_OPT_KEY1;
00000a  4806              LDR      r0,|L13.36|
00000c  4904              LDR      r1,|L13.32|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;475        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000012  4805              LDR      r0,|L13.40|
000014  6008              STR      r0,[r1,#0]
000016  e001              B        |L13.28|
                  |L13.24|
;;;476      }
;;;477      else
;;;478      {
;;;479        return HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L13.26|
;;;480      }  
;;;481      
;;;482      return HAL_OK;  
;;;483    }
00001a  4770              BX       lr
                  |L13.28|
00001c  2000              MOVS     r0,#0                 ;482
00001e  e7fc              B        |L13.26|
;;;484    
                          ENDP

                  |L13.32|
                          DCD      0x40023c14
                  |L13.36|
                          DCD      0x08192a3b
                  |L13.40|
                          DCD      0x4c5d6e7f

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;400      */
;;;401    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;402    {
;;;403      /* Prevent unused argument(s) compilation warning */
;;;404      UNUSED(ReturnValue);
;;;405      /* NOTE : This function Should not be modified, when the callback is needed,
;;;406                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;407       */ 
;;;408    }
;;;409    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;155      */
;;;156    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;158      HAL_StatusTypeDef status = HAL_ERROR;
00000c  f04f0801          MOV      r8,#1
;;;159      
;;;160      /* Process Locked */
;;;161      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481f              LDR      r0,|L15.144|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L15.32|
00001a  2002              MOVS     r0,#2
                  |L15.28|
;;;162      
;;;163      /* Check the parameters */
;;;164      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;165      
;;;166      /* Wait for last operation to be completed */
;;;167      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;168      
;;;169      if(status == HAL_OK)
;;;170      {
;;;171        if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;172        {
;;;173          /*Program byte (8-bit) at a specified address.*/
;;;174          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;175        }
;;;176        else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;177        {
;;;178          /*Program halfword (16-bit) at a specified address.*/
;;;179          FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;180        }
;;;181        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;182        {
;;;183          /*Program word (32-bit) at a specified address.*/
;;;184          FLASH_Program_Word(Address, (uint32_t) Data);
;;;185        }
;;;186        else
;;;187        {
;;;188          /*Program double word (64-bit) at a specified address.*/
;;;189          FLASH_Program_DoubleWord(Address, Data);
;;;190        }
;;;191        
;;;192        /* Wait for last operation to be completed */
;;;193        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;194        
;;;195        /* If the program operation is completed, disable the PG Bit */
;;;196        FLASH->CR &= (~FLASH_CR_PG);  
;;;197      }
;;;198      
;;;199      /* Process Unlocked */
;;;200      __HAL_UNLOCK(&pFlash);
;;;201      
;;;202      return status;
;;;203    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L15.32|
000020  2001              MOVS     r0,#1                 ;161
000022  491b              LDR      r1,|L15.144|
000024  7608              STRB     r0,[r1,#0x18]         ;161
000026  bf00              NOP                            ;161
000028  f24c3050          MOV      r0,#0xc350            ;167
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  4680              MOV      r8,r0                 ;167
000032  f1b80f00          CMP      r8,#0                 ;169
000036  d123              BNE      |L15.128|
000038  b926              CBNZ     r6,|L15.68|
00003a  b2e1              UXTB     r1,r4                 ;174
00003c  4638              MOV      r0,r7                 ;174
00003e  f7fffffe          BL       FLASH_Program_Byte
000042  e012              B        |L15.106|
                  |L15.68|
000044  2e01              CMP      r6,#1                 ;176
000046  d104              BNE      |L15.82|
000048  b2a1              UXTH     r1,r4                 ;179
00004a  4638              MOV      r0,r7                 ;179
00004c  f7fffffe          BL       FLASH_Program_HalfWord
000050  e00b              B        |L15.106|
                  |L15.82|
000052  2e02              CMP      r6,#2                 ;181
000054  d104              BNE      |L15.96|
000056  4621              MOV      r1,r4                 ;184
000058  4638              MOV      r0,r7                 ;184
00005a  f7fffffe          BL       FLASH_Program_Word
00005e  e004              B        |L15.106|
                  |L15.96|
000060  4622              MOV      r2,r4                 ;189
000062  462b              MOV      r3,r5                 ;189
000064  4638              MOV      r0,r7                 ;189
000066  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L15.106|
00006a  f24c3050          MOV      r0,#0xc350            ;193
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  4680              MOV      r8,r0                 ;193
000074  4807              LDR      r0,|L15.148|
000076  6800              LDR      r0,[r0,#0]            ;196
000078  f0200001          BIC      r0,r0,#1              ;196
00007c  4905              LDR      r1,|L15.148|
00007e  6008              STR      r0,[r1,#0]            ;196
                  |L15.128|
000080  bf00              NOP                            ;200
000082  2000              MOVS     r0,#0                 ;200
000084  4902              LDR      r1,|L15.144|
000086  7608              STRB     r0,[r1,#0x18]         ;200
000088  bf00              NOP                            ;200
00008a  4640              MOV      r0,r8                 ;202
00008c  e7c6              B        |L15.28|
;;;204    
                          ENDP

00008e  0000              DCW      0x0000
                  |L15.144|
                          DCD      pFlash
                  |L15.148|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;213      */
;;;214    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;215    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;216      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;217      
;;;218      /* Process Locked */
;;;219      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481b              LDR      r0,|L16.128|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L16.32|
00001a  2002              MOVS     r0,#2
                  |L16.28|
;;;220    
;;;221      /* Check the parameters */
;;;222      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;223    
;;;224      /* Enable End of FLASH Operation interrupt */
;;;225      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;226      
;;;227      /* Enable Error source interrupt */
;;;228      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;229    
;;;230      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
;;;231      pFlash.Address = Address;
;;;232    
;;;233      if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;234      {
;;;235        /*Program byte (8-bit) at a specified address.*/
;;;236          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;237      }
;;;238      else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;239      {
;;;240        /*Program halfword (16-bit) at a specified address.*/
;;;241        FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;242      }
;;;243      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;244      {
;;;245        /*Program word (32-bit) at a specified address.*/
;;;246        FLASH_Program_Word(Address, (uint32_t) Data);
;;;247      }
;;;248      else
;;;249      {
;;;250        /*Program double word (64-bit) at a specified address.*/
;;;251        FLASH_Program_DoubleWord(Address, Data);
;;;252      }
;;;253    
;;;254      return status;
;;;255    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L16.32|
000020  2001              MOVS     r0,#1                 ;219
000022  4917              LDR      r1,|L16.128|
000024  7608              STRB     r0,[r1,#0x18]         ;219
000026  bf00              NOP                            ;219
000028  4816              LDR      r0,|L16.132|
00002a  6800              LDR      r0,[r0,#0]            ;225
00002c  f0407080          ORR      r0,r0,#0x1000000      ;225
000030  4914              LDR      r1,|L16.132|
000032  6008              STR      r0,[r1,#0]            ;225
000034  4608              MOV      r0,r1                 ;228
000036  6800              LDR      r0,[r0,#0]            ;228
000038  f0407000          ORR      r0,r0,#0x2000000      ;228
00003c  6008              STR      r0,[r1,#0]            ;228
00003e  2003              MOVS     r0,#3                 ;230
000040  490f              LDR      r1,|L16.128|
000042  7008              STRB     r0,[r1,#0]            ;230
000044  4608              MOV      r0,r1                 ;231
000046  6147              STR      r7,[r0,#0x14]         ;231  ; pFlash
000048  b926              CBNZ     r6,|L16.84|
00004a  b2e1              UXTB     r1,r4                 ;236
00004c  4638              MOV      r0,r7                 ;236
00004e  f7fffffe          BL       FLASH_Program_Byte
000052  e012              B        |L16.122|
                  |L16.84|
000054  2e01              CMP      r6,#1                 ;238
000056  d104              BNE      |L16.98|
000058  b2a1              UXTH     r1,r4                 ;241
00005a  4638              MOV      r0,r7                 ;241
00005c  f7fffffe          BL       FLASH_Program_HalfWord
000060  e00b              B        |L16.122|
                  |L16.98|
000062  2e02              CMP      r6,#2                 ;243
000064  d104              BNE      |L16.112|
000066  4621              MOV      r1,r4                 ;246
000068  4638              MOV      r0,r7                 ;246
00006a  f7fffffe          BL       FLASH_Program_Word
00006e  e004              B        |L16.122|
                  |L16.112|
000070  4622              MOV      r2,r4                 ;251
000072  462b              MOV      r3,r5                 ;251
000074  4638              MOV      r0,r7                 ;251
000076  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L16.122|
00007a  4640              MOV      r0,r8                 ;254
00007c  e7ce              B        |L16.28|
;;;256    
                          ENDP

00007e  0000              DCW      0x0000
                  |L16.128|
                          DCD      pFlash
                  |L16.132|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  2000              MOVS     r0,#0
;;;434    {
;;;435      HAL_StatusTypeDef status = HAL_OK;
;;;436    
;;;437      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000002  4909              LDR      r1,|L17.40|
000004  6809              LDR      r1,[r1,#0]
000006  f0014100          AND      r1,r1,#0x80000000
00000a  b159              CBZ      r1,|L17.36|
;;;438      {
;;;439        /* Authorize the FLASH Registers access */
;;;440        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000c  4907              LDR      r1,|L17.44|
00000e  4a06              LDR      r2,|L17.40|
000010  3a0c              SUBS     r2,r2,#0xc
000012  6011              STR      r1,[r2,#0]
;;;441        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000014  4906              LDR      r1,|L17.48|
000016  6011              STR      r1,[r2,#0]
;;;442    
;;;443        /* Verify Flash is unlocked */
;;;444        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000018  4903              LDR      r1,|L17.40|
00001a  6809              LDR      r1,[r1,#0]
00001c  f0014100          AND      r1,r1,#0x80000000
000020  b101              CBZ      r1,|L17.36|
;;;445        {
;;;446          status = HAL_ERROR;
000022  2001              MOVS     r0,#1
                  |L17.36|
;;;447        }
;;;448      }
;;;449    
;;;450      return status;
;;;451    }
000024  4770              BX       lr
;;;452    
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
                          DCD      0x40023c10
                  |L17.44|
                          DCD      0x45670123
                  |L17.48|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH|
#line 478
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX|
#line 665
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
