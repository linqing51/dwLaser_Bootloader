; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -omcu_application\stm32f4xx_hal_rcc_ex.o --asm_dir=./ --list_dir=--list --depend=mcu_application\stm32f4xx_hal_rcc_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Core/Inc -I../FATFS/Target -I../FATFS/App -I../USB_HOST/App -I../USB_HOST/Target -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Middlewares/ST/STM32_USB_Host_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Drivers\CMSIS\DSP\Include -I..\Bootloader -I..\..\dwLaser_Application\MCU_Application\deviceInfo -I.\RTE\_MCU_Application -IC:\Users\linqi\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\linqi\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F413xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F413xx -DARM_MATH_CM4 --omf_browse=mcu_application\stm32f4xx_hal_rcc_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_DisablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLI2S PROC
;;;2887     */
;;;2888   HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
000000  b510              PUSH     {r4,lr}
;;;2889   {
;;;2890     uint32_t tickstart;
;;;2891   
;;;2892     /* Disable the PLLI2S */
;;;2893     __HAL_RCC_PLLI2S_DISABLE();
000002  2000              MOVS     r0,#0
000004  490a              LDR      r1,|L1.48|
000006  6688              STR      r0,[r1,#0x68]
;;;2894   
;;;2895     /* Wait till PLLI2S is disabled */
;;;2896     tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4604              MOV      r4,r0
;;;2897     while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
00000e  e006              B        |L1.30|
                  |L1.16|
;;;2898     {
;;;2899       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
000010  f7fffffe          BL       HAL_GetTick
000014  1b00              SUBS     r0,r0,r4
000016  2802              CMP      r0,#2
000018  d901              BLS      |L1.30|
;;;2900       {
;;;2901         /* return in case of Timeout detected */
;;;2902         return HAL_TIMEOUT;
00001a  2003              MOVS     r0,#3
                  |L1.28|
;;;2903       }
;;;2904     }
;;;2905   
;;;2906     return HAL_OK;
;;;2907   }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  4805              LDR      r0,|L1.52|
000020  6800              LDR      r0,[r0,#0]            ;2897
000022  f0006000          AND      r0,r0,#0x8000000      ;2897
000026  2800              CMP      r0,#0                 ;2897
000028  d1f2              BNE      |L1.16|
00002a  bf00              NOP                            ;2906
00002c  e7f6              B        |L1.28|
;;;2908   
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x42470000
                  |L1.52|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLI2S PROC
;;;2804     */
;;;2805   HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
000000  b570              PUSH     {r4-r6,lr}
;;;2806   {
000002  4604              MOV      r4,r0
;;;2807     uint32_t tickstart;
;;;2808   
;;;2809     /* Check for parameters */
;;;2810     assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
;;;2811     assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
;;;2812   #if defined(RCC_PLLI2SCFGR_PLLI2SM)
;;;2813     assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SInit->PLLI2SM));
;;;2814   #endif /* RCC_PLLI2SCFGR_PLLI2SM */
;;;2815   #if defined(RCC_PLLI2SCFGR_PLLI2SP)
;;;2816     assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
;;;2817   #endif /* RCC_PLLI2SCFGR_PLLI2SP */
;;;2818   #if defined(RCC_PLLI2SCFGR_PLLI2SQ)
;;;2819     assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
;;;2820   #endif /* RCC_PLLI2SCFGR_PLLI2SQ */
;;;2821   
;;;2822     /* Disable the PLLI2S */
;;;2823     __HAL_RCC_PLLI2S_DISABLE();
000004  2000              MOVS     r0,#0
000006  491b              LDR      r1,|L2.116|
000008  6688              STR      r0,[r1,#0x68]
;;;2824   
;;;2825     /* Wait till PLLI2S is disabled */
;;;2826     tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4605              MOV      r5,r0
;;;2827     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
000010  e006              B        |L2.32|
                  |L2.18|
;;;2828     {
;;;2829       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  2802              CMP      r0,#2
00001a  d901              BLS      |L2.32|
;;;2830       {
;;;2831         /* return in case of Timeout detected */
;;;2832         return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
                  |L2.30|
;;;2833       }
;;;2834     }
;;;2835   
;;;2836     /* Configure the PLLI2S division factors */
;;;2837   #if defined(STM32F446xx)
;;;2838     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2839     /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
;;;2840     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2841     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2842     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2843                             PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2844   #elif defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) ||\
;;;2845         defined(STM32F413xx) || defined(STM32F423xx)
;;;2846     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
;;;2847     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2848     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2849     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2850                             PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2851   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||\
;;;2852         defined(STM32F469xx) || defined(STM32F479xx)
;;;2853     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;2854     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2855     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2856     __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2857   #elif defined(STM32F411xE)
;;;2858     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2859     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2860     __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2861   #else
;;;2862     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
;;;2863     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2864     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2865   #endif /* STM32F446xx */
;;;2866   
;;;2867     /* Enable the PLLI2S */
;;;2868     __HAL_RCC_PLLI2S_ENABLE();
;;;2869   
;;;2870     /* Wait till PLLI2S is ready */
;;;2871     tickstart = HAL_GetTick();
;;;2872     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
;;;2873     {
;;;2874       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;2875       {
;;;2876         /* return in case of Timeout detected */
;;;2877         return HAL_TIMEOUT;
;;;2878       }
;;;2879     }
;;;2880   
;;;2881    return HAL_OK;
;;;2882   }
00001e  bd70              POP      {r4-r6,pc}
                  |L2.32|
000020  4815              LDR      r0,|L2.120|
000022  6800              LDR      r0,[r0,#0]            ;2827
000024  f3c060c0          UBFX     r0,r0,#27,#1          ;2827
000028  2800              CMP      r0,#0                 ;2827
00002a  d1f2              BNE      |L2.18|
00002c  e9d40100          LDRD     r0,r1,[r4,#0]         ;2849
000030  ea401081          ORR      r0,r0,r1,LSL #6       ;2849
000034  7a21              LDRB     r1,[r4,#8]            ;2849
000036  ea406001          ORR      r0,r0,r1,LSL #24      ;2849
00003a  7b21              LDRB     r1,[r4,#0xc]          ;2849
00003c  ea407001          ORR      r0,r0,r1,LSL #28      ;2849
000040  490d              LDR      r1,|L2.120|
000042  3184              ADDS     r1,r1,#0x84           ;2849
000044  6008              STR      r0,[r1,#0]            ;2849
000046  2001              MOVS     r0,#1                 ;2868
000048  490a              LDR      r1,|L2.116|
00004a  6688              STR      r0,[r1,#0x68]         ;2868
00004c  f7fffffe          BL       HAL_GetTick
000050  4605              MOV      r5,r0                 ;2871
000052  e006              B        |L2.98|
                  |L2.84|
000054  f7fffffe          BL       HAL_GetTick
000058  1b40              SUBS     r0,r0,r5              ;2874
00005a  2802              CMP      r0,#2                 ;2874
00005c  d901              BLS      |L2.98|
00005e  2003              MOVS     r0,#3                 ;2877
000060  e7dd              B        |L2.30|
                  |L2.98|
000062  4805              LDR      r0,|L2.120|
000064  6800              LDR      r0,[r0,#0]            ;2872
000066  f3c060c0          UBFX     r0,r0,#27,#1          ;2872
00006a  2800              CMP      r0,#0                 ;2872
00006c  d0f2              BEQ      |L2.84|
00006e  2000              MOVS     r0,#0                 ;2881
000070  e7d5              B        |L2.30|
;;;2883   
                          ENDP

000072  0000              DCW      0x0000
                  |L2.116|
                          DCD      0x42470000
                  |L2.120|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;1635     */
;;;1636   void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  f647727f          MOV      r2,#0x7f7f
;;;1637   {
;;;1638     uint32_t tempreg;
;;;1639   
;;;1640     /* Set all possible values for the extended clock type parameter------------*/
;;;1641   #if defined(STM32F413xx) || defined(STM32F423xx)
;;;1642     PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1     | RCC_PERIPHCLK_I2S_APB2 |\
000004  6002              STR      r2,[r0,#0]
;;;1643                                           RCC_PERIPHCLK_TIM          | RCC_PERIPHCLK_RTC      |\
;;;1644                                           RCC_PERIPHCLK_FMPI2C1      | RCC_PERIPHCLK_CLK48    |\
;;;1645                                           RCC_PERIPHCLK_SDIO         | RCC_PERIPHCLK_DFSDM1   |\
;;;1646                                           RCC_PERIPHCLK_DFSDM1_AUDIO | RCC_PERIPHCLK_DFSDM2   |\
;;;1647                                           RCC_PERIPHCLK_DFSDM2_AUDIO | RCC_PERIPHCLK_LPTIM1   |\
;;;1648                                           RCC_PERIPHCLK_SAIA         | RCC_PERIPHCLK_SAIB;
;;;1649   #else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx */
;;;1650     PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
;;;1651                                           RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
;;;1652                                           RCC_PERIPHCLK_FMPI2C1  | RCC_PERIPHCLK_CLK48    |\
;;;1653                                           RCC_PERIPHCLK_SDIO     | RCC_PERIPHCLK_DFSDM1   |\
;;;1654                                           RCC_PERIPHCLK_DFSDM1_AUDIO;
;;;1655   #endif /* STM32F413xx || STM32F423xx */
;;;1656   
;;;1657   
;;;1658   
;;;1659     /* Get the PLLI2S Clock configuration --------------------------------------*/
;;;1660     PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
000006  4a41              LDR      r2,|L3.268|
000008  6812              LDR      r2,[r2,#0]
00000a  f002023f          AND      r2,r2,#0x3f
00000e  6042              STR      r2,[r0,#4]
;;;1661     PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
000010  4a3e              LDR      r2,|L3.268|
000012  6812              LDR      r2,[r2,#0]
000014  f3c21388          UBFX     r3,r2,#6,#9
000018  6083              STR      r3,[r0,#8]
;;;1662     PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
00001a  4a3c              LDR      r2,|L3.268|
00001c  6812              LDR      r2,[r2,#0]
00001e  f3c26303          UBFX     r3,r2,#24,#4
000022  60c3              STR      r3,[r0,#0xc]
;;;1663     PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
000024  4a39              LDR      r2,|L3.268|
000026  6812              LDR      r2,[r2,#0]
000028  f3c27302          UBFX     r3,r2,#28,#3
00002c  6103              STR      r3,[r0,#0x10]
;;;1664   #if defined(STM32F413xx) || defined(STM32F423xx)
;;;1665     /* Get the PLL/PLLI2S division factors -------------------------------------*/
;;;1666     PeriphClkInit->PLLI2SDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVR) >> RCC_DCKCFGR_PLLI2SDIVR_Pos);
00002e  4a37              LDR      r2,|L3.268|
000030  3208              ADDS     r2,r2,#8
000032  6812              LDR      r2,[r2,#0]
000034  f002021f          AND      r2,r2,#0x1f
000038  6182              STR      r2,[r0,#0x18]
;;;1667     PeriphClkInit->PLLDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLDIVR) >> RCC_DCKCFGR_PLLDIVR_Pos);
00003a  4a34              LDR      r2,|L3.268|
00003c  3208              ADDS     r2,r2,#8
00003e  6812              LDR      r2,[r2,#0]
000040  f3c22204          UBFX     r2,r2,#8,#5
000044  6142              STR      r2,[r0,#0x14]
;;;1668   #endif /* STM32F413xx || STM32F423xx */
;;;1669   
;;;1670     /* Get the I2S APB1 clock configuration ------------------------------------*/
;;;1671     PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
000046  4a31              LDR      r2,|L3.268|
000048  3208              ADDS     r2,r2,#8
00004a  6812              LDR      r2,[r2,#0]
00004c  f00262c0          AND      r2,r2,#0x6000000
000050  61c2              STR      r2,[r0,#0x1c]
;;;1672   
;;;1673     /* Get the I2S APB2 clock configuration ------------------------------------*/
;;;1674     PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
000052  4a2e              LDR      r2,|L3.268|
000054  3208              ADDS     r2,r2,#8
000056  6812              LDR      r2,[r2,#0]
000058  f00252c0          AND      r2,r2,#0x18000000
00005c  6202              STR      r2,[r0,#0x20]
;;;1675   
;;;1676     /* Get the RTC Clock configuration -----------------------------------------*/
;;;1677     tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
00005e  4a2b              LDR      r2,|L3.268|
000060  3a7c              SUBS     r2,r2,#0x7c
000062  6812              LDR      r2,[r2,#0]
000064  f40211f8          AND      r1,r2,#0x1f0000
;;;1678     PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
000068  4a28              LDR      r2,|L3.268|
00006a  3a14              SUBS     r2,r2,#0x14
00006c  6812              LDR      r2,[r2,#0]
00006e  f4027240          AND      r2,r2,#0x300
000072  430a              ORRS     r2,r2,r1
000074  6242              STR      r2,[r0,#0x24]
;;;1679   
;;;1680     /* Get the FMPI2C1 clock configuration -------------------------------------*/
;;;1681     PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
000076  4a25              LDR      r2,|L3.268|
000078  3210              ADDS     r2,r2,#0x10
00007a  6812              LDR      r2,[r2,#0]
00007c  f4020240          AND      r2,r2,#0xc00000
000080  62c2              STR      r2,[r0,#0x2c]
;;;1682   
;;;1683     /* Get the CLK48 clock configuration ---------------------------------------*/
;;;1684     PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
000082  4a22              LDR      r2,|L3.268|
000084  3210              ADDS     r2,r2,#0x10
000086  6812              LDR      r2,[r2,#0]
000088  f0026200          AND      r2,r2,#0x8000000
00008c  6302              STR      r2,[r0,#0x30]
;;;1685   
;;;1686     /* Get the SDIO clock configuration ----------------------------------------*/
;;;1687     PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
00008e  4a1f              LDR      r2,|L3.268|
000090  3210              ADDS     r2,r2,#0x10
000092  6812              LDR      r2,[r2,#0]
000094  f0025280          AND      r2,r2,#0x10000000
000098  6282              STR      r2,[r0,#0x28]
;;;1688   
;;;1689     /* Get the DFSDM1 clock configuration --------------------------------------*/
;;;1690     PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
00009a  4a1c              LDR      r2,|L3.268|
00009c  3208              ADDS     r2,r2,#8
00009e  6812              LDR      r2,[r2,#0]
0000a0  f0024200          AND      r2,r2,#0x80000000
0000a4  6342              STR      r2,[r0,#0x34]
;;;1691   
;;;1692     /* Get the DFSDM1 Audio clock configuration --------------------------------*/
;;;1693     PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
0000a6  4a19              LDR      r2,|L3.268|
0000a8  3208              ADDS     r2,r2,#8
0000aa  6812              LDR      r2,[r2,#0]
0000ac  f4024200          AND      r2,r2,#0x8000
0000b0  6382              STR      r2,[r0,#0x38]
;;;1694   
;;;1695   #if defined(STM32F413xx) || defined(STM32F423xx)
;;;1696     /* Get the DFSDM2 clock configuration --------------------------------------*/
;;;1697     PeriphClkInit->Dfsdm2ClockSelection = __HAL_RCC_GET_DFSDM2_SOURCE();
0000b2  4a16              LDR      r2,|L3.268|
0000b4  3208              ADDS     r2,r2,#8
0000b6  6812              LDR      r2,[r2,#0]
0000b8  f0024200          AND      r2,r2,#0x80000000
0000bc  63c2              STR      r2,[r0,#0x3c]
;;;1698   
;;;1699     /* Get the DFSDM2 Audio clock configuration --------------------------------*/
;;;1700     PeriphClkInit->Dfsdm2AudioClockSelection = __HAL_RCC_GET_DFSDM2AUDIO_SOURCE();
0000be  4a13              LDR      r2,|L3.268|
0000c0  3208              ADDS     r2,r2,#8
0000c2  6812              LDR      r2,[r2,#0]
0000c4  f4024280          AND      r2,r2,#0x4000
0000c8  6402              STR      r2,[r0,#0x40]
;;;1701   
;;;1702     /* Get the LPTIM1 clock configuration --------------------------------------*/
;;;1703     PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
0000ca  4a10              LDR      r2,|L3.268|
0000cc  3210              ADDS     r2,r2,#0x10
0000ce  6812              LDR      r2,[r2,#0]
0000d0  f0024240          AND      r2,r2,#0xc0000000
0000d4  6442              STR      r2,[r0,#0x44]
;;;1704   
;;;1705     /* Get the SAI1 Block Aclock configuration ---------------------------------*/
;;;1706     PeriphClkInit->SaiAClockSelection = __HAL_RCC_GET_SAI_BLOCKA_SOURCE();
0000d6  4a0d              LDR      r2,|L3.268|
0000d8  3208              ADDS     r2,r2,#8
0000da  6812              LDR      r2,[r2,#0]
0000dc  f4021240          AND      r2,r2,#0x300000
0000e0  6482              STR      r2,[r0,#0x48]
;;;1707   
;;;1708     /* Get the SAI1 Block B clock configuration --------------------------------*/
;;;1709     PeriphClkInit->SaiBClockSelection = __HAL_RCC_GET_SAI_BLOCKB_SOURCE();
0000e2  4a0a              LDR      r2,|L3.268|
0000e4  3208              ADDS     r2,r2,#8
0000e6  6812              LDR      r2,[r2,#0]
0000e8  f4020240          AND      r2,r2,#0xc00000
0000ec  64c2              STR      r2,[r0,#0x4c]
;;;1710   #endif /* STM32F413xx || STM32F423xx */
;;;1711   
;;;1712     /* Get the TIM Prescaler configuration -------------------------------------*/
;;;1713     if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
0000ee  4a07              LDR      r2,|L3.268|
0000f0  3208              ADDS     r2,r2,#8
0000f2  6812              LDR      r2,[r2,#0]
0000f4  f0027280          AND      r2,r2,#0x1000000
0000f8  b91a              CBNZ     r2,|L3.258|
;;;1714     {
;;;1715       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
0000fa  2200              MOVS     r2,#0
0000fc  f8802054          STRB     r2,[r0,#0x54]
000100  e002              B        |L3.264|
                  |L3.258|
;;;1716     }
;;;1717     else
;;;1718     {
;;;1719       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
000102  2201              MOVS     r2,#1
000104  f8802054          STRB     r2,[r0,#0x54]
                  |L3.264|
;;;1720     }
;;;1721   }
000108  4770              BX       lr
;;;1722   
                          ENDP

00010a  0000              DCW      0x0000
                  |L3.268|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;1731     */
;;;1732   uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b570              PUSH     {r4-r6,lr}
;;;1733   {
000002  4603              MOV      r3,r0
;;;1734     /* This variable used to store the I2S clock frequency (value in Hz) */
;;;1735     uint32_t frequency = 0U;
000004  2000              MOVS     r0,#0
;;;1736     /* This variable used to store the VCO Input (value in Hz) */
;;;1737     uint32_t vcoinput = 0U;
000006  2100              MOVS     r1,#0
;;;1738     uint32_t srcclk = 0U;
000008  2400              MOVS     r4,#0
;;;1739     /* This variable used to store the VCO Output (value in Hz) */
;;;1740     uint32_t vcooutput = 0U;
00000a  2200              MOVS     r2,#0
;;;1741     switch (PeriphClk)
00000c  2b01              CMP      r3,#1
00000e  d002              BEQ      |L4.22|
000010  2b02              CMP      r3,#2
000012  d172              BNE      |L4.250|
000014  e083              B        |L4.286|
                  |L4.22|
;;;1742     {
;;;1743     case RCC_PERIPHCLK_I2S_APB1:
;;;1744       {
;;;1745         /* Get the current I2S source */
;;;1746         srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
000016  4d84              LDR      r5,|L4.552|
000018  682d              LDR      r5,[r5,#0]
00001a  f00564c0          AND      r4,r5,#0x6000000
;;;1747         switch (srcclk)
00001e  b15c              CBZ      r4,|L4.56|
000020  f1b47f00          CMP      r4,#0x2000000
000024  d006              BEQ      |L4.52|
000026  f1b46f80          CMP      r4,#0x4000000
00002a  d03e              BEQ      |L4.170|
00002c  f1b46fc0          CMP      r4,#0x6000000
000030  d171              BNE      |L4.278|
000032  e063              B        |L4.252|
                  |L4.52|
;;;1748         {
;;;1749         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
;;;1750         case RCC_I2SAPB1CLKSOURCE_EXT:
;;;1751           {
;;;1752             /* Set the I2S clock to the external clock  value */
;;;1753             frequency = EXTERNAL_CLOCK_VALUE;
000034  487d              LDR      r0,|L4.556|
;;;1754             break;
000036  e070              B        |L4.282|
                  |L4.56|
;;;1755           }
;;;1756         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
;;;1757         case RCC_I2SAPB1CLKSOURCE_PLLI2S:
;;;1758           {
;;;1759             if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
000038  4d7b              LDR      r5,|L4.552|
00003a  3d08              SUBS     r5,r5,#8
00003c  682d              LDR      r5,[r5,#0]
00003e  f4050580          AND      r5,r5,#0x400000
000042  f5b50f80          CMP      r5,#0x400000
000046  d108              BNE      |L4.90|
;;;1760             {
;;;1761               /* Get the I2S source clock value */
;;;1762               vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
000048  4d77              LDR      r5,|L4.552|
00004a  3d08              SUBS     r5,r5,#8
00004c  682d              LDR      r5,[r5,#0]
00004e  f005053f          AND      r5,r5,#0x3f
000052  4e76              LDR      r6,|L4.556|
000054  fbb6f1f5          UDIV     r1,r6,r5
000058  e018              B        |L4.140|
                  |L4.90|
;;;1763             }
;;;1764             else
;;;1765             {
;;;1766               /* Configure the PLLI2S division factor */
;;;1767               /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
;;;1768               if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
00005a  4d73              LDR      r5,|L4.552|
00005c  3d88              SUBS     r5,r5,#0x88
00005e  682d              LDR      r5,[r5,#0]
000060  f4050580          AND      r5,r5,#0x400000
000064  f5b50f80          CMP      r5,#0x400000
000068  d108              BNE      |L4.124|
;;;1769               {
;;;1770                 /* Get the I2S source clock value */
;;;1771                 vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
00006a  4d6f              LDR      r5,|L4.552|
00006c  3d08              SUBS     r5,r5,#8
00006e  682d              LDR      r5,[r5,#0]
000070  f005053f          AND      r5,r5,#0x3f
000074  4e6e              LDR      r6,|L4.560|
000076  fbb6f1f5          UDIV     r1,r6,r5
00007a  e007              B        |L4.140|
                  |L4.124|
;;;1772               }
;;;1773               else
;;;1774               {
;;;1775                 /* Get the I2S source clock value */
;;;1776                 vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
00007c  4d6a              LDR      r5,|L4.552|
00007e  3d08              SUBS     r5,r5,#8
000080  682d              LDR      r5,[r5,#0]
000082  f005053f          AND      r5,r5,#0x3f
000086  4e6b              LDR      r6,|L4.564|
000088  fbb6f1f5          UDIV     r1,r6,r5
                  |L4.140|
;;;1777               }
;;;1778             }
;;;1779             /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1780             vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
00008c  4d66              LDR      r5,|L4.552|
00008e  3d08              SUBS     r5,r5,#8
000090  682d              LDR      r5,[r5,#0]
000092  f3c51588          UBFX     r5,r5,#6,#9
000096  fb05f201          MUL      r2,r5,r1
;;;1781             /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
;;;1782             frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
00009a  4d63              LDR      r5,|L4.552|
00009c  3d08              SUBS     r5,r5,#8
00009e  682d              LDR      r5,[r5,#0]
0000a0  f3c57502          UBFX     r5,r5,#28,#3
0000a4  fbb2f0f5          UDIV     r0,r2,r5
;;;1783             break;
0000a8  e037              B        |L4.282|
                  |L4.170|
;;;1784           }
;;;1785         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
;;;1786         case RCC_I2SAPB1CLKSOURCE_PLLR:
;;;1787           {
;;;1788             /* Configure the PLL division factor R */
;;;1789             /* PLL_VCO Input  = PLL_SOURCE/PLLM */
;;;1790             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
0000aa  4d5f              LDR      r5,|L4.552|
0000ac  3d88              SUBS     r5,r5,#0x88
0000ae  682d              LDR      r5,[r5,#0]
0000b0  f4050580          AND      r5,r5,#0x400000
0000b4  f5b50f80          CMP      r5,#0x400000
0000b8  d108              BNE      |L4.204|
;;;1791             {
;;;1792               /* Get the I2S source clock value */
;;;1793               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
0000ba  4d5b              LDR      r5,|L4.552|
0000bc  3d88              SUBS     r5,r5,#0x88
0000be  682d              LDR      r5,[r5,#0]
0000c0  f005053f          AND      r5,r5,#0x3f
0000c4  4e5a              LDR      r6,|L4.560|
0000c6  fbb6f1f5          UDIV     r1,r6,r5
0000ca  e007              B        |L4.220|
                  |L4.204|
;;;1794             }
;;;1795             else
;;;1796             {
;;;1797               /* Get the I2S source clock value */
;;;1798               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
0000cc  4d56              LDR      r5,|L4.552|
0000ce  3d88              SUBS     r5,r5,#0x88
0000d0  682d              LDR      r5,[r5,#0]
0000d2  f005053f          AND      r5,r5,#0x3f
0000d6  4e57              LDR      r6,|L4.564|
0000d8  fbb6f1f5          UDIV     r1,r6,r5
                  |L4.220|
;;;1799             }
;;;1800   
;;;1801             /* PLL_VCO Output = PLL_VCO Input * PLLN */
;;;1802             vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
0000dc  4d52              LDR      r5,|L4.552|
0000de  3d88              SUBS     r5,r5,#0x88
0000e0  682d              LDR      r5,[r5,#0]
0000e2  f3c51588          UBFX     r5,r5,#6,#9
0000e6  fb05f201          MUL      r2,r5,r1
;;;1803             /* I2S_CLK = PLL_VCO Output/PLLR */
;;;1804             frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
0000ea  4d4f              LDR      r5,|L4.552|
0000ec  3d88              SUBS     r5,r5,#0x88
0000ee  682d              LDR      r5,[r5,#0]
0000f0  f3c57502          UBFX     r5,r5,#28,#3
0000f4  fbb2f0f5          UDIV     r0,r2,r5
;;;1805             break;
0000f8  e00f              B        |L4.282|
                  |L4.250|
0000fa  e093              B        |L4.548|
                  |L4.252|
;;;1806           }
;;;1807         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
;;;1808         case RCC_I2SAPB1CLKSOURCE_PLLSRC:
;;;1809           {
;;;1810             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
0000fc  4d4a              LDR      r5,|L4.552|
0000fe  3d88              SUBS     r5,r5,#0x88
000100  682d              LDR      r5,[r5,#0]
000102  f4050580          AND      r5,r5,#0x400000
000106  f5b50f80          CMP      r5,#0x400000
00010a  d101              BNE      |L4.272|
;;;1811             {
;;;1812               frequency = HSE_VALUE;
00010c  4848              LDR      r0,|L4.560|
00010e  e000              B        |L4.274|
                  |L4.272|
;;;1813             }
;;;1814             else
;;;1815             {
;;;1816               frequency = HSI_VALUE;
000110  4848              LDR      r0,|L4.564|
                  |L4.274|
;;;1817             }
;;;1818             break;
000112  e002              B        |L4.282|
000114  e7ff              B        |L4.278|
                  |L4.278|
;;;1819           }
;;;1820           /* Clock not enabled for I2S*/
;;;1821         default:
;;;1822           {
;;;1823             frequency = 0U;
000116  2000              MOVS     r0,#0
;;;1824             break;
000118  bf00              NOP      
                  |L4.282|
00011a  bf00              NOP                            ;1754
;;;1825           }
;;;1826         }
;;;1827         break;
00011c  e082              B        |L4.548|
                  |L4.286|
;;;1828       }
;;;1829     case RCC_PERIPHCLK_I2S_APB2:
;;;1830       {
;;;1831         /* Get the current I2S source */
;;;1832         srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
00011e  4d42              LDR      r5,|L4.552|
000120  682d              LDR      r5,[r5,#0]
000122  f00554c0          AND      r4,r5,#0x18000000
;;;1833         switch (srcclk)
000126  b15c              CBZ      r4,|L4.320|
000128  f1b46f00          CMP      r4,#0x8000000
00012c  d006              BEQ      |L4.316|
00012e  f1b45f80          CMP      r4,#0x10000000
000132  d03e              BEQ      |L4.434|
000134  f1b45fc0          CMP      r4,#0x18000000
000138  d170              BNE      |L4.540|
00013a  e062              B        |L4.514|
                  |L4.316|
;;;1834         {
;;;1835           /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
;;;1836         case RCC_I2SAPB2CLKSOURCE_EXT:
;;;1837           {
;;;1838             /* Set the I2S clock to the external clock  value */
;;;1839             frequency = EXTERNAL_CLOCK_VALUE;
00013c  483b              LDR      r0,|L4.556|
;;;1840             break;
00013e  e06f              B        |L4.544|
                  |L4.320|
;;;1841           }
;;;1842           /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
;;;1843         case RCC_I2SAPB2CLKSOURCE_PLLI2S:
;;;1844           {
;;;1845             if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
000140  4d39              LDR      r5,|L4.552|
000142  3d08              SUBS     r5,r5,#8
000144  682d              LDR      r5,[r5,#0]
000146  f4050580          AND      r5,r5,#0x400000
00014a  f5b50f80          CMP      r5,#0x400000
00014e  d108              BNE      |L4.354|
;;;1846             {
;;;1847               /* Get the I2S source clock value */
;;;1848               vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
000150  4d35              LDR      r5,|L4.552|
000152  3d08              SUBS     r5,r5,#8
000154  682d              LDR      r5,[r5,#0]
000156  f005053f          AND      r5,r5,#0x3f
00015a  4e34              LDR      r6,|L4.556|
00015c  fbb6f1f5          UDIV     r1,r6,r5
000160  e018              B        |L4.404|
                  |L4.354|
;;;1849             }
;;;1850             else
;;;1851             {
;;;1852               /* Configure the PLLI2S division factor */
;;;1853               /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
;;;1854               if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
000162  4d31              LDR      r5,|L4.552|
000164  3d88              SUBS     r5,r5,#0x88
000166  682d              LDR      r5,[r5,#0]
000168  f4050580          AND      r5,r5,#0x400000
00016c  f5b50f80          CMP      r5,#0x400000
000170  d108              BNE      |L4.388|
;;;1855               {
;;;1856                 /* Get the I2S source clock value */
;;;1857                 vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
000172  4d2d              LDR      r5,|L4.552|
000174  3d08              SUBS     r5,r5,#8
000176  682d              LDR      r5,[r5,#0]
000178  f005053f          AND      r5,r5,#0x3f
00017c  4e2c              LDR      r6,|L4.560|
00017e  fbb6f1f5          UDIV     r1,r6,r5
000182  e007              B        |L4.404|
                  |L4.388|
;;;1858               }
;;;1859               else
;;;1860               {
;;;1861                 /* Get the I2S source clock value */
;;;1862                 vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
000184  4d28              LDR      r5,|L4.552|
000186  3d08              SUBS     r5,r5,#8
000188  682d              LDR      r5,[r5,#0]
00018a  f005053f          AND      r5,r5,#0x3f
00018e  4e29              LDR      r6,|L4.564|
000190  fbb6f1f5          UDIV     r1,r6,r5
                  |L4.404|
;;;1863               }
;;;1864             }
;;;1865             /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1866             vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
000194  4d24              LDR      r5,|L4.552|
000196  3d08              SUBS     r5,r5,#8
000198  682d              LDR      r5,[r5,#0]
00019a  f3c51588          UBFX     r5,r5,#6,#9
00019e  fb05f201          MUL      r2,r5,r1
;;;1867             /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
;;;1868             frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
0001a2  4d21              LDR      r5,|L4.552|
0001a4  3d08              SUBS     r5,r5,#8
0001a6  682d              LDR      r5,[r5,#0]
0001a8  f3c57502          UBFX     r5,r5,#28,#3
0001ac  fbb2f0f5          UDIV     r0,r2,r5
;;;1869             break;
0001b0  e036              B        |L4.544|
                  |L4.434|
;;;1870           }
;;;1871           /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
;;;1872         case RCC_I2SAPB2CLKSOURCE_PLLR:
;;;1873           {
;;;1874             /* Configure the PLL division factor R */
;;;1875             /* PLL_VCO Input  = PLL_SOURCE/PLLM */
;;;1876             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
0001b2  4d1d              LDR      r5,|L4.552|
0001b4  3d88              SUBS     r5,r5,#0x88
0001b6  682d              LDR      r5,[r5,#0]
0001b8  f4050580          AND      r5,r5,#0x400000
0001bc  f5b50f80          CMP      r5,#0x400000
0001c0  d108              BNE      |L4.468|
;;;1877             {
;;;1878               /* Get the I2S source clock value */
;;;1879               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
0001c2  4d19              LDR      r5,|L4.552|
0001c4  3d88              SUBS     r5,r5,#0x88
0001c6  682d              LDR      r5,[r5,#0]
0001c8  f005053f          AND      r5,r5,#0x3f
0001cc  4e18              LDR      r6,|L4.560|
0001ce  fbb6f1f5          UDIV     r1,r6,r5
0001d2  e007              B        |L4.484|
                  |L4.468|
;;;1880             }
;;;1881             else
;;;1882             {
;;;1883               /* Get the I2S source clock value */
;;;1884               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
0001d4  4d14              LDR      r5,|L4.552|
0001d6  3d88              SUBS     r5,r5,#0x88
0001d8  682d              LDR      r5,[r5,#0]
0001da  f005053f          AND      r5,r5,#0x3f
0001de  4e15              LDR      r6,|L4.564|
0001e0  fbb6f1f5          UDIV     r1,r6,r5
                  |L4.484|
;;;1885             }
;;;1886   
;;;1887             /* PLL_VCO Output = PLL_VCO Input * PLLN */
;;;1888             vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
0001e4  4d10              LDR      r5,|L4.552|
0001e6  3d88              SUBS     r5,r5,#0x88
0001e8  682d              LDR      r5,[r5,#0]
0001ea  f3c51588          UBFX     r5,r5,#6,#9
0001ee  fb05f201          MUL      r2,r5,r1
;;;1889             /* I2S_CLK = PLL_VCO Output/PLLR */
;;;1890             frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
0001f2  4d0d              LDR      r5,|L4.552|
0001f4  3d88              SUBS     r5,r5,#0x88
0001f6  682d              LDR      r5,[r5,#0]
0001f8  f3c57502          UBFX     r5,r5,#28,#3
0001fc  fbb2f0f5          UDIV     r0,r2,r5
;;;1891             break;
000200  e00e              B        |L4.544|
                  |L4.514|
;;;1892           }
;;;1893           /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
;;;1894         case RCC_I2SAPB2CLKSOURCE_PLLSRC:
;;;1895           {
;;;1896             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
000202  4d09              LDR      r5,|L4.552|
000204  3d88              SUBS     r5,r5,#0x88
000206  682d              LDR      r5,[r5,#0]
000208  f4050580          AND      r5,r5,#0x400000
00020c  f5b50f80          CMP      r5,#0x400000
000210  d101              BNE      |L4.534|
;;;1897             {
;;;1898               frequency = HSE_VALUE;
000212  4807              LDR      r0,|L4.560|
000214  e000              B        |L4.536|
                  |L4.534|
;;;1899             }
;;;1900             else
;;;1901             {
;;;1902               frequency = HSI_VALUE;
000216  4807              LDR      r0,|L4.564|
                  |L4.536|
;;;1903             }
;;;1904             break;
000218  e002              B        |L4.544|
00021a  e7ff              B        |L4.540|
                  |L4.540|
;;;1905           }
;;;1906         /* Clock not enabled for I2S*/
;;;1907         default:
;;;1908           {
;;;1909             frequency = 0U;
00021c  2000              MOVS     r0,#0
;;;1910             break;
00021e  bf00              NOP      
                  |L4.544|
000220  bf00              NOP                            ;1840
;;;1911           }
;;;1912         }
;;;1913         break;
000222  bf00              NOP      
                  |L4.548|
000224  bf00              NOP                            ;1827
;;;1914       }
;;;1915     }
;;;1916     return frequency;
;;;1917   }
000226  bd70              POP      {r4-r6,pc}
;;;1918   #endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */
                          ENDP

                  |L4.552|
                          DCD      0x4002388c
                  |L4.556|
                          DCD      0x00bb8000
                  |L4.560|
                          DCD      0x017d7840
                  |L4.564|
                          DCD      0x00f42400

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;1277     */
;;;1278   HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1279   {
000004  4604              MOV      r4,r0
;;;1280     uint32_t tickstart = 0U;
000006  2500              MOVS     r5,#0
;;;1281     uint32_t tmpreg1 = 0U;
000008  2600              MOVS     r6,#0
;;;1282   #if defined(STM32F413xx) || defined(STM32F423xx)
;;;1283     uint32_t plli2sq = 0U;
00000a  2700              MOVS     r7,#0
;;;1284   #endif /* STM32F413xx || STM32F423xx */
;;;1285     uint32_t plli2sused = 0U;
00000c  46a8              MOV      r8,r5
;;;1286   
;;;1287     /* Check the peripheral clock selection parameters */
;;;1288     assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;1289   
;;;1290     /*----------------------------------- I2S APB1 configuration ---------------*/
;;;1291     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
00000e  7820              LDRB     r0,[r4,#0]
000010  f0000001          AND      r0,r0,#1
000014  b158              CBZ      r0,|L5.46|
;;;1292     {
;;;1293       /* Check the parameters */
;;;1294       assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));
;;;1295   
;;;1296       /* Configure I2S Clock source */
;;;1297       __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
000016  48fe              LDR      r0,|L5.1040|
000018  6800              LDR      r0,[r0,#0]
00001a  f02060c0          BIC      r0,r0,#0x6000000
00001e  69e1              LDR      r1,[r4,#0x1c]
000020  4308              ORRS     r0,r0,r1
000022  49fb              LDR      r1,|L5.1040|
000024  6008              STR      r0,[r1,#0]
;;;1298       /* Enable the PLLI2S when it's used as clock source for I2S */
;;;1299       if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
000026  69e0              LDR      r0,[r4,#0x1c]
000028  b908              CBNZ     r0,|L5.46|
;;;1300       {
;;;1301         plli2sused = 1U;
00002a  f04f0801          MOV      r8,#1
                  |L5.46|
;;;1302       }
;;;1303     }
;;;1304     /*--------------------------------------------------------------------------*/
;;;1305   
;;;1306     /*----------------------------------- I2S APB2 configuration ---------------*/
;;;1307     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
00002e  7820              LDRB     r0,[r4,#0]
000030  f0000002          AND      r0,r0,#2
000034  2802              CMP      r0,#2
000036  d10b              BNE      |L5.80|
;;;1308     {
;;;1309       /* Check the parameters */
;;;1310       assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));
;;;1311   
;;;1312       /* Configure I2S Clock source */
;;;1313       __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
000038  48f5              LDR      r0,|L5.1040|
00003a  6800              LDR      r0,[r0,#0]
00003c  f02050c0          BIC      r0,r0,#0x18000000
000040  6a21              LDR      r1,[r4,#0x20]
000042  4308              ORRS     r0,r0,r1
000044  49f2              LDR      r1,|L5.1040|
000046  6008              STR      r0,[r1,#0]
;;;1314       /* Enable the PLLI2S when it's used as clock source for I2S */
;;;1315       if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
000048  6a20              LDR      r0,[r4,#0x20]
00004a  b908              CBNZ     r0,|L5.80|
;;;1316       {
;;;1317         plli2sused = 1U;
00004c  f04f0801          MOV      r8,#1
                  |L5.80|
;;;1318       }
;;;1319     }
;;;1320     /*--------------------------------------------------------------------------*/
;;;1321   
;;;1322   #if defined(STM32F413xx) || defined(STM32F423xx)
;;;1323     /*----------------------- SAI1 Block A configuration -----------------------*/
;;;1324     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
000050  8820              LDRH     r0,[r4,#0]
000052  f4005000          AND      r0,r0,#0x2000
000056  f5b05f00          CMP      r0,#0x2000
00005a  d119              BNE      |L5.144|
;;;1325     {
;;;1326       /* Check the parameters */
;;;1327       assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));
;;;1328   
;;;1329       /* Configure SAI1 Clock source */
;;;1330       __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
00005c  48ec              LDR      r0,|L5.1040|
00005e  6800              LDR      r0,[r0,#0]
000060  f4201040          BIC      r0,r0,#0x300000
000064  6ca1              LDR      r1,[r4,#0x48]
000066  4308              ORRS     r0,r0,r1
000068  49e9              LDR      r1,|L5.1040|
00006a  6008              STR      r0,[r1,#0]
;;;1331       /* Enable the PLLI2S when it's used as clock source for SAI */
;;;1332       if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
00006c  6ca0              LDR      r0,[r4,#0x48]
00006e  b908              CBNZ     r0,|L5.116|
;;;1333       {
;;;1334         plli2sused = 1U;
000070  f04f0801          MOV      r8,#1
                  |L5.116|
;;;1335       }
;;;1336       /* Enable the PLLSAI when it's used as clock source for SAI */
;;;1337       if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
000074  6ca0              LDR      r0,[r4,#0x48]
000076  f5b01f00          CMP      r0,#0x200000
00007a  d109              BNE      |L5.144|
;;;1338       {
;;;1339         /* Check for PLL/DIVR parameters */
;;;1340         assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));
;;;1341   
;;;1342         /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
;;;1343         __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
00007c  48e4              LDR      r0,|L5.1040|
00007e  6800              LDR      r0,[r0,#0]
000080  f42051f8          BIC      r1,r0,#0x1f00
000084  6960              LDR      r0,[r4,#0x14]
000086  1e40              SUBS     r0,r0,#1
000088  ea412000          ORR      r0,r1,r0,LSL #8
00008c  49e0              LDR      r1,|L5.1040|
00008e  6008              STR      r0,[r1,#0]
                  |L5.144|
;;;1344       }
;;;1345     }
;;;1346     /*--------------------------------------------------------------------------*/
;;;1347   
;;;1348     /*---------------------- SAI1 Block B configuration ------------------------*/
;;;1349     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
000090  8820              LDRH     r0,[r4,#0]
000092  f4004080          AND      r0,r0,#0x4000
000096  f5b04f80          CMP      r0,#0x4000
00009a  d119              BNE      |L5.208|
;;;1350     {
;;;1351       /* Check the parameters */
;;;1352       assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));
;;;1353   
;;;1354       /* Configure SAI1 Clock source */
;;;1355       __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
00009c  48dc              LDR      r0,|L5.1040|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f4200040          BIC      r0,r0,#0xc00000
0000a4  6ce1              LDR      r1,[r4,#0x4c]
0000a6  4308              ORRS     r0,r0,r1
0000a8  49d9              LDR      r1,|L5.1040|
0000aa  6008              STR      r0,[r1,#0]
;;;1356       /* Enable the PLLI2S when it's used as clock source for SAI */
;;;1357       if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
0000ac  6ce0              LDR      r0,[r4,#0x4c]
0000ae  b908              CBNZ     r0,|L5.180|
;;;1358       {
;;;1359         plli2sused = 1U;
0000b0  f04f0801          MOV      r8,#1
                  |L5.180|
;;;1360       }
;;;1361       /* Enable the PLLSAI when it's used as clock source for SAI */
;;;1362       if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
0000b4  6ce0              LDR      r0,[r4,#0x4c]
0000b6  f5b00f00          CMP      r0,#0x800000
0000ba  d109              BNE      |L5.208|
;;;1363       {
;;;1364         /* Check for PLL/DIVR parameters */
;;;1365         assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));
;;;1366   
;;;1367         /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
;;;1368         __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
0000bc  48d4              LDR      r0,|L5.1040|
0000be  6800              LDR      r0,[r0,#0]
0000c0  f42051f8          BIC      r1,r0,#0x1f00
0000c4  6960              LDR      r0,[r4,#0x14]
0000c6  1e40              SUBS     r0,r0,#1
0000c8  ea412000          ORR      r0,r1,r0,LSL #8
0000cc  49d0              LDR      r1,|L5.1040|
0000ce  6008              STR      r0,[r1,#0]
                  |L5.208|
;;;1369       }
;;;1370     }
;;;1371     /*--------------------------------------------------------------------------*/
;;;1372   #endif /* STM32F413xx || STM32F423xx */
;;;1373   
;;;1374     /*------------------------------------ RTC configuration -------------------*/
;;;1375     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
0000d0  7820              LDRB     r0,[r4,#0]
0000d2  f0000008          AND      r0,r0,#8
0000d6  2808              CMP      r0,#8
0000d8  d17e              BNE      |L5.472|
;;;1376     {
;;;1377       /* Check for RTC Parameters used to output RTCCLK */
;;;1378       assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;1379   
;;;1380       /* Enable Power Clock*/
;;;1381       __HAL_RCC_PWR_CLK_ENABLE();
0000da  bf00              NOP      
0000dc  2000              MOVS     r0,#0
0000de  9000              STR      r0,[sp,#0]
0000e0  48cb              LDR      r0,|L5.1040|
0000e2  384c              SUBS     r0,r0,#0x4c
0000e4  6800              LDR      r0,[r0,#0]
0000e6  f0405080          ORR      r0,r0,#0x10000000
0000ea  49c9              LDR      r1,|L5.1040|
0000ec  394c              SUBS     r1,r1,#0x4c
0000ee  6008              STR      r0,[r1,#0]
0000f0  4608              MOV      r0,r1
0000f2  6800              LDR      r0,[r0,#0]
0000f4  f0005080          AND      r0,r0,#0x10000000
0000f8  9000              STR      r0,[sp,#0]
0000fa  bf00              NOP      
0000fc  bf00              NOP      
;;;1382   
;;;1383       /* Enable write access to Backup domain */
;;;1384       PWR->CR |= PWR_CR_DBP;
0000fe  48c5              LDR      r0,|L5.1044|
000100  6800              LDR      r0,[r0,#0]
000102  f4407080          ORR      r0,r0,#0x100
000106  49c3              LDR      r1,|L5.1044|
000108  6008              STR      r0,[r1,#0]
;;;1385   
;;;1386       /* Get tick */
;;;1387       tickstart = HAL_GetTick();
00010a  f7fffffe          BL       HAL_GetTick
00010e  4605              MOV      r5,r0
;;;1388   
;;;1389       while((PWR->CR & PWR_CR_DBP) == RESET)
000110  e007              B        |L5.290|
                  |L5.274|
;;;1390       {
;;;1391         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
000112  f7fffffe          BL       HAL_GetTick
000116  1b40              SUBS     r0,r0,r5
000118  2802              CMP      r0,#2
00011a  d902              BLS      |L5.290|
;;;1392         {
;;;1393           return HAL_TIMEOUT;
00011c  2003              MOVS     r0,#3
                  |L5.286|
;;;1394         }
;;;1395       }
;;;1396       /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
;;;1397       tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
;;;1398       if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
;;;1399       {
;;;1400         /* Store the content of BDCR register before the reset of Backup Domain */
;;;1401         tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;1402         /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;1403         __HAL_RCC_BACKUPRESET_FORCE();
;;;1404         __HAL_RCC_BACKUPRESET_RELEASE();
;;;1405         /* Restore the Content of BDCR register */
;;;1406         RCC->BDCR = tmpreg1;
;;;1407   
;;;1408         /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
;;;1409         if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
;;;1410         {
;;;1411           /* Get tick */
;;;1412           tickstart = HAL_GetTick();
;;;1413   
;;;1414           /* Wait till LSE is ready */
;;;1415           while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;1416           {
;;;1417             if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;1418             {
;;;1419               return HAL_TIMEOUT;
;;;1420             }
;;;1421           }
;;;1422         }
;;;1423       }
;;;1424       __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;1425     }
;;;1426     /*--------------------------------------------------------------------------*/
;;;1427   
;;;1428     /*------------------------------------ TIM configuration -------------------*/
;;;1429     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
;;;1430     {
;;;1431       /* Configure Timer Prescaler */
;;;1432       __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
;;;1433     }
;;;1434     /*--------------------------------------------------------------------------*/
;;;1435   
;;;1436     /*------------------------------------- FMPI2C1 Configuration --------------*/
;;;1437     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
;;;1438     {
;;;1439       /* Check the parameters */
;;;1440       assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
;;;1441   
;;;1442       /* Configure the FMPI2C1 clock source */
;;;1443       __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
;;;1444     }
;;;1445     /*--------------------------------------------------------------------------*/
;;;1446   
;;;1447     /*------------------------------------- CLK48 Configuration ----------------*/
;;;1448     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
;;;1449     {
;;;1450       /* Check the parameters */
;;;1451       assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
;;;1452   
;;;1453       /* Configure the SDIO clock source */
;;;1454       __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
;;;1455   
;;;1456       /* Enable the PLLI2S when it's used as clock source for CLK48 */
;;;1457       if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
;;;1458       {
;;;1459         plli2sused = 1U;
;;;1460       }
;;;1461     }
;;;1462     /*--------------------------------------------------------------------------*/
;;;1463   
;;;1464     /*------------------------------------- SDIO Configuration -----------------*/
;;;1465     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
;;;1466     {
;;;1467       /* Check the parameters */
;;;1468       assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
;;;1469   
;;;1470       /* Configure the SDIO clock source */
;;;1471       __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
;;;1472     }
;;;1473     /*--------------------------------------------------------------------------*/
;;;1474   
;;;1475     /*-------------------------------------- PLLI2S Configuration --------------*/
;;;1476     /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
;;;1477        I2S on APB2*/
;;;1478     if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
;;;1479     {
;;;1480       /* Disable the PLLI2S */
;;;1481       __HAL_RCC_PLLI2S_DISABLE();
;;;1482       /* Get tick */
;;;1483       tickstart = HAL_GetTick();
;;;1484       /* Wait till PLLI2S is disabled */
;;;1485       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
;;;1486       {
;;;1487         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;1488         {
;;;1489           /* return in case of Timeout detected */
;;;1490           return HAL_TIMEOUT;
;;;1491         }
;;;1492       }
;;;1493   
;;;1494       /* check for common PLLI2S Parameters */
;;;1495       assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
;;;1496       assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
;;;1497       assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;1498       /*-------------------- Set the PLL I2S clock -----------------------------*/
;;;1499       __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
;;;1500   
;;;1501       /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
;;;1502       if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
;;;1503          ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
;;;1504          ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
;;;1505          ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
;;;1506       {
;;;1507         /* check for Parameters */
;;;1508         assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;1509         assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;1510   
;;;1511         /* Configure the PLLI2S division factors */
;;;1512         /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
;;;1513         /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;1514         __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
;;;1515       }
;;;1516   
;;;1517   #if defined(STM32F413xx) || defined(STM32F423xx)
;;;1518       /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
;;;1519       if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
;;;1520          ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
;;;1521       {
;;;1522         /* Check for PLLI2S Parameters */
;;;1523         assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;1524         /* Check for PLLI2S/DIVR parameters */
;;;1525         assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));
;;;1526   
;;;1527         /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
;;;1528         plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
;;;1529         /* Configure the PLLI2S division factors */
;;;1530         /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
;;;1531         /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1532         /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;1533         __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
;;;1534   
;;;1535         /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
;;;1536         __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
;;;1537       }
;;;1538   #endif /* STM32F413xx || STM32F423xx */
;;;1539   
;;;1540       /*----------------- In Case of PLLI2S is just selected  ------------------*/
;;;1541       if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
;;;1542       {
;;;1543         /* Check for Parameters */
;;;1544         assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;1545         assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;1546   
;;;1547         /* Configure the PLLI2S division factors */
;;;1548         /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
;;;1549         /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
;;;1550         __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
;;;1551       }
;;;1552   
;;;1553       /* Enable the PLLI2S */
;;;1554       __HAL_RCC_PLLI2S_ENABLE();
;;;1555       /* Get tick */
;;;1556       tickstart = HAL_GetTick();
;;;1557       /* Wait till PLLI2S is ready */
;;;1558       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;1559       {
;;;1560         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;1561         {
;;;1562           /* return in case of Timeout detected */
;;;1563           return HAL_TIMEOUT;
;;;1564         }
;;;1565       }
;;;1566     }
;;;1567     /*--------------------------------------------------------------------------*/
;;;1568   
;;;1569     /*-------------------- DFSDM1 clock source configuration -------------------*/
;;;1570     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
;;;1571     {
;;;1572       /* Check the parameters */
;;;1573       assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
;;;1574   
;;;1575       /* Configure the DFSDM1 interface clock source */
;;;1576       __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
;;;1577     }
;;;1578     /*--------------------------------------------------------------------------*/
;;;1579   
;;;1580     /*-------------------- DFSDM1 Audio clock source configuration -------------*/
;;;1581     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
;;;1582     {
;;;1583       /* Check the parameters */
;;;1584       assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
;;;1585   
;;;1586       /* Configure the DFSDM1 Audio interface clock source */
;;;1587       __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
;;;1588     }
;;;1589     /*--------------------------------------------------------------------------*/
;;;1590   
;;;1591   #if defined(STM32F413xx) || defined(STM32F423xx)
;;;1592     /*-------------------- DFSDM2 clock source configuration -------------------*/
;;;1593     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
;;;1594     {
;;;1595       /* Check the parameters */
;;;1596       assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));
;;;1597   
;;;1598       /* Configure the DFSDM1 interface clock source */
;;;1599       __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
;;;1600     }
;;;1601     /*--------------------------------------------------------------------------*/
;;;1602   
;;;1603     /*-------------------- DFSDM2 Audio clock source configuration -------------*/
;;;1604     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
;;;1605     {
;;;1606       /* Check the parameters */
;;;1607       assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));
;;;1608   
;;;1609       /* Configure the DFSDM1 Audio interface clock source */
;;;1610       __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
;;;1611     }
;;;1612     /*--------------------------------------------------------------------------*/
;;;1613   
;;;1614     /*---------------------------- LPTIM1 Configuration ------------------------*/
;;;1615     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
;;;1616     {
;;;1617       /* Check the parameters */
;;;1618       assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
;;;1619   
;;;1620       /* Configure the LPTIM1 clock source */
;;;1621       __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
;;;1622     }
;;;1623     /*--------------------------------------------------------------------------*/
;;;1624   #endif /* STM32F413xx || STM32F423xx */
;;;1625   
;;;1626     return HAL_OK;
;;;1627   }
00011e  e8bd83f8          POP      {r3-r9,pc}
                  |L5.290|
000122  48bc              LDR      r0,|L5.1044|
000124  6800              LDR      r0,[r0,#0]            ;1389
000126  f4007080          AND      r0,r0,#0x100          ;1389
00012a  2800              CMP      r0,#0                 ;1389
00012c  d0f1              BEQ      |L5.274|
00012e  48b8              LDR      r0,|L5.1040|
000130  381c              SUBS     r0,r0,#0x1c           ;1397
000132  6800              LDR      r0,[r0,#0]            ;1397
000134  f4007640          AND      r6,r0,#0x300          ;1397
000138  b34e              CBZ      r6,|L5.398|
00013a  8ca0              LDRH     r0,[r4,#0x24]         ;1398
00013c  f4007040          AND      r0,r0,#0x300          ;1398
000140  42b0              CMP      r0,r6                 ;1398
000142  d024              BEQ      |L5.398|
000144  48b2              LDR      r0,|L5.1040|
000146  381c              SUBS     r0,r0,#0x1c           ;1401
000148  6800              LDR      r0,[r0,#0]            ;1401
00014a  f4207640          BIC      r6,r0,#0x300          ;1401
00014e  2001              MOVS     r0,#1                 ;1403
000150  49b1              LDR      r1,|L5.1048|
000152  6008              STR      r0,[r1,#0]            ;1403
000154  2000              MOVS     r0,#0                 ;1404
000156  6008              STR      r0,[r1,#0]            ;1404
000158  48ad              LDR      r0,|L5.1040|
00015a  381c              SUBS     r0,r0,#0x1c           ;1406
00015c  6006              STR      r6,[r0,#0]            ;1406
00015e  6800              LDR      r0,[r0,#0]            ;1409
000160  f0000001          AND      r0,r0,#1              ;1409
000164  b198              CBZ      r0,|L5.398|
000166  f7fffffe          BL       HAL_GetTick
00016a  4605              MOV      r5,r0                 ;1412
00016c  e008              B        |L5.384|
                  |L5.366|
00016e  f7fffffe          BL       HAL_GetTick
000172  1b40              SUBS     r0,r0,r5              ;1417
000174  f2413188          MOV      r1,#0x1388            ;1417
000178  4288              CMP      r0,r1                 ;1417
00017a  d901              BLS      |L5.384|
00017c  2003              MOVS     r0,#3                 ;1419
00017e  e7ce              B        |L5.286|
                  |L5.384|
000180  48a3              LDR      r0,|L5.1040|
000182  381c              SUBS     r0,r0,#0x1c           ;1415
000184  6800              LDR      r0,[r0,#0]            ;1415
000186  f3c00040          UBFX     r0,r0,#1,#1           ;1415
00018a  2800              CMP      r0,#0                 ;1415
00018c  d0ef              BEQ      |L5.366|
                  |L5.398|
00018e  bf00              NOP                            ;1424
000190  8ca0              LDRH     r0,[r4,#0x24]         ;1424
000192  f4007040          AND      r0,r0,#0x300          ;1424
000196  f5b07f40          CMP      r0,#0x300             ;1424
00019a  d10c              BNE      |L5.438|
00019c  489c              LDR      r0,|L5.1040|
00019e  3884              SUBS     r0,r0,#0x84           ;1424
0001a0  6800              LDR      r0,[r0,#0]            ;1424
0001a2  f42010f8          BIC      r0,r0,#0x1f0000       ;1424
0001a6  4a9d              LDR      r2,|L5.1052|
0001a8  6a61              LDR      r1,[r4,#0x24]         ;1424
0001aa  4011              ANDS     r1,r1,r2              ;1424
0001ac  4308              ORRS     r0,r0,r1              ;1424
0001ae  4998              LDR      r1,|L5.1040|
0001b0  3984              SUBS     r1,r1,#0x84           ;1424
0001b2  6008              STR      r0,[r1,#0]            ;1424
0001b4  e007              B        |L5.454|
                  |L5.438|
0001b6  4896              LDR      r0,|L5.1040|
0001b8  3884              SUBS     r0,r0,#0x84           ;1424
0001ba  6800              LDR      r0,[r0,#0]            ;1424
0001bc  f42010f8          BIC      r0,r0,#0x1f0000       ;1424
0001c0  4993              LDR      r1,|L5.1040|
0001c2  3984              SUBS     r1,r1,#0x84           ;1424
0001c4  6008              STR      r0,[r1,#0]            ;1424
                  |L5.454|
0001c6  4892              LDR      r0,|L5.1040|
0001c8  381c              SUBS     r0,r0,#0x1c           ;1424
0001ca  6800              LDR      r0,[r0,#0]            ;1424
0001cc  8ca1              LDRH     r1,[r4,#0x24]         ;1424
0001ce  f3c1010b          UBFX     r1,r1,#0,#12          ;1424
0001d2  4308              ORRS     r0,r0,r1              ;1424
0001d4  498e              LDR      r1,|L5.1040|
0001d6  e000              B        |L5.474|
                  |L5.472|
0001d8  e002              B        |L5.480|
                  |L5.474|
0001da  391c              SUBS     r1,r1,#0x1c           ;1424
0001dc  6008              STR      r0,[r1,#0]            ;1424
0001de  bf00              NOP                            ;1424
                  |L5.480|
0001e0  7820              LDRB     r0,[r4,#0]            ;1429
0001e2  f0000004          AND      r0,r0,#4              ;1429
0001e6  2804              CMP      r0,#4                 ;1429
0001e8  d103              BNE      |L5.498|
0001ea  f8940054          LDRB     r0,[r4,#0x54]         ;1432
0001ee  498c              LDR      r1,|L5.1056|
0001f0  6008              STR      r0,[r1,#0]            ;1432
                  |L5.498|
0001f2  7820              LDRB     r0,[r4,#0]            ;1437
0001f4  f0000010          AND      r0,r0,#0x10           ;1437
0001f8  2810              CMP      r0,#0x10              ;1437
0001fa  d109              BNE      |L5.528|
0001fc  4884              LDR      r0,|L5.1040|
0001fe  3008              ADDS     r0,r0,#8              ;1443
000200  6800              LDR      r0,[r0,#0]            ;1443
000202  f4200040          BIC      r0,r0,#0xc00000       ;1443
000206  6ae1              LDR      r1,[r4,#0x2c]         ;1443
000208  4308              ORRS     r0,r0,r1              ;1443
00020a  4981              LDR      r1,|L5.1040|
00020c  3108              ADDS     r1,r1,#8              ;1443
00020e  6008              STR      r0,[r1,#0]            ;1443
                  |L5.528|
000210  7820              LDRB     r0,[r4,#0]            ;1448
000212  f0000020          AND      r0,r0,#0x20           ;1448
000216  2820              CMP      r0,#0x20              ;1448
000218  d10f              BNE      |L5.570|
00021a  487d              LDR      r0,|L5.1040|
00021c  3008              ADDS     r0,r0,#8              ;1454
00021e  6800              LDR      r0,[r0,#0]            ;1454
000220  f0206000          BIC      r0,r0,#0x8000000      ;1454
000224  6b21              LDR      r1,[r4,#0x30]         ;1454
000226  4308              ORRS     r0,r0,r1              ;1454
000228  4979              LDR      r1,|L5.1040|
00022a  3108              ADDS     r1,r1,#8              ;1454
00022c  6008              STR      r0,[r1,#0]            ;1454
00022e  6b20              LDR      r0,[r4,#0x30]         ;1457
000230  f1b06f00          CMP      r0,#0x8000000         ;1457
000234  d101              BNE      |L5.570|
000236  f04f0801          MOV      r8,#1                 ;1459
                  |L5.570|
00023a  7820              LDRB     r0,[r4,#0]            ;1465
00023c  f0000040          AND      r0,r0,#0x40           ;1465
000240  2840              CMP      r0,#0x40              ;1465
000242  d109              BNE      |L5.600|
000244  4872              LDR      r0,|L5.1040|
000246  3008              ADDS     r0,r0,#8              ;1471
000248  6800              LDR      r0,[r0,#0]            ;1471
00024a  f0205080          BIC      r0,r0,#0x10000000     ;1471
00024e  6aa1              LDR      r1,[r4,#0x28]         ;1471
000250  4308              ORRS     r0,r0,r1              ;1471
000252  496f              LDR      r1,|L5.1040|
000254  3108              ADDS     r1,r1,#8              ;1471
000256  6008              STR      r0,[r1,#0]            ;1471
                  |L5.600|
000258  f1b80f01          CMP      r8,#1                 ;1478
00025c  d002              BEQ      |L5.612|
00025e  6820              LDR      r0,[r4,#0]            ;1478
000260  2880              CMP      r0,#0x80              ;1478
000262  d17d              BNE      |L5.864|
                  |L5.612|
000264  2000              MOVS     r0,#0                 ;1481
000266  496f              LDR      r1,|L5.1060|
000268  6688              STR      r0,[r1,#0x68]         ;1481
00026a  f7fffffe          BL       HAL_GetTick
00026e  4605              MOV      r5,r0                 ;1483
000270  e006              B        |L5.640|
                  |L5.626|
000272  f7fffffe          BL       HAL_GetTick
000276  1b40              SUBS     r0,r0,r5              ;1487
000278  2802              CMP      r0,#2                 ;1487
00027a  d901              BLS      |L5.640|
00027c  2003              MOVS     r0,#3                 ;1490
00027e  e74e              B        |L5.286|
                  |L5.640|
000280  4863              LDR      r0,|L5.1040|
000282  388c              SUBS     r0,r0,#0x8c           ;1485
000284  6800              LDR      r0,[r0,#0]            ;1485
000286  f3c060c0          UBFX     r0,r0,#27,#1          ;1485
00028a  2800              CMP      r0,#0                 ;1485
00028c  d1f1              BNE      |L5.626|
00028e  4966              LDR      r1,|L5.1064|
000290  6d20              LDR      r0,[r4,#0x50]         ;1499
000292  6008              STR      r0,[r1,#0]            ;1499
000294  7820              LDRB     r0,[r4,#0]            ;1502
000296  f0000001          AND      r0,r0,#1              ;1502
00029a  b108              CBZ      r0,|L5.672|
00029c  69e0              LDR      r0,[r4,#0x1c]         ;1502
00029e  b1d0              CBZ      r0,|L5.726|
                  |L5.672|
0002a0  7820              LDRB     r0,[r4,#0]            ;1503
0002a2  f0000002          AND      r0,r0,#2              ;1503
0002a6  2802              CMP      r0,#2                 ;1503
0002a8  d101              BNE      |L5.686|
0002aa  6a20              LDR      r0,[r4,#0x20]         ;1503
0002ac  b198              CBZ      r0,|L5.726|
                  |L5.686|
0002ae  7820              LDRB     r0,[r4,#0]            ;1504
0002b0  f0000020          AND      r0,r0,#0x20           ;1504
0002b4  2820              CMP      r0,#0x20              ;1504
0002b6  d103              BNE      |L5.704|
0002b8  6b20              LDR      r0,[r4,#0x30]         ;1504
0002ba  f1b06f00          CMP      r0,#0x8000000         ;1504
0002be  d00a              BEQ      |L5.726|
                  |L5.704|
0002c0  7820              LDRB     r0,[r4,#0]            ;1505
0002c2  f0000040          AND      r0,r0,#0x40           ;1505
0002c6  2840              CMP      r0,#0x40              ;1505
0002c8  d112              BNE      |L5.752|
0002ca  6aa0              LDR      r0,[r4,#0x28]         ;1505
0002cc  b980              CBNZ     r0,|L5.752|
0002ce  6b20              LDR      r0,[r4,#0x30]         ;1505
0002d0  f1b06f00          CMP      r0,#0x8000000         ;1505
0002d4  d10c              BNE      |L5.752|
                  |L5.726|
0002d6  e9d41001          LDRD     r1,r0,[r4,#4]         ;1514
0002da  ea411180          ORR      r1,r1,r0,LSL #6       ;1514
0002de  7b20              LDRB     r0,[r4,#0xc]          ;1514
0002e0  ea416100          ORR      r1,r1,r0,LSL #24      ;1514
0002e4  7c20              LDRB     r0,[r4,#0x10]         ;1514
0002e6  ea417000          ORR      r0,r1,r0,LSL #28      ;1514
0002ea  4949              LDR      r1,|L5.1040|
0002ec  3908              SUBS     r1,r1,#8              ;1514
0002ee  6008              STR      r0,[r1,#0]            ;1514
                  |L5.752|
0002f0  8820              LDRH     r0,[r4,#0]            ;1519
0002f2  f4005000          AND      r0,r0,#0x2000         ;1519
0002f6  f5b05f00          CMP      r0,#0x2000            ;1519
0002fa  d101              BNE      |L5.768|
0002fc  6ca0              LDR      r0,[r4,#0x48]         ;1519
0002fe  b138              CBZ      r0,|L5.784|
                  |L5.768|
000300  8820              LDRH     r0,[r4,#0]            ;1520
000302  f4004080          AND      r0,r0,#0x4000         ;1520
000306  f5b04f80          CMP      r0,#0x4000            ;1520
00030a  d11b              BNE      |L5.836|
00030c  6ce0              LDR      r0,[r4,#0x4c]         ;1520
00030e  b9c8              CBNZ     r0,|L5.836|
                  |L5.784|
000310  483f              LDR      r0,|L5.1040|
000312  3808              SUBS     r0,r0,#8              ;1528
000314  6800              LDR      r0,[r0,#0]            ;1528
000316  f3c06703          UBFX     r7,r0,#24,#4          ;1528
00031a  e9d41001          LDRD     r1,r0,[r4,#4]         ;1533
00031e  ea411080          ORR      r0,r1,r0,LSL #6       ;1533
000322  ea406107          ORR      r1,r0,r7,LSL #24      ;1533
000326  7c20              LDRB     r0,[r4,#0x10]         ;1533
000328  ea417000          ORR      r0,r1,r0,LSL #28      ;1533
00032c  4938              LDR      r1,|L5.1040|
00032e  3908              SUBS     r1,r1,#8              ;1533
000330  6008              STR      r0,[r1,#0]            ;1533
000332  4837              LDR      r0,|L5.1040|
000334  6800              LDR      r0,[r0,#0]            ;1536
000336  f020001f          BIC      r0,r0,#0x1f           ;1536
00033a  69a1              LDR      r1,[r4,#0x18]         ;1536
00033c  1e49              SUBS     r1,r1,#1              ;1536
00033e  4308              ORRS     r0,r0,r1              ;1536
000340  4933              LDR      r1,|L5.1040|
000342  6008              STR      r0,[r1,#0]            ;1536
                  |L5.836|
000344  7820              LDRB     r0,[r4,#0]            ;1541
000346  f0000080          AND      r0,r0,#0x80           ;1541
00034a  2880              CMP      r0,#0x80              ;1541
00034c  d10e              BNE      |L5.876|
00034e  e9d41001          LDRD     r1,r0,[r4,#4]         ;1550
000352  ea411180          ORR      r1,r1,r0,LSL #6       ;1550
000356  7b20              LDRB     r0,[r4,#0xc]          ;1550
000358  ea416100          ORR      r1,r1,r0,LSL #24      ;1550
00035c  7c20              LDRB     r0,[r4,#0x10]         ;1550
00035e  e000              B        |L5.866|
                  |L5.864|
000360  e019              B        |L5.918|
                  |L5.866|
000362  ea417000          ORR      r0,r1,r0,LSL #28      ;1550
000366  492a              LDR      r1,|L5.1040|
000368  3908              SUBS     r1,r1,#8              ;1550
00036a  6008              STR      r0,[r1,#0]            ;1550
                  |L5.876|
00036c  2001              MOVS     r0,#1                 ;1554
00036e  492d              LDR      r1,|L5.1060|
000370  6688              STR      r0,[r1,#0x68]         ;1554
000372  f7fffffe          BL       HAL_GetTick
000376  4605              MOV      r5,r0                 ;1556
000378  e006              B        |L5.904|
                  |L5.890|
00037a  f7fffffe          BL       HAL_GetTick
00037e  1b40              SUBS     r0,r0,r5              ;1560
000380  2802              CMP      r0,#2                 ;1560
000382  d901              BLS      |L5.904|
000384  2003              MOVS     r0,#3                 ;1563
000386  e6ca              B        |L5.286|
                  |L5.904|
000388  4821              LDR      r0,|L5.1040|
00038a  388c              SUBS     r0,r0,#0x8c           ;1558
00038c  6800              LDR      r0,[r0,#0]            ;1558
00038e  f3c060c0          UBFX     r0,r0,#27,#1          ;1558
000392  2800              CMP      r0,#0                 ;1558
000394  d0f1              BEQ      |L5.890|
                  |L5.918|
000396  8820              LDRH     r0,[r4,#0]            ;1570
000398  f4007080          AND      r0,r0,#0x100          ;1570
00039c  f5b07f80          CMP      r0,#0x100             ;1570
0003a0  d107              BNE      |L5.946|
0003a2  481b              LDR      r0,|L5.1040|
0003a4  6800              LDR      r0,[r0,#0]            ;1576
0003a6  f0204000          BIC      r0,r0,#0x80000000     ;1576
0003aa  6b61              LDR      r1,[r4,#0x34]         ;1576
0003ac  4308              ORRS     r0,r0,r1              ;1576
0003ae  4918              LDR      r1,|L5.1040|
0003b0  6008              STR      r0,[r1,#0]            ;1576
                  |L5.946|
0003b2  8820              LDRH     r0,[r4,#0]            ;1581
0003b4  f4007000          AND      r0,r0,#0x200          ;1581
0003b8  f5b07f00          CMP      r0,#0x200             ;1581
0003bc  d107              BNE      |L5.974|
0003be  4814              LDR      r0,|L5.1040|
0003c0  6800              LDR      r0,[r0,#0]            ;1587
0003c2  f4204000          BIC      r0,r0,#0x8000         ;1587
0003c6  6ba1              LDR      r1,[r4,#0x38]         ;1587
0003c8  4308              ORRS     r0,r0,r1              ;1587
0003ca  4911              LDR      r1,|L5.1040|
0003cc  6008              STR      r0,[r1,#0]            ;1587
                  |L5.974|
0003ce  8820              LDRH     r0,[r4,#0]            ;1593
0003d0  f4006080          AND      r0,r0,#0x400          ;1593
0003d4  f5b06f80          CMP      r0,#0x400             ;1593
0003d8  d107              BNE      |L5.1002|
0003da  480d              LDR      r0,|L5.1040|
0003dc  6800              LDR      r0,[r0,#0]            ;1599
0003de  f0204000          BIC      r0,r0,#0x80000000     ;1599
0003e2  6be1              LDR      r1,[r4,#0x3c]         ;1599
0003e4  4308              ORRS     r0,r0,r1              ;1599
0003e6  490a              LDR      r1,|L5.1040|
0003e8  6008              STR      r0,[r1,#0]            ;1599
                  |L5.1002|
0003ea  8820              LDRH     r0,[r4,#0]            ;1604
0003ec  f4006000          AND      r0,r0,#0x800          ;1604
0003f0  f5b06f00          CMP      r0,#0x800             ;1604
0003f4  d107              BNE      |L5.1030|
0003f6  4806              LDR      r0,|L5.1040|
0003f8  6800              LDR      r0,[r0,#0]            ;1610
0003fa  f4204080          BIC      r0,r0,#0x4000         ;1610
0003fe  6c21              LDR      r1,[r4,#0x40]         ;1610
000400  4308              ORRS     r0,r0,r1              ;1610
000402  4903              LDR      r1,|L5.1040|
000404  6008              STR      r0,[r1,#0]            ;1610
                  |L5.1030|
000406  8820              LDRH     r0,[r4,#0]            ;1615
000408  f4005080          AND      r0,r0,#0x1000         ;1615
00040c  e00e              B        |L5.1068|
00040e  0000              DCW      0x0000
                  |L5.1040|
                          DCD      0x4002388c
                  |L5.1044|
                          DCD      0x40007000
                  |L5.1048|
                          DCD      0x42470e40
                  |L5.1052|
                          DCD      0x0ffffcff
                  |L5.1056|
                          DCD      0x424711e0
                  |L5.1060|
                          DCD      0x42470000
                  |L5.1064|
                          DCD      0x424710d8
                  |L5.1068|
00042c  f5b05f80          CMP      r0,#0x1000            ;1615
000430  d107              BNE      |L5.1090|
000432  4805              LDR      r0,|L5.1096|
000434  6800              LDR      r0,[r0,#0]            ;1621
000436  f0204040          BIC      r0,r0,#0xc0000000     ;1621
00043a  6c61              LDR      r1,[r4,#0x44]         ;1621
00043c  4308              ORRS     r0,r0,r1              ;1621
00043e  4902              LDR      r1,|L5.1096|
000440  6008              STR      r0,[r1,#0]            ;1621
                  |L5.1090|
000442  2000              MOVS     r0,#0                 ;1626
000444  e66b              B        |L5.286|
;;;1628   
                          ENDP

000446  0000              DCW      0x0000
                  |L5.1096|
                          DCD      0x40023894

                          AREA ||i.HAL_RCCEx_SelectLSEMode||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_SelectLSEMode PROC
;;;2767     */
;;;2768   void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
000000  2801              CMP      r0,#1
;;;2769   {
;;;2770     /* Check the parameters */
;;;2771     assert_param(IS_RCC_LSE_MODE(Mode));
;;;2772     if(Mode == RCC_LSE_HIGHDRIVE_MODE)
000002  d106              BNE      |L6.18|
;;;2773     {
;;;2774       SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
000004  4906              LDR      r1,|L6.32|
000006  6809              LDR      r1,[r1,#0]
000008  f0410108          ORR      r1,r1,#8
00000c  4a04              LDR      r2,|L6.32|
00000e  6011              STR      r1,[r2,#0]
000010  e005              B        |L6.30|
                  |L6.18|
;;;2775     }
;;;2776     else
;;;2777     {
;;;2778       CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
000012  4903              LDR      r1,|L6.32|
000014  6809              LDR      r1,[r1,#0]
000016  f0210108          BIC      r1,r1,#8
00001a  4a01              LDR      r2,|L6.32|
00001c  6011              STR      r1,[r2,#0]
                  |L6.30|
;;;2779     }
;;;2780   }
00001e  4770              BX       lr
;;;2781   
                          ENDP

                  |L6.32|
                          DCD      0x40023870

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;3144     */
;;;3145   HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;3146   {
;;;3147     uint32_t tickstart;
;;;3148   
;;;3149     /* Get Start Tick */
;;;3150     tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;3151   
;;;3152     /* Set HSION bit to the reset value */
;;;3153     SET_BIT(RCC->CR, RCC_CR_HSION);
000008  4856              LDR      r0,|L7.356|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  4954              LDR      r1,|L7.356|
000012  6008              STR      r0,[r1,#0]
;;;3154   
;;;3155     /* Wait till HSI is ready */
;;;3156     while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L7.36|
                  |L7.22|
;;;3157     {
;;;3158       if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L7.36|
;;;3159       {
;;;3160         return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L7.34|
;;;3161       }
;;;3162     }
;;;3163   
;;;3164     /* Set HSITRIM[4:0] bits to the reset value */
;;;3165     SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
;;;3166   
;;;3167     /* Get Start Tick */
;;;3168     tickstart = HAL_GetTick();
;;;3169   
;;;3170     /* Reset CFGR register */
;;;3171     CLEAR_REG(RCC->CFGR);
;;;3172   
;;;3173     /* Wait till clock switch is ready */
;;;3174     while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;3175     {
;;;3176       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;3177       {
;;;3178         return HAL_TIMEOUT;
;;;3179       }
;;;3180     }
;;;3181   
;;;3182     /* Get Start Tick */
;;;3183     tickstart = HAL_GetTick();
;;;3184   
;;;3185     /* Clear HSEON, HSEBYP and CSSON bits */
;;;3186     CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
;;;3187   
;;;3188     /* Wait till HSE is disabled */
;;;3189     while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;3190     {
;;;3191       if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;3192       {
;;;3193         return HAL_TIMEOUT;
;;;3194       }
;;;3195     }
;;;3196   
;;;3197     /* Get Start Tick */
;;;3198     tickstart = HAL_GetTick();
;;;3199   
;;;3200     /* Clear PLLON bit */
;;;3201     CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;3202   
;;;3203     /* Wait till PLL is disabled */
;;;3204     while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;3205     {
;;;3206       if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;3207       {
;;;3208         return HAL_TIMEOUT;
;;;3209       }
;;;3210     }
;;;3211   
;;;3212   #if defined(RCC_PLLI2S_SUPPORT)
;;;3213     /* Get Start Tick */
;;;3214     tickstart = HAL_GetTick();
;;;3215   
;;;3216     /* Reset PLLI2SON bit */
;;;3217     CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
;;;3218   
;;;3219     /* Wait till PLLI2S is disabled */
;;;3220     while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
;;;3221     {
;;;3222       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;3223       {
;;;3224         return HAL_TIMEOUT;
;;;3225       }
;;;3226     }
;;;3227   #endif /* RCC_PLLI2S_SUPPORT */
;;;3228   
;;;3229   #if defined(RCC_PLLSAI_SUPPORT)
;;;3230     /* Get Start Tick */
;;;3231     tickstart = HAL_GetTick();
;;;3232   
;;;3233     /* Reset PLLSAI bit */
;;;3234     CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
;;;3235   
;;;3236     /* Wait till PLLSAI is disabled */
;;;3237     while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
;;;3238     {
;;;3239       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;3240       {
;;;3241         return HAL_TIMEOUT;
;;;3242       }
;;;3243     }
;;;3244   #endif /* RCC_PLLSAI_SUPPORT */
;;;3245   
;;;3246     /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
;;;3247   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3248       defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3249     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
;;;3250   #elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
;;;3251     RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
;;;3252   #else
;;;3253     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
;;;3254   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */
;;;3255   
;;;3256     /* Reset PLLI2SCFGR register to default value */
;;;3257   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3258       defined(STM32F423xx) || defined(STM32F446xx)
;;;3259     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3260   #elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
;;;3261     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3262   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3263     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3264   #elif defined(STM32F411xE)
;;;3265     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3266   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */
;;;3267   
;;;3268     /* Reset PLLSAICFGR register */
;;;3269   #if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3270     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
;;;3271   #elif defined(STM32F446xx)
;;;3272     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
;;;3273   #endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */
;;;3274   
;;;3275     /* Disable all interrupts */
;;;3276     CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
;;;3277   
;;;3278   #if defined(RCC_CIR_PLLI2SRDYIE)
;;;3279     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
;;;3280   #endif /* RCC_CIR_PLLI2SRDYIE */
;;;3281   
;;;3282   #if defined(RCC_CIR_PLLSAIRDYIE)
;;;3283     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
;;;3284   #endif /* RCC_CIR_PLLSAIRDYIE */
;;;3285   
;;;3286     /* Clear all interrupt flags */
;;;3287     SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
;;;3288   
;;;3289   #if defined(RCC_CIR_PLLI2SRDYC)
;;;3290     SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
;;;3291   #endif /* RCC_CIR_PLLI2SRDYC */
;;;3292   
;;;3293   #if defined(RCC_CIR_PLLSAIRDYC)
;;;3294     SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
;;;3295   #endif /* RCC_CIR_PLLSAIRDYC */
;;;3296   
;;;3297     /* Clear LSION bit */
;;;3298     CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
;;;3299   
;;;3300     /* Reset all CSR flags */
;;;3301     SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;3302   
;;;3303     /* Update the SystemCoreClock global variable */
;;;3304     SystemCoreClock = HSI_VALUE;
;;;3305   
;;;3306     /* Adapt Systick interrupt period */
;;;3307     if(HAL_InitTick(uwTickPrio) != HAL_OK)
;;;3308     {
;;;3309       return HAL_ERROR;
;;;3310     }
;;;3311     else
;;;3312     {
;;;3313       return HAL_OK;
;;;3314     }
;;;3315   }
000022  bd10              POP      {r4,pc}
                  |L7.36|
000024  484f              LDR      r0,|L7.356|
000026  6800              LDR      r0,[r0,#0]            ;3156
000028  f0000002          AND      r0,r0,#2              ;3156
00002c  2800              CMP      r0,#0                 ;3156
00002e  d0f2              BEQ      |L7.22|
000030  484c              LDR      r0,|L7.356|
000032  6800              LDR      r0,[r0,#0]            ;3165
000034  f0400080          ORR      r0,r0,#0x80           ;3165
000038  494a              LDR      r1,|L7.356|
00003a  6008              STR      r0,[r1,#0]            ;3165
00003c  f7fffffe          BL       HAL_GetTick
000040  4604              MOV      r4,r0                 ;3168
000042  2000              MOVS     r0,#0                 ;3171
000044  4947              LDR      r1,|L7.356|
000046  3108              ADDS     r1,r1,#8              ;3171
000048  6008              STR      r0,[r1,#0]            ;3171
00004a  e008              B        |L7.94|
                  |L7.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  1b00              SUBS     r0,r0,r4              ;3176
000052  f2413188          MOV      r1,#0x1388            ;3176
000056  4288              CMP      r0,r1                 ;3176
000058  d901              BLS      |L7.94|
00005a  2003              MOVS     r0,#3                 ;3178
00005c  e7e1              B        |L7.34|
                  |L7.94|
00005e  4841              LDR      r0,|L7.356|
000060  3008              ADDS     r0,r0,#8              ;3174
000062  6800              LDR      r0,[r0,#0]            ;3174
000064  f000000c          AND      r0,r0,#0xc            ;3174
000068  2800              CMP      r0,#0                 ;3174
00006a  d1ef              BNE      |L7.76|
00006c  f7fffffe          BL       HAL_GetTick
000070  4604              MOV      r4,r0                 ;3183
000072  483c              LDR      r0,|L7.356|
000074  6800              LDR      r0,[r0,#0]            ;3186
000076  f4202050          BIC      r0,r0,#0xd0000        ;3186
00007a  493a              LDR      r1,|L7.356|
00007c  6008              STR      r0,[r1,#0]            ;3186
00007e  e006              B        |L7.142|
                  |L7.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1b00              SUBS     r0,r0,r4              ;3191
000086  2864              CMP      r0,#0x64              ;3191
000088  d901              BLS      |L7.142|
00008a  2003              MOVS     r0,#3                 ;3193
00008c  e7c9              B        |L7.34|
                  |L7.142|
00008e  4835              LDR      r0,|L7.356|
000090  6800              LDR      r0,[r0,#0]            ;3189
000092  f4003000          AND      r0,r0,#0x20000        ;3189
000096  2800              CMP      r0,#0                 ;3189
000098  d1f2              BNE      |L7.128|
00009a  f7fffffe          BL       HAL_GetTick
00009e  4604              MOV      r4,r0                 ;3198
0000a0  4830              LDR      r0,|L7.356|
0000a2  6800              LDR      r0,[r0,#0]            ;3201
0000a4  f0207080          BIC      r0,r0,#0x1000000      ;3201
0000a8  492e              LDR      r1,|L7.356|
0000aa  6008              STR      r0,[r1,#0]            ;3201
0000ac  e006              B        |L7.188|
                  |L7.174|
0000ae  f7fffffe          BL       HAL_GetTick
0000b2  1b00              SUBS     r0,r0,r4              ;3206
0000b4  2802              CMP      r0,#2                 ;3206
0000b6  d901              BLS      |L7.188|
0000b8  2003              MOVS     r0,#3                 ;3208
0000ba  e7b2              B        |L7.34|
                  |L7.188|
0000bc  4829              LDR      r0,|L7.356|
0000be  6800              LDR      r0,[r0,#0]            ;3204
0000c0  f0007000          AND      r0,r0,#0x2000000      ;3204
0000c4  2800              CMP      r0,#0                 ;3204
0000c6  d1f2              BNE      |L7.174|
0000c8  f7fffffe          BL       HAL_GetTick
0000cc  4604              MOV      r4,r0                 ;3214
0000ce  4825              LDR      r0,|L7.356|
0000d0  6800              LDR      r0,[r0,#0]            ;3217
0000d2  f0206080          BIC      r0,r0,#0x4000000      ;3217
0000d6  4923              LDR      r1,|L7.356|
0000d8  6008              STR      r0,[r1,#0]            ;3217
0000da  e006              B        |L7.234|
                  |L7.220|
0000dc  f7fffffe          BL       HAL_GetTick
0000e0  1b00              SUBS     r0,r0,r4              ;3222
0000e2  2802              CMP      r0,#2                 ;3222
0000e4  d901              BLS      |L7.234|
0000e6  2003              MOVS     r0,#3                 ;3224
0000e8  e79b              B        |L7.34|
                  |L7.234|
0000ea  481e              LDR      r0,|L7.356|
0000ec  6800              LDR      r0,[r0,#0]            ;3220
0000ee  f0006000          AND      r0,r0,#0x8000000      ;3220
0000f2  2800              CMP      r0,#0                 ;3220
0000f4  d1f2              BNE      |L7.220|
0000f6  481c              LDR      r0,|L7.360|
0000f8  491a              LDR      r1,|L7.356|
0000fa  1d09              ADDS     r1,r1,#4              ;3249
0000fc  6008              STR      r0,[r1,#0]            ;3249
0000fe  4919              LDR      r1,|L7.356|
000100  3184              ADDS     r1,r1,#0x84           ;3259
000102  6008              STR      r0,[r1,#0]            ;3259
000104  4817              LDR      r0,|L7.356|
000106  300c              ADDS     r0,r0,#0xc            ;3276
000108  6800              LDR      r0,[r0,#0]            ;3276
00010a  f42050f8          BIC      r0,r0,#0x1f00         ;3276
00010e  4915              LDR      r1,|L7.356|
000110  310c              ADDS     r1,r1,#0xc            ;3276
000112  6008              STR      r0,[r1,#0]            ;3276
000114  4608              MOV      r0,r1                 ;3279
000116  6800              LDR      r0,[r0,#0]            ;3279
000118  f4205000          BIC      r0,r0,#0x2000         ;3279
00011c  6008              STR      r0,[r1,#0]            ;3279
00011e  4608              MOV      r0,r1                 ;3287
000120  6800              LDR      r0,[r0,#0]            ;3287
000122  f440001f          ORR      r0,r0,#0x9f0000       ;3287
000126  6008              STR      r0,[r1,#0]            ;3287
000128  4608              MOV      r0,r1                 ;3290
00012a  6800              LDR      r0,[r0,#0]            ;3290
00012c  f4401000          ORR      r0,r0,#0x200000       ;3290
000130  6008              STR      r0,[r1,#0]            ;3290
000132  480c              LDR      r0,|L7.356|
000134  3074              ADDS     r0,r0,#0x74           ;3298
000136  6800              LDR      r0,[r0,#0]            ;3298
000138  f0200001          BIC      r0,r0,#1              ;3298
00013c  4909              LDR      r1,|L7.356|
00013e  3174              ADDS     r1,r1,#0x74           ;3298
000140  6008              STR      r0,[r1,#0]            ;3298
000142  4608              MOV      r0,r1                 ;3301
000144  6800              LDR      r0,[r0,#0]            ;3301
000146  f0407080          ORR      r0,r0,#0x1000000      ;3301
00014a  6008              STR      r0,[r1,#0]            ;3301
00014c  4807              LDR      r0,|L7.364|
00014e  4908              LDR      r1,|L7.368|
000150  6008              STR      r0,[r1,#0]            ;3304  ; SystemCoreClock
000152  4808              LDR      r0,|L7.372|
000154  6800              LDR      r0,[r0,#0]            ;3307  ; uwTickPrio
000156  f7fffffe          BL       HAL_InitTick
00015a  b108              CBZ      r0,|L7.352|
00015c  2001              MOVS     r0,#1                 ;3309
00015e  e760              B        |L7.34|
                  |L7.352|
000160  2000              MOVS     r0,#0                 ;3313
000162  e75e              B        |L7.34|
;;;3316   
                          ENDP

                  |L7.356|
                          DCD      0x40023800
                  |L7.360|
                          DCD      0x24003010
                  |L7.364|
                          DCD      0x00f42400
                  |L7.368|
                          DCD      SystemCoreClock
                  |L7.372|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;3671     */
;;;3672   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;3673   {
;;;3674     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;3675     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
000002  6001              STR      r1,[r0,#0]
;;;3676   
;;;3677     /* Get the HSE configuration -----------------------------------------------*/
;;;3678     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  493d              LDR      r1,|L8.252|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d103              BNE      |L8.26|
;;;3679     {
;;;3680       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f21a0          MOV      r1,#0x50000
000016  6041              STR      r1,[r0,#4]
000018  e00c              B        |L8.52|
                  |L8.26|
;;;3681     }
;;;3682     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  4938              LDR      r1,|L8.252|
00001c  6809              LDR      r1,[r1,#0]
00001e  f4013180          AND      r1,r1,#0x10000
000022  f5b13f80          CMP      r1,#0x10000
000026  d103              BNE      |L8.48|
;;;3683     {
;;;3684       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000028  f44f3180          MOV      r1,#0x10000
00002c  6041              STR      r1,[r0,#4]
00002e  e001              B        |L8.52|
                  |L8.48|
;;;3685     }
;;;3686     else
;;;3687     {
;;;3688       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000030  2100              MOVS     r1,#0
000032  6041              STR      r1,[r0,#4]
                  |L8.52|
;;;3689     }
;;;3690   
;;;3691     /* Get the HSI configuration -----------------------------------------------*/
;;;3692     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000034  4931              LDR      r1,|L8.252|
000036  6809              LDR      r1,[r1,#0]
000038  f0010101          AND      r1,r1,#1
00003c  b111              CBZ      r1,|L8.68|
;;;3693     {
;;;3694       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003e  2101              MOVS     r1,#1
000040  60c1              STR      r1,[r0,#0xc]
000042  e001              B        |L8.72|
                  |L8.68|
;;;3695     }
;;;3696     else
;;;3697     {
;;;3698       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000044  2100              MOVS     r1,#0
000046  60c1              STR      r1,[r0,#0xc]
                  |L8.72|
;;;3699     }
;;;3700   
;;;3701     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000048  492c              LDR      r1,|L8.252|
00004a  6809              LDR      r1,[r1,#0]
00004c  f3c101c4          UBFX     r1,r1,#3,#5
000050  6101              STR      r1,[r0,#0x10]
;;;3702   
;;;3703     /* Get the LSE configuration -----------------------------------------------*/
;;;3704     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000052  492a              LDR      r1,|L8.252|
000054  3170              ADDS     r1,r1,#0x70
000056  6809              LDR      r1,[r1,#0]
000058  f0010104          AND      r1,r1,#4
00005c  2904              CMP      r1,#4
00005e  d102              BNE      |L8.102|
;;;3705     {
;;;3706       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000060  2105              MOVS     r1,#5
000062  6081              STR      r1,[r0,#8]
000064  e00a              B        |L8.124|
                  |L8.102|
;;;3707     }
;;;3708     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000066  4925              LDR      r1,|L8.252|
000068  3170              ADDS     r1,r1,#0x70
00006a  6809              LDR      r1,[r1,#0]
00006c  f0010101          AND      r1,r1,#1
000070  b111              CBZ      r1,|L8.120|
;;;3709     {
;;;3710       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000072  2101              MOVS     r1,#1
000074  6081              STR      r1,[r0,#8]
000076  e001              B        |L8.124|
                  |L8.120|
;;;3711     }
;;;3712     else
;;;3713     {
;;;3714       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000078  2100              MOVS     r1,#0
00007a  6081              STR      r1,[r0,#8]
                  |L8.124|
;;;3715     }
;;;3716   
;;;3717     /* Get the LSI configuration -----------------------------------------------*/
;;;3718     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
00007c  491f              LDR      r1,|L8.252|
00007e  3174              ADDS     r1,r1,#0x74
000080  6809              LDR      r1,[r1,#0]
000082  f0010101          AND      r1,r1,#1
000086  b111              CBZ      r1,|L8.142|
;;;3719     {
;;;3720       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000088  2101              MOVS     r1,#1
00008a  6141              STR      r1,[r0,#0x14]
00008c  e001              B        |L8.146|
                  |L8.142|
;;;3721     }
;;;3722     else
;;;3723     {
;;;3724       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00008e  2100              MOVS     r1,#0
000090  6141              STR      r1,[r0,#0x14]
                  |L8.146|
;;;3725     }
;;;3726   
;;;3727     /* Get the PLL configuration -----------------------------------------------*/
;;;3728     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000092  491a              LDR      r1,|L8.252|
000094  6809              LDR      r1,[r1,#0]
000096  f0017180          AND      r1,r1,#0x1000000
00009a  f1b17f80          CMP      r1,#0x1000000
00009e  d102              BNE      |L8.166|
;;;3729     {
;;;3730       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000a0  2102              MOVS     r1,#2
0000a2  6181              STR      r1,[r0,#0x18]
0000a4  e001              B        |L8.170|
                  |L8.166|
;;;3731     }
;;;3732     else
;;;3733     {
;;;3734       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000a6  2101              MOVS     r1,#1
0000a8  6181              STR      r1,[r0,#0x18]
                  |L8.170|
;;;3735     }
;;;3736     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
0000aa  4914              LDR      r1,|L8.252|
0000ac  1d09              ADDS     r1,r1,#4
0000ae  6809              LDR      r1,[r1,#0]
0000b0  f4010280          AND      r2,r1,#0x400000
0000b4  61c2              STR      r2,[r0,#0x1c]
;;;3737     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
0000b6  4911              LDR      r1,|L8.252|
0000b8  1d09              ADDS     r1,r1,#4
0000ba  6809              LDR      r1,[r1,#0]
0000bc  f001023f          AND      r2,r1,#0x3f
0000c0  6202              STR      r2,[r0,#0x20]
;;;3738     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
0000c2  490e              LDR      r1,|L8.252|
0000c4  1d09              ADDS     r1,r1,#4
0000c6  6809              LDR      r1,[r1,#0]
0000c8  f3c11288          UBFX     r2,r1,#6,#9
0000cc  6242              STR      r2,[r0,#0x24]
;;;3739     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
0000ce  490b              LDR      r1,|L8.252|
0000d0  1d09              ADDS     r1,r1,#4
0000d2  6809              LDR      r1,[r1,#0]
0000d4  f4013140          AND      r1,r1,#0x30000
0000d8  f5013180          ADD      r1,r1,#0x10000
0000dc  0bca              LSRS     r2,r1,#15
0000de  6282              STR      r2,[r0,#0x28]
;;;3740     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
0000e0  4906              LDR      r1,|L8.252|
0000e2  1d09              ADDS     r1,r1,#4
0000e4  6809              LDR      r1,[r1,#0]
0000e6  f3c16203          UBFX     r2,r1,#24,#4
0000ea  62c2              STR      r2,[r0,#0x2c]
;;;3741     RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
0000ec  4903              LDR      r1,|L8.252|
0000ee  1d09              ADDS     r1,r1,#4
0000f0  6809              LDR      r1,[r1,#0]
0000f2  f3c17202          UBFX     r2,r1,#28,#3
0000f6  6302              STR      r2,[r0,#0x30]
;;;3742   }
0000f8  4770              BX       lr
;;;3743   #endif /* STM32F410xx || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */
                          ENDP

0000fa  0000              DCW      0x0000
                  |L8.252|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;3334     */
;;;3335   HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3336   {
000002  4604              MOV      r4,r0
;;;3337     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;3338   
;;;3339     /* Check the parameters */
;;;3340     assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;3341     /*------------------------------- HSE Configuration ------------------------*/
;;;3342     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000006  7820              LDRB     r0,[r4,#0]
000008  f0000001          AND      r0,r0,#1
00000c  2800              CMP      r0,#0
00000e  d074              BEQ      |L9.250|
;;;3343     {
;;;3344       /* Check the parameters */
;;;3345       assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;3346       /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
;;;3347   #if defined(STM32F446xx)
;;;3348       if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
;;;3349         ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
;;;3350         ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
;;;3351   #else
;;;3352       if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
000010  48f7              LDR      r0,|L9.1008|
000012  6800              LDR      r0,[r0,#0]
000014  f000000c          AND      r0,r0,#0xc
000018  2804              CMP      r0,#4
00001a  d00d              BEQ      |L9.56|
;;;3353         ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
00001c  48f4              LDR      r0,|L9.1008|
00001e  6800              LDR      r0,[r0,#0]
000020  f000000c          AND      r0,r0,#0xc
000024  2808              CMP      r0,#8
000026  d113              BNE      |L9.80|
000028  48f1              LDR      r0,|L9.1008|
00002a  1f00              SUBS     r0,r0,#4
00002c  6800              LDR      r0,[r0,#0]
00002e  f4000080          AND      r0,r0,#0x400000
000032  f5b00f80          CMP      r0,#0x400000
000036  d10b              BNE      |L9.80|
                  |L9.56|
;;;3354   #endif /* STM32F446xx */
;;;3355       {
;;;3356         if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000038  48ed              LDR      r0,|L9.1008|
00003a  3808              SUBS     r0,r0,#8
00003c  6800              LDR      r0,[r0,#0]
00003e  f3c04040          UBFX     r0,r0,#17,#1
000042  2800              CMP      r0,#0
000044  d059              BEQ      |L9.250|
000046  6860              LDR      r0,[r4,#4]
000048  2800              CMP      r0,#0
00004a  d156              BNE      |L9.250|
;;;3357         {
;;;3358           return HAL_ERROR;
00004c  2001              MOVS     r0,#1
                  |L9.78|
;;;3359         }
;;;3360       }
;;;3361       else
;;;3362       {
;;;3363         /* Set the new HSE configuration ---------------------------------------*/
;;;3364         __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;3365   
;;;3366         /* Check the HSE State */
;;;3367         if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
;;;3368         {
;;;3369           /* Get Start Tick*/
;;;3370           tickstart = HAL_GetTick();
;;;3371   
;;;3372           /* Wait till HSE is ready */
;;;3373           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;3374           {
;;;3375             if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;3376             {
;;;3377               return HAL_TIMEOUT;
;;;3378             }
;;;3379           }
;;;3380         }
;;;3381         else
;;;3382         {
;;;3383           /* Get Start Tick*/
;;;3384           tickstart = HAL_GetTick();
;;;3385   
;;;3386           /* Wait till HSE is bypassed or disabled */
;;;3387           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;3388           {
;;;3389             if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;3390             {
;;;3391               return HAL_TIMEOUT;
;;;3392             }
;;;3393           }
;;;3394         }
;;;3395       }
;;;3396     }
;;;3397     /*----------------------------- HSI Configuration --------------------------*/
;;;3398     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;3399     {
;;;3400       /* Check the parameters */
;;;3401       assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;3402       assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;3403   
;;;3404       /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;3405   #if defined(STM32F446xx)
;;;3406       if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
;;;3407         ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
;;;3408         ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;3409   #else
;;;3410       if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
;;;3411         ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;3412   #endif /* STM32F446xx */
;;;3413       {
;;;3414         /* When HSI is used as system clock it will not disabled */
;;;3415         if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;3416         {
;;;3417           return HAL_ERROR;
;;;3418         }
;;;3419         /* Otherwise, just the calibration is allowed */
;;;3420         else
;;;3421         {
;;;3422           /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;3423           __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;3424         }
;;;3425       }
;;;3426       else
;;;3427       {
;;;3428         /* Check the HSI State */
;;;3429         if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;3430         {
;;;3431           /* Enable the Internal High Speed oscillator (HSI). */
;;;3432           __HAL_RCC_HSI_ENABLE();
;;;3433   
;;;3434           /* Get Start Tick*/
;;;3435           tickstart = HAL_GetTick();
;;;3436   
;;;3437           /* Wait till HSI is ready */
;;;3438           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;3439           {
;;;3440             if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;3441             {
;;;3442               return HAL_TIMEOUT;
;;;3443             }
;;;3444           }
;;;3445   
;;;3446           /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;3447           __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;3448         }
;;;3449         else
;;;3450         {
;;;3451           /* Disable the Internal High Speed oscillator (HSI). */
;;;3452           __HAL_RCC_HSI_DISABLE();
;;;3453   
;;;3454           /* Get Start Tick*/
;;;3455           tickstart = HAL_GetTick();
;;;3456   
;;;3457           /* Wait till HSI is ready */
;;;3458           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;3459           {
;;;3460             if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;3461             {
;;;3462               return HAL_TIMEOUT;
;;;3463             }
;;;3464           }
;;;3465         }
;;;3466       }
;;;3467     }
;;;3468     /*------------------------------ LSI Configuration -------------------------*/
;;;3469     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;3470     {
;;;3471       /* Check the parameters */
;;;3472       assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;3473   
;;;3474       /* Check the LSI State */
;;;3475       if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;3476       {
;;;3477         /* Enable the Internal Low Speed oscillator (LSI). */
;;;3478         __HAL_RCC_LSI_ENABLE();
;;;3479   
;;;3480         /* Get Start Tick*/
;;;3481         tickstart = HAL_GetTick();
;;;3482   
;;;3483         /* Wait till LSI is ready */
;;;3484         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;3485         {
;;;3486           if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;3487           {
;;;3488             return HAL_TIMEOUT;
;;;3489           }
;;;3490         }
;;;3491       }
;;;3492       else
;;;3493       {
;;;3494         /* Disable the Internal Low Speed oscillator (LSI). */
;;;3495         __HAL_RCC_LSI_DISABLE();
;;;3496   
;;;3497         /* Get Start Tick*/
;;;3498         tickstart = HAL_GetTick();
;;;3499   
;;;3500         /* Wait till LSI is ready */
;;;3501         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;3502         {
;;;3503           if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;3504           {
;;;3505             return HAL_TIMEOUT;
;;;3506           }
;;;3507         }
;;;3508       }
;;;3509     }
;;;3510     /*------------------------------ LSE Configuration -------------------------*/
;;;3511     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;3512     {
;;;3513       FlagStatus       pwrclkchanged = RESET;
;;;3514   
;;;3515       /* Check the parameters */
;;;3516       assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;3517   
;;;3518       /* Update LSE configuration in Backup Domain control register    */
;;;3519       /* Requires to enable write access to Backup Domain of necessary */
;;;3520       if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;3521       {
;;;3522         __HAL_RCC_PWR_CLK_ENABLE();
;;;3523         pwrclkchanged = SET;
;;;3524       }
;;;3525   
;;;3526       if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;3527       {
;;;3528         /* Enable write access to Backup domain */
;;;3529         SET_BIT(PWR->CR, PWR_CR_DBP);
;;;3530   
;;;3531         /* Wait for Backup domain Write protection disable */
;;;3532         tickstart = HAL_GetTick();
;;;3533   
;;;3534         while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;3535         {
;;;3536           if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;3537           {
;;;3538             return HAL_TIMEOUT;
;;;3539           }
;;;3540         }
;;;3541       }
;;;3542   
;;;3543       /* Set the new LSE configuration -----------------------------------------*/
;;;3544       __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;3545       /* Check the LSE State */
;;;3546       if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;3547       {
;;;3548         /* Get Start Tick*/
;;;3549         tickstart = HAL_GetTick();
;;;3550   
;;;3551         /* Wait till LSE is ready */
;;;3552         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;3553         {
;;;3554           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;3555           {
;;;3556             return HAL_TIMEOUT;
;;;3557           }
;;;3558         }
;;;3559       }
;;;3560       else
;;;3561       {
;;;3562         /* Get Start Tick*/
;;;3563         tickstart = HAL_GetTick();
;;;3564   
;;;3565         /* Wait till LSE is ready */
;;;3566         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;3567         {
;;;3568           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;3569           {
;;;3570             return HAL_TIMEOUT;
;;;3571           }
;;;3572         }
;;;3573       }
;;;3574   
;;;3575       /* Restore clock configuration if changed */
;;;3576       if(pwrclkchanged == SET)
;;;3577       {
;;;3578         __HAL_RCC_PWR_CLK_DISABLE();
;;;3579       }
;;;3580     }
;;;3581     /*-------------------------------- PLL Configuration -----------------------*/
;;;3582     /* Check the parameters */
;;;3583     assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;3584     if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;3585     {
;;;3586       /* Check if the PLL is used as system clock or not */
;;;3587       if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
;;;3588       {
;;;3589         if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;3590         {
;;;3591           /* Check the parameters */
;;;3592           assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;3593           assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;3594           assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;3595           assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;3596           assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;3597           assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
;;;3598   
;;;3599           /* Disable the main PLL. */
;;;3600           __HAL_RCC_PLL_DISABLE();
;;;3601   
;;;3602           /* Get Start Tick*/
;;;3603           tickstart = HAL_GetTick();
;;;3604   
;;;3605           /* Wait till PLL is ready */
;;;3606           while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;3607           {
;;;3608             if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;3609             {
;;;3610               return HAL_TIMEOUT;
;;;3611             }
;;;3612           }
;;;3613   
;;;3614           /* Configure the main PLL clock source, multiplication and division factors. */
;;;3615           __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;3616                                RCC_OscInitStruct->PLL.PLLM,
;;;3617                                RCC_OscInitStruct->PLL.PLLN,
;;;3618                                RCC_OscInitStruct->PLL.PLLP,
;;;3619                                RCC_OscInitStruct->PLL.PLLQ,
;;;3620                                RCC_OscInitStruct->PLL.PLLR);
;;;3621   
;;;3622           /* Enable the main PLL. */
;;;3623           __HAL_RCC_PLL_ENABLE();
;;;3624   
;;;3625           /* Get Start Tick*/
;;;3626           tickstart = HAL_GetTick();
;;;3627   
;;;3628           /* Wait till PLL is ready */
;;;3629           while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;3630           {
;;;3631             if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;3632             {
;;;3633               return HAL_TIMEOUT;
;;;3634             }
;;;3635           }
;;;3636         }
;;;3637         else
;;;3638         {
;;;3639           /* Disable the main PLL. */
;;;3640           __HAL_RCC_PLL_DISABLE();
;;;3641   
;;;3642           /* Get Start Tick*/
;;;3643           tickstart = HAL_GetTick();
;;;3644   
;;;3645           /* Wait till PLL is ready */
;;;3646           while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;3647           {
;;;3648             if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;3649             {
;;;3650               return HAL_TIMEOUT;
;;;3651             }
;;;3652           }
;;;3653         }
;;;3654       }
;;;3655       else
;;;3656       {
;;;3657         return HAL_ERROR;
;;;3658       }
;;;3659     }
;;;3660     return HAL_OK;
;;;3661   }
00004e  bdf8              POP      {r3-r7,pc}
                  |L9.80|
000050  bf00              NOP                            ;3364
000052  6860              LDR      r0,[r4,#4]            ;3364
000054  f5b03f80          CMP      r0,#0x10000           ;3364
000058  d108              BNE      |L9.108|
00005a  48e5              LDR      r0,|L9.1008|
00005c  3808              SUBS     r0,r0,#8              ;3364
00005e  6800              LDR      r0,[r0,#0]            ;3364
000060  f4403080          ORR      r0,r0,#0x10000        ;3364
000064  49e2              LDR      r1,|L9.1008|
000066  3908              SUBS     r1,r1,#8              ;3364
000068  6008              STR      r0,[r1,#0]            ;3364
00006a  e01e              B        |L9.170|
                  |L9.108|
00006c  6860              LDR      r0,[r4,#4]            ;3364
00006e  f5b02fa0          CMP      r0,#0x50000           ;3364
000072  d10d              BNE      |L9.144|
000074  48de              LDR      r0,|L9.1008|
000076  3808              SUBS     r0,r0,#8              ;3364
000078  6800              LDR      r0,[r0,#0]            ;3364
00007a  f4402080          ORR      r0,r0,#0x40000        ;3364
00007e  49dc              LDR      r1,|L9.1008|
000080  3908              SUBS     r1,r1,#8              ;3364
000082  6008              STR      r0,[r1,#0]            ;3364
000084  4608              MOV      r0,r1                 ;3364
000086  6800              LDR      r0,[r0,#0]            ;3364
000088  f4403080          ORR      r0,r0,#0x10000        ;3364
00008c  6008              STR      r0,[r1,#0]            ;3364
00008e  e00c              B        |L9.170|
                  |L9.144|
000090  48d7              LDR      r0,|L9.1008|
000092  3808              SUBS     r0,r0,#8              ;3364
000094  6800              LDR      r0,[r0,#0]            ;3364
000096  f4203080          BIC      r0,r0,#0x10000        ;3364
00009a  49d5              LDR      r1,|L9.1008|
00009c  3908              SUBS     r1,r1,#8              ;3364
00009e  6008              STR      r0,[r1,#0]            ;3364
0000a0  4608              MOV      r0,r1                 ;3364
0000a2  6800              LDR      r0,[r0,#0]            ;3364
0000a4  f4202080          BIC      r0,r0,#0x40000        ;3364
0000a8  6008              STR      r0,[r1,#0]            ;3364
                  |L9.170|
0000aa  bf00              NOP                            ;3364
0000ac  6860              LDR      r0,[r4,#4]            ;3367
0000ae  b190              CBZ      r0,|L9.214|
0000b0  f7fffffe          BL       HAL_GetTick
0000b4  4605              MOV      r5,r0                 ;3370
0000b6  e006              B        |L9.198|
                  |L9.184|
0000b8  f7fffffe          BL       HAL_GetTick
0000bc  1b40              SUBS     r0,r0,r5              ;3375
0000be  2864              CMP      r0,#0x64              ;3375
0000c0  d901              BLS      |L9.198|
0000c2  2003              MOVS     r0,#3                 ;3377
0000c4  e7c3              B        |L9.78|
                  |L9.198|
0000c6  48ca              LDR      r0,|L9.1008|
0000c8  3808              SUBS     r0,r0,#8              ;3373
0000ca  6800              LDR      r0,[r0,#0]            ;3373
0000cc  f3c04040          UBFX     r0,r0,#17,#1          ;3373
0000d0  2800              CMP      r0,#0                 ;3373
0000d2  d0f1              BEQ      |L9.184|
0000d4  e011              B        |L9.250|
                  |L9.214|
0000d6  f7fffffe          BL       HAL_GetTick
0000da  4605              MOV      r5,r0                 ;3384
0000dc  e006              B        |L9.236|
                  |L9.222|
0000de  f7fffffe          BL       HAL_GetTick
0000e2  1b40              SUBS     r0,r0,r5              ;3389
0000e4  2864              CMP      r0,#0x64              ;3389
0000e6  d901              BLS      |L9.236|
0000e8  2003              MOVS     r0,#3                 ;3391
0000ea  e7b0              B        |L9.78|
                  |L9.236|
0000ec  48c0              LDR      r0,|L9.1008|
0000ee  3808              SUBS     r0,r0,#8              ;3387
0000f0  6800              LDR      r0,[r0,#0]            ;3387
0000f2  f3c04040          UBFX     r0,r0,#17,#1          ;3387
0000f6  2800              CMP      r0,#0                 ;3387
0000f8  d1f1              BNE      |L9.222|
                  |L9.250|
0000fa  7820              LDRB     r0,[r4,#0]            ;3398
0000fc  f0000002          AND      r0,r0,#2              ;3398
000100  2802              CMP      r0,#2                 ;3398
000102  d15f              BNE      |L9.452|
000104  48ba              LDR      r0,|L9.1008|
000106  6800              LDR      r0,[r0,#0]            ;3410
000108  f000000c          AND      r0,r0,#0xc            ;3410
00010c  b158              CBZ      r0,|L9.294|
00010e  48b8              LDR      r0,|L9.1008|
000110  6800              LDR      r0,[r0,#0]            ;3411
000112  f000000c          AND      r0,r0,#0xc            ;3411
000116  2808              CMP      r0,#8                 ;3411
000118  d11c              BNE      |L9.340|
00011a  48b5              LDR      r0,|L9.1008|
00011c  1f00              SUBS     r0,r0,#4              ;3411
00011e  6800              LDR      r0,[r0,#0]            ;3411
000120  f4000080          AND      r0,r0,#0x400000       ;3411
000124  b9b0              CBNZ     r0,|L9.340|
                  |L9.294|
000126  48b2              LDR      r0,|L9.1008|
000128  3808              SUBS     r0,r0,#8              ;3415
00012a  6800              LDR      r0,[r0,#0]            ;3415
00012c  f3c00040          UBFX     r0,r0,#1,#1           ;3415
000130  b120              CBZ      r0,|L9.316|
000132  68e0              LDR      r0,[r4,#0xc]          ;3415
000134  2801              CMP      r0,#1                 ;3415
000136  d001              BEQ      |L9.316|
000138  2001              MOVS     r0,#1                 ;3417
00013a  e788              B        |L9.78|
                  |L9.316|
00013c  48ac              LDR      r0,|L9.1008|
00013e  3808              SUBS     r0,r0,#8              ;3423
000140  6800              LDR      r0,[r0,#0]            ;3423
000142  f02000f8          BIC      r0,r0,#0xf8           ;3423
000146  6921              LDR      r1,[r4,#0x10]         ;3423
000148  ea4000c1          ORR      r0,r0,r1,LSL #3       ;3423
00014c  49a8              LDR      r1,|L9.1008|
00014e  3908              SUBS     r1,r1,#8              ;3423
000150  6008              STR      r0,[r1,#0]            ;3423
000152  e037              B        |L9.452|
                  |L9.340|
000154  68e0              LDR      r0,[r4,#0xc]          ;3429
000156  b300              CBZ      r0,|L9.410|
000158  2001              MOVS     r0,#1                 ;3432
00015a  49a6              LDR      r1,|L9.1012|
00015c  6008              STR      r0,[r1,#0]            ;3432
00015e  f7fffffe          BL       HAL_GetTick
000162  4605              MOV      r5,r0                 ;3435
000164  e006              B        |L9.372|
                  |L9.358|
000166  f7fffffe          BL       HAL_GetTick
00016a  1b40              SUBS     r0,r0,r5              ;3440
00016c  2802              CMP      r0,#2                 ;3440
00016e  d901              BLS      |L9.372|
000170  2003              MOVS     r0,#3                 ;3442
000172  e76c              B        |L9.78|
                  |L9.372|
000174  489e              LDR      r0,|L9.1008|
000176  3808              SUBS     r0,r0,#8              ;3438
000178  6800              LDR      r0,[r0,#0]            ;3438
00017a  f3c00040          UBFX     r0,r0,#1,#1           ;3438
00017e  2800              CMP      r0,#0                 ;3438
000180  d0f1              BEQ      |L9.358|
000182  489b              LDR      r0,|L9.1008|
000184  3808              SUBS     r0,r0,#8              ;3447
000186  6800              LDR      r0,[r0,#0]            ;3447
000188  f02000f8          BIC      r0,r0,#0xf8           ;3447
00018c  6921              LDR      r1,[r4,#0x10]         ;3447
00018e  ea4000c1          ORR      r0,r0,r1,LSL #3       ;3447
000192  4997              LDR      r1,|L9.1008|
000194  3908              SUBS     r1,r1,#8              ;3447
000196  6008              STR      r0,[r1,#0]            ;3447
000198  e014              B        |L9.452|
                  |L9.410|
00019a  2000              MOVS     r0,#0                 ;3452
00019c  4995              LDR      r1,|L9.1012|
00019e  6008              STR      r0,[r1,#0]            ;3452
0001a0  f7fffffe          BL       HAL_GetTick
0001a4  4605              MOV      r5,r0                 ;3455
0001a6  e006              B        |L9.438|
                  |L9.424|
0001a8  f7fffffe          BL       HAL_GetTick
0001ac  1b40              SUBS     r0,r0,r5              ;3460
0001ae  2802              CMP      r0,#2                 ;3460
0001b0  d901              BLS      |L9.438|
0001b2  2003              MOVS     r0,#3                 ;3462
0001b4  e74b              B        |L9.78|
                  |L9.438|
0001b6  488e              LDR      r0,|L9.1008|
0001b8  3808              SUBS     r0,r0,#8              ;3458
0001ba  6800              LDR      r0,[r0,#0]            ;3458
0001bc  f3c00040          UBFX     r0,r0,#1,#1           ;3458
0001c0  2800              CMP      r0,#0                 ;3458
0001c2  d1f1              BNE      |L9.424|
                  |L9.452|
0001c4  7820              LDRB     r0,[r4,#0]            ;3469
0001c6  f0000008          AND      r0,r0,#8              ;3469
0001ca  2808              CMP      r0,#8                 ;3469
0001cc  d12c              BNE      |L9.552|
0001ce  6960              LDR      r0,[r4,#0x14]         ;3475
0001d0  b1a8              CBZ      r0,|L9.510|
0001d2  2001              MOVS     r0,#1                 ;3478
0001d4  4988              LDR      r1,|L9.1016|
0001d6  6008              STR      r0,[r1,#0]            ;3478
0001d8  f7fffffe          BL       HAL_GetTick
0001dc  4605              MOV      r5,r0                 ;3481
0001de  e006              B        |L9.494|
                  |L9.480|
0001e0  f7fffffe          BL       HAL_GetTick
0001e4  1b40              SUBS     r0,r0,r5              ;3486
0001e6  2802              CMP      r0,#2                 ;3486
0001e8  d901              BLS      |L9.494|
0001ea  2003              MOVS     r0,#3                 ;3488
0001ec  e72f              B        |L9.78|
                  |L9.494|
0001ee  4880              LDR      r0,|L9.1008|
0001f0  306c              ADDS     r0,r0,#0x6c           ;3484
0001f2  6800              LDR      r0,[r0,#0]            ;3484
0001f4  f3c00040          UBFX     r0,r0,#1,#1           ;3484
0001f8  2800              CMP      r0,#0                 ;3484
0001fa  d0f1              BEQ      |L9.480|
0001fc  e014              B        |L9.552|
                  |L9.510|
0001fe  2000              MOVS     r0,#0                 ;3495
000200  497d              LDR      r1,|L9.1016|
000202  6008              STR      r0,[r1,#0]            ;3495
000204  f7fffffe          BL       HAL_GetTick
000208  4605              MOV      r5,r0                 ;3498
00020a  e006              B        |L9.538|
                  |L9.524|
00020c  f7fffffe          BL       HAL_GetTick
000210  1b40              SUBS     r0,r0,r5              ;3503
000212  2802              CMP      r0,#2                 ;3503
000214  d901              BLS      |L9.538|
000216  2003              MOVS     r0,#3                 ;3505
000218  e719              B        |L9.78|
                  |L9.538|
00021a  4875              LDR      r0,|L9.1008|
00021c  306c              ADDS     r0,r0,#0x6c           ;3501
00021e  6800              LDR      r0,[r0,#0]            ;3501
000220  f3c00040          UBFX     r0,r0,#1,#1           ;3501
000224  2800              CMP      r0,#0                 ;3501
000226  d1f1              BNE      |L9.524|
                  |L9.552|
000228  7820              LDRB     r0,[r4,#0]            ;3511
00022a  f0000004          AND      r0,r0,#4              ;3511
00022e  2804              CMP      r0,#4                 ;3511
000230  d170              BNE      |L9.788|
000232  2600              MOVS     r6,#0                 ;3513
000234  486e              LDR      r0,|L9.1008|
000236  3038              ADDS     r0,r0,#0x38           ;3520
000238  6800              LDR      r0,[r0,#0]            ;3520
00023a  f0005080          AND      r0,r0,#0x10000000     ;3520
00023e  b990              CBNZ     r0,|L9.614|
000240  bf00              NOP                            ;3522
000242  2000              MOVS     r0,#0                 ;3522
000244  9000              STR      r0,[sp,#0]            ;3522
000246  486a              LDR      r0,|L9.1008|
000248  3038              ADDS     r0,r0,#0x38           ;3522
00024a  6800              LDR      r0,[r0,#0]            ;3522
00024c  f0405080          ORR      r0,r0,#0x10000000     ;3522
000250  4967              LDR      r1,|L9.1008|
000252  3138              ADDS     r1,r1,#0x38           ;3522
000254  6008              STR      r0,[r1,#0]            ;3522
000256  4608              MOV      r0,r1                 ;3522
000258  6800              LDR      r0,[r0,#0]            ;3522
00025a  f0005080          AND      r0,r0,#0x10000000     ;3522
00025e  9000              STR      r0,[sp,#0]            ;3522
000260  bf00              NOP                            ;3522
000262  bf00              NOP                            ;3522
000264  2601              MOVS     r6,#1                 ;3523
                  |L9.614|
000266  4865              LDR      r0,|L9.1020|
000268  6800              LDR      r0,[r0,#0]            ;3526
00026a  f4007080          AND      r0,r0,#0x100          ;3526
00026e  b9b0              CBNZ     r0,|L9.670|
000270  4862              LDR      r0,|L9.1020|
000272  6800              LDR      r0,[r0,#0]            ;3529
000274  f4407080          ORR      r0,r0,#0x100          ;3529
000278  4960              LDR      r1,|L9.1020|
00027a  6008              STR      r0,[r1,#0]            ;3529
00027c  f7fffffe          BL       HAL_GetTick
000280  4605              MOV      r5,r0                 ;3532
000282  e006              B        |L9.658|
                  |L9.644|
000284  f7fffffe          BL       HAL_GetTick
000288  1b40              SUBS     r0,r0,r5              ;3536
00028a  2802              CMP      r0,#2                 ;3536
00028c  d901              BLS      |L9.658|
00028e  2003              MOVS     r0,#3                 ;3538
000290  e6dd              B        |L9.78|
                  |L9.658|
000292  485a              LDR      r0,|L9.1020|
000294  6800              LDR      r0,[r0,#0]            ;3534
000296  f4007080          AND      r0,r0,#0x100          ;3534
00029a  2800              CMP      r0,#0                 ;3534
00029c  d0f2              BEQ      |L9.644|
                  |L9.670|
00029e  bf00              NOP                            ;3544
0002a0  68a0              LDR      r0,[r4,#8]            ;3544
0002a2  2801              CMP      r0,#1                 ;3544
0002a4  d108              BNE      |L9.696|
0002a6  4852              LDR      r0,|L9.1008|
0002a8  3068              ADDS     r0,r0,#0x68           ;3544
0002aa  6800              LDR      r0,[r0,#0]            ;3544
0002ac  f0400001          ORR      r0,r0,#1              ;3544
0002b0  494f              LDR      r1,|L9.1008|
0002b2  3168              ADDS     r1,r1,#0x68           ;3544
0002b4  6008              STR      r0,[r1,#0]            ;3544
0002b6  e01d              B        |L9.756|
                  |L9.696|
0002b8  68a0              LDR      r0,[r4,#8]            ;3544
0002ba  2805              CMP      r0,#5                 ;3544
0002bc  d10d              BNE      |L9.730|
0002be  484c              LDR      r0,|L9.1008|
0002c0  3068              ADDS     r0,r0,#0x68           ;3544
0002c2  6800              LDR      r0,[r0,#0]            ;3544
0002c4  f0400004          ORR      r0,r0,#4              ;3544
0002c8  4949              LDR      r1,|L9.1008|
0002ca  3168              ADDS     r1,r1,#0x68           ;3544
0002cc  6008              STR      r0,[r1,#0]            ;3544
0002ce  4608              MOV      r0,r1                 ;3544
0002d0  6800              LDR      r0,[r0,#0]            ;3544
0002d2  f0400001          ORR      r0,r0,#1              ;3544
0002d6  6008              STR      r0,[r1,#0]            ;3544
0002d8  e00c              B        |L9.756|
                  |L9.730|
0002da  4845              LDR      r0,|L9.1008|
0002dc  3068              ADDS     r0,r0,#0x68           ;3544
0002de  6800              LDR      r0,[r0,#0]            ;3544
0002e0  f0200001          BIC      r0,r0,#1              ;3544
0002e4  4942              LDR      r1,|L9.1008|
0002e6  3168              ADDS     r1,r1,#0x68           ;3544
0002e8  6008              STR      r0,[r1,#0]            ;3544
0002ea  4608              MOV      r0,r1                 ;3544
0002ec  6800              LDR      r0,[r0,#0]            ;3544
0002ee  f0200004          BIC      r0,r0,#4              ;3544
0002f2  6008              STR      r0,[r1,#0]            ;3544
                  |L9.756|
0002f4  bf00              NOP                            ;3544
0002f6  68a0              LDR      r0,[r4,#8]            ;3546
0002f8  b1a8              CBZ      r0,|L9.806|
0002fa  f7fffffe          BL       HAL_GetTick
0002fe  4605              MOV      r5,r0                 ;3549
000300  e009              B        |L9.790|
                  |L9.770|
000302  f7fffffe          BL       HAL_GetTick
000306  1b40              SUBS     r0,r0,r5              ;3554
000308  f2413188          MOV      r1,#0x1388            ;3554
00030c  4288              CMP      r0,r1                 ;3554
00030e  d902              BLS      |L9.790|
000310  2003              MOVS     r0,#3                 ;3556
000312  e69c              B        |L9.78|
                  |L9.788|
000314  e026              B        |L9.868|
                  |L9.790|
000316  4836              LDR      r0,|L9.1008|
000318  3068              ADDS     r0,r0,#0x68           ;3552
00031a  6800              LDR      r0,[r0,#0]            ;3552
00031c  f3c00040          UBFX     r0,r0,#1,#1           ;3552
000320  2800              CMP      r0,#0                 ;3552
000322  d0ee              BEQ      |L9.770|
000324  e013              B        |L9.846|
                  |L9.806|
000326  f7fffffe          BL       HAL_GetTick
00032a  4605              MOV      r5,r0                 ;3563
00032c  e008              B        |L9.832|
                  |L9.814|
00032e  f7fffffe          BL       HAL_GetTick
000332  1b40              SUBS     r0,r0,r5              ;3568
000334  f2413188          MOV      r1,#0x1388            ;3568
000338  4288              CMP      r0,r1                 ;3568
00033a  d901              BLS      |L9.832|
00033c  2003              MOVS     r0,#3                 ;3570
00033e  e686              B        |L9.78|
                  |L9.832|
000340  482b              LDR      r0,|L9.1008|
000342  3068              ADDS     r0,r0,#0x68           ;3566
000344  6800              LDR      r0,[r0,#0]            ;3566
000346  f3c00040          UBFX     r0,r0,#1,#1           ;3566
00034a  2800              CMP      r0,#0                 ;3566
00034c  d1ef              BNE      |L9.814|
                  |L9.846|
00034e  2e01              CMP      r6,#1                 ;3576
000350  d107              BNE      |L9.866|
000352  4827              LDR      r0,|L9.1008|
000354  3038              ADDS     r0,r0,#0x38           ;3578
000356  6800              LDR      r0,[r0,#0]            ;3578
000358  f0205080          BIC      r0,r0,#0x10000000     ;3578
00035c  4924              LDR      r1,|L9.1008|
00035e  3138              ADDS     r1,r1,#0x38           ;3578
000360  6008              STR      r0,[r1,#0]            ;3578
                  |L9.866|
000362  bf00              NOP                            ;3580
                  |L9.868|
000364  69a0              LDR      r0,[r4,#0x18]         ;3584
000366  b3d8              CBZ      r0,|L9.992|
000368  4821              LDR      r0,|L9.1008|
00036a  6800              LDR      r0,[r0,#0]            ;3587
00036c  f000000c          AND      r0,r0,#0xc            ;3587
000370  2808              CMP      r0,#8                 ;3587
000372  d061              BEQ      |L9.1080|
000374  69a0              LDR      r0,[r4,#0x18]         ;3589
000376  2802              CMP      r0,#2                 ;3589
000378  d149              BNE      |L9.1038|
00037a  2000              MOVS     r0,#0                 ;3600
00037c  491d              LDR      r1,|L9.1012|
00037e  6608              STR      r0,[r1,#0x60]         ;3600
000380  f7fffffe          BL       HAL_GetTick
000384  4605              MOV      r5,r0                 ;3603
000386  e006              B        |L9.918|
                  |L9.904|
000388  f7fffffe          BL       HAL_GetTick
00038c  1b40              SUBS     r0,r0,r5              ;3608
00038e  2802              CMP      r0,#2                 ;3608
000390  d901              BLS      |L9.918|
000392  2003              MOVS     r0,#3                 ;3610
000394  e65b              B        |L9.78|
                  |L9.918|
000396  4816              LDR      r0,|L9.1008|
000398  3808              SUBS     r0,r0,#8              ;3606
00039a  6800              LDR      r0,[r0,#0]            ;3606
00039c  f3c06040          UBFX     r0,r0,#25,#1          ;3606
0003a0  2800              CMP      r0,#0                 ;3606
0003a2  d1f1              BNE      |L9.904|
0003a4  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;3615
0003a8  4308              ORRS     r0,r0,r1              ;3615
0003aa  6a61              LDR      r1,[r4,#0x24]         ;3615
0003ac  ea401181          ORR      r1,r0,r1,LSL #6       ;3615
0003b0  2201              MOVS     r2,#1                 ;3615
0003b2  6aa0              LDR      r0,[r4,#0x28]         ;3615
0003b4  ebc20050          RSB      r0,r2,r0,LSR #1       ;3615
0003b8  ea414100          ORR      r1,r1,r0,LSL #16      ;3615
0003bc  202c              MOVS     r0,#0x2c              ;3615
0003be  5d00              LDRB     r0,[r0,r4]            ;3615
0003c0  ea416100          ORR      r1,r1,r0,LSL #24      ;3615
0003c4  2030              MOVS     r0,#0x30              ;3615
0003c6  5d00              LDRB     r0,[r0,r4]            ;3615
0003c8  ea417000          ORR      r0,r1,r0,LSL #28      ;3615
0003cc  4908              LDR      r1,|L9.1008|
0003ce  1f09              SUBS     r1,r1,#4              ;3615
0003d0  6008              STR      r0,[r1,#0]            ;3615
0003d2  2001              MOVS     r0,#1                 ;3623
0003d4  4907              LDR      r1,|L9.1012|
0003d6  6608              STR      r0,[r1,#0x60]         ;3623
0003d8  f7fffffe          BL       HAL_GetTick
0003dc  4605              MOV      r5,r0                 ;3626
0003de  e00f              B        |L9.1024|
                  |L9.992|
0003e0  e02c              B        |L9.1084|
                  |L9.994|
0003e2  f7fffffe          BL       HAL_GetTick
0003e6  1b40              SUBS     r0,r0,r5              ;3631
0003e8  2802              CMP      r0,#2                 ;3631
0003ea  d909              BLS      |L9.1024|
0003ec  2003              MOVS     r0,#3                 ;3633
0003ee  e62e              B        |L9.78|
                  |L9.1008|
                          DCD      0x40023808
                  |L9.1012|
                          DCD      0x42470000
                  |L9.1016|
                          DCD      0x42470e80
                  |L9.1020|
                          DCD      0x40007000
                  |L9.1024|
000400  480f              LDR      r0,|L9.1088|
000402  6800              LDR      r0,[r0,#0]            ;3629
000404  f3c06040          UBFX     r0,r0,#25,#1          ;3629
000408  2800              CMP      r0,#0                 ;3629
00040a  d0ea              BEQ      |L9.994|
00040c  e016              B        |L9.1084|
                  |L9.1038|
00040e  2000              MOVS     r0,#0                 ;3640
000410  490c              LDR      r1,|L9.1092|
000412  6608              STR      r0,[r1,#0x60]         ;3640
000414  f7fffffe          BL       HAL_GetTick
000418  4605              MOV      r5,r0                 ;3643
00041a  e006              B        |L9.1066|
                  |L9.1052|
00041c  f7fffffe          BL       HAL_GetTick
000420  1b40              SUBS     r0,r0,r5              ;3648
000422  2802              CMP      r0,#2                 ;3648
000424  d901              BLS      |L9.1066|
000426  2003              MOVS     r0,#3                 ;3650
000428  e611              B        |L9.78|
                  |L9.1066|
00042a  4805              LDR      r0,|L9.1088|
00042c  6800              LDR      r0,[r0,#0]            ;3646
00042e  f3c06040          UBFX     r0,r0,#25,#1          ;3646
000432  2800              CMP      r0,#0                 ;3646
000434  d1f2              BNE      |L9.1052|
000436  e001              B        |L9.1084|
                  |L9.1080|
000438  2001              MOVS     r0,#1                 ;3657
00043a  e608              B        |L9.78|
                  |L9.1084|
00043c  2000              MOVS     r0,#0                 ;3660
00043e  e606              B        |L9.78|
;;;3662   
                          ENDP

                  |L9.1088|
                          DCD      0x40023800
                  |L9.1092|
                          DCD      0x42470000

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 478
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX|
#line 665
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
